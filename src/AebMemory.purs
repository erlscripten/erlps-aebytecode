module Aeb.Memory(erlps__binary_to_words__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__binary_to_words__1 :: ErlangFun
erlps__binary_to_words__1 [(ErlangBinary binEnd_0)]
  | BIN.empty binEnd_0 =
  ErlangEmptyList
erlps__binary_to_words__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 256)
  , (BIN.Ok n_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok bin_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let tail_8 = erlps__binary_to_words__1 [bin_6]
  in ErlangCons n_3 tail_8
erlps__binary_to_words__1 [bin_0] =
  let    bin_el_3 = toErl 0
  in let
    arg_1 =
      ErlangBinary
        (BIN.concat
           [BIN.binPrefix bin_0 (BIN.packedSize bin_0) 8,
            BIN.fromInt bin_el_3 (toErl 8) 1 BIN.Big])
  in erlps__binary_to_words__1 [arg_1]
erlps__binary_to_words__1 [arg_4] = EXC.function_clause unit
erlps__binary_to_words__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args