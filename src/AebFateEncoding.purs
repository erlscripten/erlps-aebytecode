module Aeb.Fate.Encoding(erlps__deserialize__1,
                         erlps__deserialize_one__1, erlps__deserialize_type__1,
                         erlps__serialize__1, erlps__serialize_type__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__serialize__1 :: ErlangFun
erlps__serialize__1 [(ErlangAtom "true")] =
  (ErlangBinary
     (BIN.from_int (ErlangInt (DBI.fromInt 255))
        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__serialize__1 [(ErlangAtom "false")] =
  (ErlangBinary
     (BIN.from_int (ErlangInt (DBI.fromInt 127))
        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__serialize__1 [(ErlangTuple [(ErlangAtom "tuple"),
                                   (ErlangTuple [])])]
  =
  (ErlangBinary
     (BIN.from_int (ErlangInt (DBI.fromInt 63))
        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__serialize__1 [(ErlangBinary bin_e_0)]
  | (BIN.empty bin_e_0) =
  (ErlangBinary
     (BIN.from_int (ErlangInt (DBI.fromInt 95))
        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__serialize__1 [i_0] | (isEInt i_0) =
  (erlps__serialize_integer__1 [i_0])
erlps__serialize__1 args = (erlps__serialize__1__p1 args)

erlps__serialize__1__p1 :: ErlangFun
erlps__serialize__1__p1 [(ErlangTuple [(ErlangAtom "bits"),
                                       bits_0])]
  | (isEInt bits_0) =
  (erlps__serialize_bits__1 [bits_0])
erlps__serialize__1__p1 [string_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_12 = (BIF.erlang__is_binary__1 [string_0])
             in let
               lop_11 =
                 case lop_12 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let lop_14 = (BIF.erlang__byte_size__1 [string_0])
                     in
                       (BIF.erlang__op_greater
                          [lop_14, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_12)
             in
               case lop_11 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let lop_17 = (BIF.erlang__byte_size__1 [string_0])
                   in
                     (BIF.erlang__op_lesser
                        [lop_17, (ErlangInt (DBI.fromInt 64))])
                 _ -> (EXC.badarg1 lop_11)))) =
  let    size_2 = (BIF.erlang__byte_size__1 [string_0])
  in let
    lop_4 =
      (BIF.erlang__bsl__2 [size_2, (ErlangInt (DBI.fromInt 2))])
  in let
    bin_8 =
      (BIF.erlang__op_plus [lop_4, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int bin_8 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin string_0 (BIN.packed_size string_0) 8)]))
erlps__serialize__1__p1 [string_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_10 = (BIF.erlang__is_binary__1 [string_0])
             in let
               lop_9 =
                 case lop_10 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let lop_12 = (BIF.erlang__byte_size__1 [string_0])
                     in
                       (BIF.erlang__op_greater
                          [lop_12, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_10)
             in
               case lop_9 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let lop_15 = (BIF.erlang__byte_size__1 [string_0])
                   in
                     (BIF.erlang__op_greaterEq
                        [lop_15, (ErlangInt (DBI.fromInt 64))])
                 _ -> (EXC.badarg1 lop_9)))) =
  let    lop_5 = (BIF.erlang__byte_size__1 [string_0])
  in let
    arg_4 =
      (BIF.erlang__op_minus [lop_5, (ErlangInt (DBI.fromInt 64))])
  in let bin_el_3 = (erlps__serialize_integer__1 [arg_4])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 1))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8),
           (BIN.format_bin string_0 (BIN.packed_size string_0) 8)]))
erlps__serialize__1__p1 [(ErlangTuple [(ErlangAtom "bytes"),
                                       bytes_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bytes_0])))) =
  let bin_el_3 = (erlps__serialize__1 [bytes_0])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 159))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.from_int (ErlangInt (DBI.fromInt 1))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p1 [(ErlangTuple [(ErlangAtom "address"),
                                       address_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [address_0])))) =
  let
    bin_el_3 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
         [address_0])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 159))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.from_int (ErlangInt (DBI.fromInt 0))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p1 args = (erlps__serialize__1__p2 args)

erlps__serialize__1__p2 :: ErlangFun
erlps__serialize__1__p2 [(ErlangTuple [(ErlangAtom "contract"),
                                       address_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [address_0])))) =
  let
    bin_el_3 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
         [address_0])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 159))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.from_int (ErlangInt (DBI.fromInt 2))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p2 [(ErlangTuple [(ErlangAtom "oracle"),
                                       address_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [address_0])))) =
  let
    bin_el_3 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
         [address_0])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 159))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.from_int (ErlangInt (DBI.fromInt 3))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p2 [(ErlangTuple [(ErlangAtom "oracle_query"),
                                       address_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [address_0])))) =
  let
    bin_el_3 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
         [address_0])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 159))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.from_int (ErlangInt (DBI.fromInt 4))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p2 [(ErlangTuple [(ErlangAtom "channel"),
                                       address_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [address_0])))) =
  let
    bin_el_3 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
         [address_0])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 159))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.from_int (ErlangInt (DBI.fromInt 5))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p2 [(ErlangTuple [(ErlangAtom "tuple"),
                                       t_0])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_26 = (BIF.erlang__size__1 [t_0])
             in
               (BIF.erlang__op_greater
                  [lop_26, (ErlangInt (DBI.fromInt 0))])))) =
  let    s_2 = (BIF.erlang__size__1 [t_0])
  in let l_4 = (BIF.erlang__tuple_to_list__1 [t_0])
  in let
    rest_11 =
      (BIN.concat_erl
         (flmap
            (\ lc_7 ->
               case lc_7 of
                 e_6 ->
                   let    bin_el_9 = (erlps__serialize__1 [e_6])
                   in let
                     lc_ret_8 =
                       (ErlangBinary
                          (BIN.format_bin bin_el_9 (BIN.packed_size bin_el_9)
                             8))
                   in (ErlangCons lc_ret_8 ErlangEmptyList)
                 _ -> ErlangEmptyList)
            l_4))
  in
    case (ErlangAtom "true") of
      _ | (weakLt s_2 (ErlangInt (DBI.fromInt 16))) ->
        let   
          lop_12 = (BIF.erlang__bsl__2 [s_2, (ErlangInt (DBI.fromInt 4))])
        in let
          bin_16 =
            (BIF.erlang__op_plus [lop_12, (ErlangInt (DBI.fromInt 11))])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int bin_16 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin rest_11 (BIN.packed_size rest_11) 8)]))
      _ ->
        let   
          arg_19 =
            (BIF.erlang__op_minus [s_2, (ErlangInt (DBI.fromInt 16))])
        in let size_22 = (erlps__rlp_encode_int__1 [arg_19])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 11))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin size_22 (BIN.packed_size size_22) 8),
                 (BIN.format_bin rest_11 (BIN.packed_size rest_11) 8)]))
      _ -> (EXC.if_clause unit)
erlps__serialize__1__p2 args = (erlps__serialize__1__p3 args)

erlps__serialize__1__p3 :: ErlangFun
erlps__serialize__1__p3 [l_0] | (isEList l_0) =
  let    s_3 = (BIF.erlang__length__1 [l_0])
  in let
    rest_10 =
      (BIN.concat_erl
         (flmap
            (\ lc_6 ->
               case lc_6 of
                 el_5 ->
                   let    bin_el_8 = (erlps__serialize__1 [el_5])
                   in let
                     lc_ret_7 =
                       (ErlangBinary
                          (BIN.format_bin bin_el_8 (BIN.packed_size bin_el_8)
                             8))
                   in (ErlangCons lc_ret_7 ErlangEmptyList)
                 _ -> ErlangEmptyList)
            l_0))
  in
    case (ErlangAtom "true") of
      _ | (weakLt s_3 (ErlangInt (DBI.fromInt 16))) ->
        let   
          lop_11 = (BIF.erlang__bsl__2 [s_3, (ErlangInt (DBI.fromInt 4))])
        in let
          bin_15 =
            (BIF.erlang__op_plus [lop_11, (ErlangInt (DBI.fromInt 3))])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int bin_15 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin rest_10 (BIN.packed_size rest_10) 8)]))
      _ ->
        let   
          arg_18 =
            (BIF.erlang__op_minus [s_3, (ErlangInt (DBI.fromInt 16))])
        in let val_21 = (erlps__rlp_encode_int__1 [arg_18])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 31))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin val_21 (BIN.packed_size val_21) 8),
                 (BIN.format_bin rest_10 (BIN.packed_size rest_10) 8)]))
      _ -> (EXC.if_clause unit)
erlps__serialize__1__p3 [map_0] | (isEMap map_0) =
  let    l_2 = (BIF.maps__to_list__1 [map_0])
  in let size_4 = (BIF.erlang__length__1 [l_2])
  in let lc_src_6 = (erlps__sort_and_check__1 [l_2])
  in let
    arg_5 =
      (flmap
         (\ lc_10 ->
            case lc_10 of
              (ErlangTuple [k_8, v_9]) ->
                let    bin_el_12 = (erlps__serialize__1 [k_8])
                in let bin_el_14 = (erlps__serialize__1 [v_9])
                in let
                  lc_ret_11 =
                    (ErlangBinary
                       (BIN.concat
                          [(BIN.format_bin bin_el_12 (BIN.packed_size bin_el_12)
                              8),
                           (BIN.format_bin bin_el_14 (BIN.packed_size bin_el_14)
                              8)]))
                in (ErlangCons lc_ret_11 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_6)
  in let elements_16 = (BIF.erlang__list_to_binary__1 [arg_5])
  in let bin_el_18 = (erlps__rlp_encode_int__1 [size_4])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 47))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_18 (BIN.packed_size bin_el_18) 8),
           (BIN.format_bin elements_16 (BIN.packed_size elements_16) 8)]))
erlps__serialize__1__p3 [(ErlangTuple [(ErlangAtom "store_map"),
                                       cache_0, id_1])]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_6 = (ErlangMap Map.empty)
             in (BIF.erlang__op_exactEq [cache_0, rop_6])))) =
  let bin_el_3 = (erlps__rlp_encode_int__1 [id_1])
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.from_int (ErlangInt (DBI.fromInt 191))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin bin_el_3 (BIN.packed_size bin_el_3) 8)]))
erlps__serialize__1__p3 [(ErlangTuple [(ErlangAtom "variant"),
                                       arities_0, tag_1, values_2])]
  =
  let
    match_expr_13 =
      (flmap
         (\ lc_5 ->
            case lc_5 of
              a_4 ->
                let cond_6 = (BIF.erlang__is_integer__1 [a_4])
                in
                  case cond_6 of
                    (ErlangAtom "true") ->
                      let
                        cond_8 =
                          (BIF.erlang__op_lesser
                             [a_4, (ErlangInt (DBI.fromInt 256))])
                      in
                        case cond_8 of
                          (ErlangAtom "true") ->
                            (ErlangCons a_4 ErlangEmptyList)
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         arities_0)
  in
    case match_expr_13 of
      arities_12 | (arities_12 == arities_0) ->
        let size_15 = (BIF.erlang__length__1 [arities_0])
        in
          case (ErlangAtom "true") of
            _ | ((((isEInt tag_1) &&
                     (weakLeq (ErlangInt (DBI.fromInt 0)) tag_1)) &&
                    (weakLt tag_1 size_15)) &&
                   (isETuple values_2)) ->
              let   
                arg_16 =
                  (BIF.erlang__op_plus [tag_1, (ErlangInt (DBI.fromInt 1))])
              in let
                arity_20 =
                  (BIF.do_remote_fun_call "Lists" "erlps__nth__2"
                     [arg_16, arities_0])
              in
                case (ErlangAtom "true") of
                  _ | ((ErlangAtom "true") ==
                         (falsifyErrors
                            (\ _ ->
                               let lop_21 = (BIF.erlang__size__1 [values_2])
                               in
                                 (BIF.erlang__op_exactEq
                                    [lop_21, arity_20])))) ->
                    let    arg_24 = (BIF.erlang__list_to_binary__1 [arities_0])
                    in let
                      encodedarities_26 =
                        (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
                           [arg_24])
                    in let
                      arg_31 = (ErlangTuple [(ErlangAtom "tuple"), values_2])
                    in let bin_el_30 = (erlps__serialize__1 [arg_31])
                    in
                      (ErlangBinary
                         (BIN.concat
                            [(BIN.from_int (ErlangInt (DBI.fromInt 175))
                                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                             (BIN.format_bin encodedarities_26
                                (BIN.packed_size encodedarities_26) 8),
                             (BIN.from_int tag_1 (ErlangInt (DBI.fromInt 8)) 1
                                BIN.Big),
                             (BIN.format_bin bin_el_30
                                (BIN.packed_size bin_el_30) 8)]))
                  _ -> (EXC.if_clause unit)
            _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch match_expr_13)
erlps__serialize__1__p3 [(ErlangTuple [(ErlangAtom "typerep"),
                                       t_0])]
  =
  let arg_1 = (erlps__serialize_type__1 [t_0])
  in (BIF.erlang__iolist_to_binary__1 [arg_1])
erlps__serialize__1__p3 [arg_3] = (EXC.function_clause unit)
erlps__serialize__1__p3 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__serialize_type__1 :: ErlangFun
erlps__serialize_type__1 [(ErlangAtom "integer")] =
  (ErlangCons (ErlangInt (DBI.fromInt 7)) ErlangEmptyList)
erlps__serialize_type__1 [(ErlangAtom "boolean")] =
  (ErlangCons (ErlangInt (DBI.fromInt 23)) ErlangEmptyList)
erlps__serialize_type__1 [(ErlangAtom "any")] =
  (ErlangCons (ErlangInt (DBI.fromInt 247)) ErlangEmptyList)
erlps__serialize_type__1 [(ErlangTuple [(ErlangAtom "tvar"),
                                        n_0])]
  | ((weakLeq (ErlangInt (DBI.fromInt 0)) n_0) &&
       (weakLeq n_0 (ErlangInt (DBI.fromInt 255)))) =
  (ErlangCons (ErlangInt (DBI.fromInt 231))
     (ErlangCons n_0 ErlangEmptyList))
erlps__serialize_type__1 [(ErlangTuple [(ErlangAtom "list"),
                                        t_0])]
  =
  let tail_2 = (erlps__serialize_type__1 [t_0])
  in (ErlangCons (ErlangInt (DBI.fromInt 39)) tail_2)
erlps__serialize_type__1 args =
  (erlps__serialize_type__1__p1 args)

erlps__serialize_type__1__p1 :: ErlangFun
erlps__serialize_type__1__p1 [(ErlangTuple [(ErlangAtom "tuple"),
                                            ts_0])]
  =
  let case_1 = (BIF.erlang__length__1 [ts_0])
  in
    case case_1 of
      n_3 | (weakLeq n_3 (ErlangInt (DBI.fromInt 255))) ->
        let
          tail_7 =
            (flmap
               (\ lc_10 ->
                  case lc_10 of
                    t_9 ->
                      let lc_ret_11 = (erlps__serialize_type__1 [t_9])
                      in (ErlangCons lc_ret_11 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ts_0)
        in
          (ErlangCons (ErlangInt (DBI.fromInt 55)) (ErlangCons n_3 tail_7))
      something_else -> (EXC.case_clause something_else)
erlps__serialize_type__1__p1 [(ErlangTuple [(ErlangAtom "bytes"),
                                            n_0])]
  | (weakLeq (ErlangInt (DBI.fromInt 0)) n_0) =
  let    arg_3 = (erlps__serialize_integer__1 [n_0])
  in let tail_2 = (BIF.erlang__binary_to_list__1 [arg_3])
  in (ErlangCons (ErlangInt (DBI.fromInt 151)) tail_2)
erlps__serialize_type__1__p1 [(ErlangAtom "address")] =
  (ErlangCons (ErlangInt (DBI.fromInt 71))
     (ErlangCons (ErlangInt (DBI.fromInt 0)) ErlangEmptyList))
erlps__serialize_type__1__p1 [(ErlangAtom "contract")] =
  (ErlangCons (ErlangInt (DBI.fromInt 71))
     (ErlangCons (ErlangInt (DBI.fromInt 2)) ErlangEmptyList))
erlps__serialize_type__1__p1 [(ErlangAtom "oracle")] =
  (ErlangCons (ErlangInt (DBI.fromInt 71))
     (ErlangCons (ErlangInt (DBI.fromInt 3)) ErlangEmptyList))
erlps__serialize_type__1__p1 args =
  (erlps__serialize_type__1__p2 args)

erlps__serialize_type__1__p2 :: ErlangFun
erlps__serialize_type__1__p2 [(ErlangAtom "oracle_query")] =
  (ErlangCons (ErlangInt (DBI.fromInt 71))
     (ErlangCons (ErlangInt (DBI.fromInt 4)) ErlangEmptyList))
erlps__serialize_type__1__p2 [(ErlangAtom "channel")] =
  (ErlangCons (ErlangInt (DBI.fromInt 71))
     (ErlangCons (ErlangInt (DBI.fromInt 5)) ErlangEmptyList))
erlps__serialize_type__1__p2 [(ErlangAtom "bits")] =
  (ErlangCons (ErlangInt (DBI.fromInt 87)) ErlangEmptyList)
erlps__serialize_type__1__p2 [(ErlangTuple [(ErlangAtom "map"),
                                            k_0, v_1])]
  =
  let    lop_4 = (erlps__serialize_type__1 [k_0])
  in let rop_6 = (erlps__serialize_type__1 [v_1])
  in let tail_3 = (BIF.erlang__op_append [lop_4, rop_6])
  in (ErlangCons (ErlangInt (DBI.fromInt 103)) tail_3)
erlps__serialize_type__1__p2 [(ErlangAtom "string")] =
  (ErlangCons (ErlangInt (DBI.fromInt 119)) ErlangEmptyList)
erlps__serialize_type__1__p2 args =
  (erlps__serialize_type__1__p3 args)

erlps__serialize_type__1__p3 :: ErlangFun
erlps__serialize_type__1__p3 [(ErlangTuple [(ErlangAtom "variant"),
                                            listofvariants_0])]
  =
  let size_2 = (BIF.erlang__length__1 [listofvariants_0])
  in
    case (ErlangAtom "true") of
      _ | (weakLt size_2 (ErlangInt (DBI.fromInt 256))) ->
        let
          tail_6 =
            (flmap
               (\ lc_9 ->
                  case lc_9 of
                    t_8 ->
                      let lc_ret_10 = (erlps__serialize_type__1 [t_8])
                      in (ErlangCons lc_ret_10 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               listofvariants_0)
        in
          (ErlangCons (ErlangInt (DBI.fromInt 135))
             (ErlangCons size_2 tail_6))
      _ -> (EXC.if_clause unit)
erlps__serialize_type__1__p3 [arg_12] =
  (EXC.function_clause unit)
erlps__serialize_type__1__p3 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize_type__1 :: ErlangFun
erlps__deserialize_type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 7)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "integer"), rest_6])
erlps__deserialize_type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 23)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "boolean"), rest_6])
erlps__deserialize_type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 247)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "any"), rest_6])
erlps__deserialize_type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 231)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok id_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let tup_el_10 = (ErlangTuple [(ErlangAtom "tvar"), id_6])
  in (ErlangTuple [tup_el_10, rest_9])
erlps__deserialize_type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__deserialize_type__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [t_8, rest2_9]) ->
        let tup_el_11 = (ErlangTuple [(ErlangAtom "list"), t_8])
        in (ErlangTuple [tup_el_11, rest2_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize_type__1 args =
  (erlps__deserialize_type__1__p1 args)

erlps__deserialize_type__1__p1 :: ErlangFun
erlps__deserialize_type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok n_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let
    match_expr_15 =
      (erlps__deserialize_types__3 [n_6, rest_9, ErlangEmptyList])
  in
    case match_expr_15 of
      (ErlangTuple [ts_13, rest2_14]) ->
        let tup_el_16 = (ErlangTuple [(ErlangAtom "tuple"), ts_13])
        in (ErlangTuple [tup_el_16, rest2_14])
      _ -> (EXC.badmatch match_expr_15)
erlps__deserialize_type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 151)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__deserialize_one__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [n_8, rest2_9]) ->
        let    lop_11 = (BIF.erlang__is_integer__1 [n_8])
        in let
          match_expr_15 =
            case lop_11 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                (BIF.erlang__op_greaterEq [n_8, (ErlangInt (DBI.fromInt 0))])
              _ -> (EXC.badarg1 lop_11)
        in
          case match_expr_15 of
            (ErlangAtom "true") ->
              let tup_el_16 = (ErlangTuple [(ErlangAtom "bytes"), n_8])
              in (ErlangTuple [tup_el_16, rest2_9])
            _ -> (EXC.badmatch match_expr_15)
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize_type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 71)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok objecttype_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  case objecttype_6 of
    (ErlangInt num_11) | ((ErlangInt num_11) ==
                            (ErlangInt (DBI.fromInt 0))) ->
      (ErlangTuple [(ErlangAtom "address"), rest_9])
    (ErlangInt num_14) | ((ErlangInt num_14) ==
                            (ErlangInt (DBI.fromInt 2))) ->
      (ErlangTuple [(ErlangAtom "contract"), rest_9])
    (ErlangInt num_17) | ((ErlangInt num_17) ==
                            (ErlangInt (DBI.fromInt 3))) ->
      (ErlangTuple [(ErlangAtom "oracle"), rest_9])
    (ErlangInt num_20) | ((ErlangInt num_20) ==
                            (ErlangInt (DBI.fromInt 4))) ->
      (ErlangTuple [(ErlangAtom "oracle_query"), rest_9])
    (ErlangInt num_23) | ((ErlangInt num_23) ==
                            (ErlangInt (DBI.fromInt 5))) ->
      (ErlangTuple [(ErlangAtom "channel"), rest_9])
    something_else -> (EXC.case_clause something_else)
erlps__deserialize_type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 87)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "bits"), rest_6])
erlps__deserialize_type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 103)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__deserialize_type__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [k_8, rest2_9]) ->
        let match_expr_14 = (erlps__deserialize_type__1 [rest2_9])
        in
          case match_expr_14 of
            (ErlangTuple [v_12, rest3_13]) ->
              let tup_el_15 = (ErlangTuple [(ErlangAtom "map"), k_8, v_12])
              in (ErlangTuple [tup_el_15, rest3_13])
            _ -> (EXC.badmatch match_expr_14)
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize_type__1__p1 args =
  (erlps__deserialize_type__1__p2 args)

erlps__deserialize_type__1__p2 :: ErlangFun
erlps__deserialize_type__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 119)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "string"), rest_6])
erlps__deserialize_type__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 135)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok size_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let
    match_expr_15 =
      (erlps__deserialize_variants__3
         [size_6, rest_9, ErlangEmptyList])
  in
    case match_expr_15 of
      (ErlangTuple [variants_13, rest2_14]) ->
        let
          tup_el_16 = (ErlangTuple [(ErlangAtom "variant"), variants_13])
        in (ErlangTuple [tup_el_16, rest2_14])
      _ -> (EXC.badmatch match_expr_15)
erlps__deserialize_type__1__p2 [arg_20] =
  (EXC.function_clause unit)
erlps__deserialize_type__1__p2 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize_variants__3 :: ErlangFun
erlps__deserialize_variants__3 [(ErlangInt num_0), rest_1,
                                variants_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [variants_2])
  in (ErlangTuple [tup_el_3, rest_1])
erlps__deserialize_variants__3 [n_0, rest_1, variants_2] =
  let match_expr_6 = (erlps__deserialize_type__1 [rest_1])
  in
    case match_expr_6 of
      (ErlangTuple [t_4, rest2_5]) ->
        let
          arg_7 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__deserialize_variants__3
             [arg_7, rest2_5, (ErlangCons t_4 variants_2)])
      _ -> (EXC.badmatch match_expr_6)
erlps__deserialize_variants__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__deserialize_variants__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize_types__3 :: ErlangFun
erlps__deserialize_types__3 [(ErlangInt num_0), binary_1, acc_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_2])
  in (ErlangTuple [tup_el_3, binary_1])
erlps__deserialize_types__3 [n_0, binary_1, acc_2] =
  let match_expr_6 = (erlps__deserialize_type__1 [binary_1])
  in
    case match_expr_6 of
      (ErlangTuple [t_4, rest_5]) ->
        let
          arg_7 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__deserialize_types__3
             [arg_7, rest_5, (ErlangCons t_4 acc_2)])
      _ -> (EXC.badmatch match_expr_6)
erlps__deserialize_types__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__deserialize_types__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_encode_int__1 :: ErlangFun
erlps__rlp_encode_int__1 [s_0]
  | (weakGeq s_0 (ErlangInt (DBI.fromInt 0))) =
  let arg_1 = (BIF.binary__encode_unsigned__1 [s_0])
  in
    (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [arg_1])
erlps__rlp_encode_int__1 [arg_3] = (EXC.function_clause unit)
erlps__rlp_encode_int__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_decode_int__1 :: ErlangFun
erlps__rlp_decode_int__1 [binary_0] =
  let
    match_expr_4 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode_one__1"
         [binary_0])
  in
    case match_expr_4 of
      (ErlangTuple [bin1_2, rest_3]) ->
        let    int_6 = (BIF.binary__decode_unsigned__1 [bin1_2])
        in let reencode_8 = (erlps__rlp_encode_int__1 [int_6])
        in let
          lop_10 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.format_bin reencode_8 (BIN.packed_size reencode_8) 8),
                   (BIN.format_bin rest_3 (BIN.packed_size rest_3) 8)]))
        in let case_9 = (BIF.erlang__op_eq [lop_10, binary_0])
        in
          case case_9 of
            (ErlangAtom "true") -> (ErlangTuple [int_6, rest_3])
            (ErlangAtom "false") ->
              let
                arg_16 =
                  (ErlangTuple
                     [(ErlangAtom "none_unique_encoding"), bin1_2, reencode_8])
              in (BIF.erlang__error__1 [arg_16])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_4)
erlps__rlp_decode_int__1 [arg_20] = (EXC.function_clause unit)
erlps__rlp_decode_int__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__serialize_integer__1 :: ErlangFun
erlps__serialize_integer__1 [i_0] | (isEInt i_0) =
  let    abs_3 = (BIF.erlang__abs__1 [i_0])
  in let
    case_4 =
      (BIF.erlang__op_lesser [i_0, (ErlangInt (DBI.fromInt 0))])
  in let
    sign_7 =
      case case_4 of
        (ErlangAtom "true") -> (ErlangInt (DBI.fromInt 1))
        (ErlangAtom "false") -> (ErlangInt (DBI.fromInt 0))
        something_else -> (EXC.case_clause something_else)
  in
    case (ErlangAtom "true") of
      _ | (weakLt abs_3 (ErlangInt (DBI.fromInt 64))) ->
        let   
          lop_10 =
            (BIF.erlang__bsl__2 [sign_7, (ErlangInt (DBI.fromInt 7))])
        in let lop_9 = (BIF.erlang__op_plus [lop_10, abs_3])
        in let
          lop_8 = (BIF.erlang__bsl__2 [lop_9, (ErlangInt (DBI.fromInt 1))])
        in let
          bin_16 =
            (BIF.erlang__op_plus [lop_8, (ErlangInt (DBI.fromInt 0))])
        in
          (ErlangBinary
             (BIN.from_int bin_16 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      _ | ((==) sign_7 (ErlangInt (DBI.fromInt 1))) ->
        let   
          arg_20 =
            (BIF.erlang__op_minus [abs_3, (ErlangInt (DBI.fromInt 64))])
        in let bin_el_19 = (erlps__rlp_encode_int__1 [arg_20])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 239))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin bin_el_19 (BIN.packed_size bin_el_19) 8)]))
      _ | ((==) sign_7 (ErlangInt (DBI.fromInt 0))) ->
        let   
          arg_25 =
            (BIF.erlang__op_minus [abs_3, (ErlangInt (DBI.fromInt 64))])
        in let bin_el_24 = (erlps__rlp_encode_int__1 [arg_25])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 111))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin bin_el_24 (BIN.packed_size bin_el_24) 8)]))
      _ -> (EXC.if_clause unit)
erlps__serialize_integer__1 [arg_28] = (EXC.function_clause unit)
erlps__serialize_integer__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__serialize_bits__1 :: ErlangFun
erlps__serialize_bits__1 [b_0] | (isEInt b_0) =
  let abs_2 = (BIF.erlang__abs__1 [b_0])
  in
    case (ErlangAtom "true") of
      _ | (weakLt b_0 (ErlangInt (DBI.fromInt 0))) ->
        let bin_el_4 = (erlps__rlp_encode_int__1 [abs_2])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 207))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin bin_el_4 (BIN.packed_size bin_el_4) 8)]))
      _ | (weakGeq b_0 (ErlangInt (DBI.fromInt 0))) ->
        let bin_el_7 = (erlps__rlp_encode_int__1 [abs_2])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 79))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.format_bin bin_el_7 (BIN.packed_size bin_el_7) 8)]))
      _ -> (EXC.if_clause unit)
erlps__serialize_bits__1 [arg_9] = (EXC.function_clause unit)
erlps__serialize_bits__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize__1 :: ErlangFun
erlps__deserialize__1 [b_0] =
  let match_expr_4 = (erlps__deserialize2__1 [b_0])
  in
    case match_expr_4 of
      (ErlangTuple [t_2, (ErlangBinary bin_e_3)]) | (BIN.empty
                                                       bin_e_3) ->
        t_2
      _ -> (EXC.badmatch match_expr_4)
erlps__deserialize__1 [arg_5] = (EXC.function_clause unit)
erlps__deserialize__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize_one__1 :: ErlangFun
erlps__deserialize_one__1 [b_0] = (erlps__deserialize2__1 [b_0])
erlps__deserialize_one__1 [arg_2] = (EXC.function_clause unit)
erlps__deserialize_one__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize2__1 :: ErlangFun
erlps__deserialize2__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok bin_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_15 =
                 (BIF.erlang__band__2 [bin_3, (ErlangInt (DBI.fromInt 1))])
             in let
               lop_14 =
                 (BIF.erlang__op_exactEq [lop_15, (ErlangInt (DBI.fromInt 0))])
             in
               case lop_14 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_20 =
                       (BIF.erlang__band__2
                          [bin_3, (ErlangInt (DBI.fromInt 128))])
                   in let
                     lop_19 =
                       (BIF.erlang__bsr__2
                          [lop_20, (ErlangInt (DBI.fromInt 7))])
                   in
                     (BIF.erlang__op_exactEq
                        [lop_19, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_14)))) =
  let   
    lop_7 =
      (BIF.erlang__band__2 [bin_3, (ErlangInt (DBI.fromInt 126))])
  in let
    i_11 = (BIF.erlang__bsr__2 [lop_7, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [i_11, rest_6])
erlps__deserialize2__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok bin_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_19 =
                 (BIF.erlang__band__2 [bin_3, (ErlangInt (DBI.fromInt 1))])
             in let
               lop_18 =
                 (BIF.erlang__op_exactEq [lop_19, (ErlangInt (DBI.fromInt 0))])
             in
               case lop_18 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_24 =
                       (BIF.erlang__band__2
                          [bin_3, (ErlangInt (DBI.fromInt 128))])
                   in let
                     lop_23 =
                       (BIF.erlang__bsr__2
                          [lop_24, (ErlangInt (DBI.fromInt 7))])
                   in
                     (BIF.erlang__op_exactEq
                        [lop_23, (ErlangInt (DBI.fromInt 1))])
                 _ -> (EXC.badarg1 lop_18)))) =
  let   
    lop_7 = (BIF.erlang__bsl__2 [bin_3, (ErlangInt (DBI.fromInt 1))])
  in let
    i_11 = (BIF.erlang__bsr__2 [lop_7, (ErlangInt (DBI.fromInt 2))])
  in
    case (ErlangAtom "true") of
      _ | ((/=) i_11 (ErlangInt (DBI.fromInt 0))) ->
        let tup_el_12 = (BIF.erlang__op_neg [i_11])
        in (ErlangTuple [tup_el_12, rest_6])
      _ | (weakEq i_11 (ErlangInt (DBI.fromInt 0))) ->
        let arg_15 = (ErlangTuple [(ErlangAtom "illegal_sign"), i_11])
        in (BIF.erlang__error__1 [arg_15])
      _ -> (EXC.if_clause unit)
erlps__deserialize2__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 239)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [bint_8, rest2_9]) ->
        let    lop_12 = (BIF.erlang__op_neg [bint_8])
        in let
          tup_el_11 =
            (BIF.erlang__op_minus [lop_12, (ErlangInt (DBI.fromInt 64))])
        in (ErlangTuple [tup_el_11, rest2_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [bint_8, rest2_9]) ->
        let
          tup_el_11 =
            (BIF.erlang__op_plus [bint_8, (ErlangInt (DBI.fromInt 64))])
        in (ErlangTuple [tup_el_11, rest2_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 207)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let case_7 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case case_7 of
      (ErlangTuple [pos_9, rest2_10]) | (weakGt pos_9
                                           (ErlangInt (DBI.fromInt 0))) ->
        let    tup_el_13 = (BIF.erlang__op_neg [pos_9])
        in let tup_el_11 = (ErlangTuple [(ErlangAtom "bits"), tup_el_13])
        in (ErlangTuple [tup_el_11, rest2_10])
      (ErlangTuple [n_16, _]) ->
        let
          arg_17 =
            (ErlangTuple
               [(ErlangAtom "illegal_parameter"), (ErlangAtom "neg_bits"),
                n_16])
        in (BIF.erlang__error__1 [arg_17])
      something_else -> (EXC.case_clause something_else)
erlps__deserialize2__1 args = (erlps__deserialize2__1__p1 args)

erlps__deserialize2__1__p1 :: ErlangFun
erlps__deserialize2__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 79)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [bint_8, rest2_9]) ->
        let tup_el_11 = (ErlangTuple [(ErlangAtom "bits"), bint_8])
        in (ErlangTuple [tup_el_11, rest2_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 1)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__deserialize_one__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [s_8, rest2_9]) ->
        let    lop_11 = (BIF.erlang__is_integer__1 [s_8])
        in let
          match_expr_15 =
            case lop_11 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                (BIF.erlang__op_greaterEq [s_8, (ErlangInt (DBI.fromInt 0))])
              _ -> (EXC.badarg1 lop_11)
        in
          case match_expr_15 of
            (ErlangAtom "true") ->
              let   
                size_18 =
                  (BIF.erlang__op_plus [s_8, (ErlangInt (DBI.fromInt 64))])
              in let
                string_22 =
                  (BIF.do_remote_fun_call "Binary" "erlps__part__3"
                     [rest2_9, (ErlangInt (DBI.fromInt 0)), size_18])
              in let arg_24 = (BIF.erlang__byte_size__1 [rest2_9])
              in let lop_28 = (BIF.erlang__byte_size__1 [rest2_9])
              in let op_arg_27 = (BIF.erlang__op_minus [lop_28, size_18])
              in let arg_26 = (BIF.erlang__op_neg [op_arg_27])
              in let
                rest3_31 =
                  (BIF.do_remote_fun_call "Binary" "erlps__part__3"
                     [rest2_9, arg_24, arg_26])
              in (ErlangTuple [string_22, rest3_31])
            _ -> (EXC.badmatch match_expr_15)
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok bin_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_25 =
                 (BIF.erlang__band__2 [bin_3, (ErlangInt (DBI.fromInt 3))])
             in
               (BIF.erlang__op_exactEq
                  [lop_25, (ErlangInt (DBI.fromInt 1))])))) =
  let   
    s_9 = (BIF.erlang__bsr__2 [bin_3, (ErlangInt (DBI.fromInt 2))])
  in let
    string_13 =
      (BIF.do_remote_fun_call "Binary" "erlps__part__3"
         [rest_6, (ErlangInt (DBI.fromInt 0)), s_9])
  in let arg_15 = (BIF.erlang__byte_size__1 [rest_6])
  in let lop_19 = (BIF.erlang__byte_size__1 [rest_6])
  in let op_arg_18 = (BIF.erlang__op_minus [lop_19, s_9])
  in let arg_17 = (BIF.erlang__op_neg [op_arg_18])
  in let
    rest2_22 =
      (BIF.do_remote_fun_call "Binary" "erlps__part__3"
         [rest_6, arg_15, arg_17])
  in (ErlangTuple [string_13, rest2_22])
erlps__deserialize2__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 159)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 1)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let match_expr_13 = (erlps__deserialize_one__1 [rest_9])
  in
    case match_expr_13 of
      (ErlangTuple [string_11, rest2_12]) ->
        let match_expr_15 = (BIF.erlang__is_binary__1 [string_11])
        in
          case match_expr_15 of
            (ErlangAtom "true") ->
              let tup_el_16 = (ErlangTuple [(ErlangAtom "bytes"), string_11])
              in (ErlangTuple [tup_el_16, rest2_12])
            _ -> (EXC.badmatch match_expr_15)
      _ -> (EXC.badmatch match_expr_13)
erlps__deserialize2__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 159)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok objecttype_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let
    match_expr_13 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode_one__1"
         [rest_9])
  in
    case match_expr_13 of
      (ErlangTuple [a_11, rest2_12]) ->
        let
          val_30 =
            case objecttype_6 of
              (ErlangInt num_15) | ((ErlangInt num_15) ==
                                      (ErlangInt (DBI.fromInt 0))) ->
                (ErlangTuple [(ErlangAtom "address"), a_11])
              (ErlangInt num_18) | ((ErlangInt num_18) ==
                                      (ErlangInt (DBI.fromInt 2))) ->
                (ErlangTuple [(ErlangAtom "contract"), a_11])
              (ErlangInt num_21) | ((ErlangInt num_21) ==
                                      (ErlangInt (DBI.fromInt 3))) ->
                (ErlangTuple [(ErlangAtom "oracle"), a_11])
              (ErlangInt num_24) | ((ErlangInt num_24) ==
                                      (ErlangInt (DBI.fromInt 4))) ->
                (ErlangTuple [(ErlangAtom "oracle_query"), a_11])
              (ErlangInt num_27) | ((ErlangInt num_27) ==
                                      (ErlangInt (DBI.fromInt 5))) ->
                (ErlangTuple [(ErlangAtom "channel"), a_11])
              something_else -> (EXC.case_clause something_else)
        in (ErlangTuple [val_30, rest2_12])
      _ -> (EXC.badmatch match_expr_13)
erlps__deserialize2__1__p1 args =
  (erlps__deserialize2__1__p2 args)

erlps__deserialize2__1__p2 :: ErlangFun
erlps__deserialize2__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 255)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "true"), rest_6])
erlps__deserialize2__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 127)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (ErlangTuple [(ErlangAtom "false"), rest_6])
erlps__deserialize2__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 63)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let    tup_el_9 = (ErlangTuple [])
  in let tup_el_7 = (ErlangTuple [(ErlangAtom "tuple"), tup_el_9])
  in (ErlangTuple [tup_el_7, rest_6])
erlps__deserialize2__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 95)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let tup_el_7 = (ErlangBinary (BIN.concat []))
  in (ErlangTuple [tup_el_7, rest_6])
erlps__deserialize2__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 11)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [size_8, rest1_9]) ->
        let   
          n_13 =
            (BIF.erlang__op_plus [size_8, (ErlangInt (DBI.fromInt 16))])
        in let
          match_expr_18 = (erlps__deserialize_elements__2 [n_13, rest1_9])
        in
          case match_expr_18 of
            (ErlangTuple [list_16, rest2_17]) ->
              let    tup_el_21 = (BIF.erlang__list_to_tuple__1 [list_16])
              in let
                tup_el_19 = (ErlangTuple [(ErlangAtom "tuple"), tup_el_21])
              in (ErlangTuple [tup_el_19, rest2_17])
            _ -> (EXC.badmatch match_expr_18)
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p2 args =
  (erlps__deserialize2__1__p3 args)

erlps__deserialize2__1__p3 :: ErlangFun
erlps__deserialize2__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok bin_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_20 =
                 (BIF.erlang__band__2 [bin_3, (ErlangInt (DBI.fromInt 15))])
             in
               (BIF.erlang__op_exactEq
                  [lop_20, (ErlangInt (DBI.fromInt 11))])))) =
  let   
    s_9 = (BIF.erlang__bsr__2 [bin_3, (ErlangInt (DBI.fromInt 4))])
  in let
    match_expr_14 = (erlps__deserialize_elements__2 [s_9, rest_6])
  in
    case match_expr_14 of
      (ErlangTuple [list_12, rest1_13]) ->
        let    tup_el_17 = (BIF.erlang__list_to_tuple__1 [list_12])
        in let
          tup_el_15 = (ErlangTuple [(ErlangAtom "tuple"), tup_el_17])
        in (ErlangTuple [tup_el_15, rest1_13])
      _ -> (EXC.badmatch match_expr_14)
erlps__deserialize2__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 31)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [size_8, rest1_9]) ->
        let   
          length_13 =
            (BIF.erlang__op_plus [size_8, (ErlangInt (DBI.fromInt 16))])
        in let
          match_expr_18 =
            (erlps__deserialize_elements__2 [length_13, rest1_9])
        in
          case match_expr_18 of
            (ErlangTuple [list_16, rest2_17]) ->
              (ErlangTuple [list_16, rest2_17])
            _ -> (EXC.badmatch match_expr_18)
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok bin_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_17 =
                 (BIF.erlang__band__2 [bin_3, (ErlangInt (DBI.fromInt 15))])
             in
               (BIF.erlang__op_exactEq
                  [lop_17, (ErlangInt (DBI.fromInt 3))])))) =
  let   
    s_9 = (BIF.erlang__bsr__2 [bin_3, (ErlangInt (DBI.fromInt 4))])
  in let
    match_expr_14 = (erlps__deserialize_elements__2 [s_9, rest_6])
  in
    case match_expr_14 of
      (ErlangTuple [list_12, rest1_13]) ->
        (ErlangTuple [list_12, rest1_13])
      _ -> (EXC.badmatch match_expr_14)
erlps__deserialize2__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [size_8, rest1_9]) ->
        let   
          arg_11 =
            (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 2)), size_8])
        in let
          match_expr_17 =
            (erlps__deserialize_elements__2 [arg_11, rest1_9])
        in
          case match_expr_17 of
            (ErlangTuple [list_15, rest2_16]) ->
              let    kvlist_19 = (erlps__insert_kv__1 [list_15])
              in let lop_21 = (erlps__sort_and_check__1 [kvlist_19])
              in let case_20 = (BIF.erlang__op_eq [lop_21, kvlist_19])
              in
                case case_20 of
                  (ErlangAtom "true") ->
                    let map_25 = (BIF.maps__from_list__1 [kvlist_19])
                    in (ErlangTuple [map_25, rest2_16])
                  (ErlangAtom "false") ->
                    let
                      arg_28 =
                        (ErlangTuple
                           [(ErlangAtom "unknown_map_serialization_format"),
                            kvlist_19])
                    in (BIF.erlang__error__1 [arg_28])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 191)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let match_expr_10 = (erlps__rlp_decode_int__1 [rest_6])
  in
    case match_expr_10 of
      (ErlangTuple [id_8, rest1_9]) ->
        let    tup_el_13 = (ErlangMap Map.empty)
        in let
          tup_el_11 =
            (ErlangTuple [(ErlangAtom "store_map"), tup_el_13, id_8])
        in (ErlangTuple [tup_el_11, rest1_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p3 args =
  (erlps__deserialize2__1__p4 args)

erlps__deserialize2__1__p4 :: ErlangFun
erlps__deserialize2__1__p4 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 175)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    match_expr_16 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode_one__1"
         [rest_6])
  in
    case match_expr_16 of
      (ErlangTuple [aritiesbin_8, (ErlangBinary bin_c_9)]) | size_10 <-
                                                               ((DBI.fromInt 8))
                                                           , (BIN.Ok tag_12 bin_11) <-
                                                               ((BIN.chop_int
                                                                   bin_c_9
                                                                   size_10 1
                                                                   BIN.Big
                                                                   BIN.Unsigned))
                                                           , (ErlangInt size_13) <-
                                                               ((BIN.size
                                                                   bin_11))
                                                           , (BIN.Ok rest2_15 bin_14) <-
                                                               ((BIN.chop_bin
                                                                   bin_11
                                                                   size_13 8))
                                                           , (BIN.empty
                                                                bin_14) ->
        let   
          arities_18 = (BIF.erlang__binary_to_list__1 [aritiesbin_8])
        in let size_20 = (BIF.erlang__length__1 [arities_18])
        in
          case (ErlangAtom "true") of
            _ | (weakGt tag_12 size_20) ->
              let
                arg_21 =
                  (ErlangTuple
                     [(ErlangAtom "too_large_tag_in_variant"), tag_12, size_20])
              in (BIF.erlang__exit__1 [arg_21])
            _ ->
              let match_expr_28 = (erlps__deserialize2__1 [rest2_15])
              in
                case match_expr_28 of
                  (ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"), t_26]),
                                rest3_27]) ->
                    let   
                      arg_29 =
                        (BIF.erlang__op_plus
                           [tag_12, (ErlangInt (DBI.fromInt 1))])
                    in let
                      arity_33 =
                        (BIF.do_remote_fun_call "Lists" "erlps__nth__2"
                           [arg_29, arities_18])
                    in let numelements_35 = (BIF.erlang__size__1 [t_26])
                    in
                      case (ErlangAtom "true") of
                        _ | ((/=) numelements_35 arity_33) ->
                          let
                            arg_36 =
                              (ErlangTuple
                                 [(ErlangAtom
                                     "tag_does_not_match_type_in_variant"),
                                  tag_12, arity_33])
                          in (BIF.erlang__exit__1 [arg_36])
                        _ ->
                          let
                            tup_el_40 =
                              (ErlangTuple
                                 [(ErlangAtom "variant"), arities_18, tag_12,
                                  t_26])
                          in (ErlangTuple [tup_el_40, rest3_27])
                        _ -> (EXC.if_clause unit)
                  _ -> (EXC.badmatch match_expr_28)
            _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch match_expr_16)
erlps__deserialize2__1__p4 [bin_6@(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok typetag_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok _ bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_15 =
                 (BIF.erlang__op_exactEq
                    [typetag_3, (ErlangInt (DBI.fromInt 7))])
             in
               case lop_15 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let
                     lop_18 =
                       (BIF.erlang__op_exactEq
                          [typetag_3, (ErlangInt (DBI.fromInt 23))])
                   in
                     case lop_18 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_21 =
                             (BIF.erlang__op_exactEq
                                [typetag_3, (ErlangInt (DBI.fromInt 247))])
                         in
                           case lop_21 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_24 =
                                   (BIF.erlang__op_exactEq
                                      [typetag_3,
                                       (ErlangInt (DBI.fromInt 231))])
                               in
                                 case lop_24 of
                                   (ErlangAtom "true") -> (ErlangAtom "true")
                                   (ErlangAtom "false") ->
                                     let
                                       lop_27 =
                                         (BIF.erlang__op_exactEq
                                            [typetag_3,
                                             (ErlangInt (DBI.fromInt 39))])
                                     in
                                       case lop_27 of
                                         (ErlangAtom "true") ->
                                           (ErlangAtom "true")
                                         (ErlangAtom "false") ->
                                           let
                                             lop_30 =
                                               (BIF.erlang__op_exactEq
                                                  [typetag_3,
                                                   (ErlangInt
                                                      (DBI.fromInt 55))])
                                           in
                                             case lop_30 of
                                               (ErlangAtom "true") ->
                                                 (ErlangAtom "true")
                                               (ErlangAtom "false") ->
                                                 let
                                                   lop_33 =
                                                     (BIF.erlang__op_exactEq
                                                        [typetag_3,
                                                         (ErlangInt
                                                            (DBI.fromInt 71))])
                                                 in
                                                   case lop_33 of
                                                     (ErlangAtom "true") ->
                                                       (ErlangAtom "true")
                                                     (ErlangAtom "false") ->
                                                       let
                                                         lop_36 =
                                                           (BIF.erlang__op_exactEq
                                                              [typetag_3,
                                                               (ErlangInt
                                                                  (DBI.fromInt
                                                                     87))])
                                                       in
                                                         case lop_36 of
                                                           (ErlangAtom "true") ->
                                                             (ErlangAtom "true")
                                                           (ErlangAtom "false") ->
                                                             let
                                                               lop_39 =
                                                                 (BIF.erlang__op_exactEq
                                                                    [typetag_3,
                                                                     (ErlangInt
                                                                        (DBI.fromInt
                                                                           151))])
                                                             in
                                                               case lop_39 of
                                                                 (ErlangAtom "true") ->
                                                                   (ErlangAtom
                                                                      "true")
                                                                 (ErlangAtom "false") ->
                                                                   let
                                                                     lop_42 =
                                                                       (BIF.erlang__op_exactEq
                                                                          [typetag_3,
                                                                           (ErlangInt
                                                                              (DBI.fromInt
                                                                                 103))])
                                                                   in
                                                                     case lop_42 of
                                                                       (ErlangAtom "true") ->
                                                                         (ErlangAtom
                                                                            "true")
                                                                       (ErlangAtom "false") ->
                                                                         let
                                                                           lop_45 =
                                                                             (BIF.erlang__op_exactEq
                                                                                [typetag_3,
                                                                                 (ErlangInt
                                                                                    (DBI.fromInt
                                                                                       119))])
                                                                         in
                                                                           case lop_45 of
                                                                             (ErlangAtom "true") ->
                                                                               (ErlangAtom
                                                                                  "true")
                                                                             (ErlangAtom "false") ->
                                                                               (BIF.erlang__op_exactEq
                                                                                  [typetag_3,
                                                                                   (ErlangInt
                                                                                      (DBI.fromInt
                                                                                         135))])
                                                                             _ ->
                                                                               (EXC.badarg1
                                                                                  lop_45)
                                                                       _ ->
                                                                         (EXC.badarg1
                                                                            lop_42)
                                                                 _ ->
                                                                   (EXC.badarg1
                                                                      lop_39)
                                                           _ ->
                                                             (EXC.badarg1
                                                                lop_36)
                                                     _ -> (EXC.badarg1 lop_33)
                                               _ -> (EXC.badarg1 lop_30)
                                         _ -> (EXC.badarg1 lop_27)
                                   _ -> (EXC.badarg1 lop_24)
                             _ -> (EXC.badarg1 lop_21)
                       _ -> (EXC.badarg1 lop_18)
                 _ -> (EXC.badarg1 lop_15)))) =
  let match_expr_10 = (erlps__deserialize_type__1 [bin_6])
  in
    case match_expr_10 of
      (ErlangTuple [type_8, rest_9]) ->
        let tup_el_11 = (ErlangTuple [(ErlangAtom "typerep"), type_8])
        in (ErlangTuple [tup_el_11, rest_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__deserialize2__1__p4 [arg_50] = (EXC.function_clause unit)
erlps__deserialize2__1__p4 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_kv__1 :: ErlangFun
erlps__insert_kv__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__insert_kv__1 [(ErlangCons k_0 (ErlangCons v_1 r_2))] =
  let    head_3 = (ErlangTuple [k_0, v_1])
  in let tail_6 = (erlps__insert_kv__1 [r_2])
  in (ErlangCons head_3 tail_6)
erlps__insert_kv__1 [arg_8] = (EXC.function_clause unit)
erlps__insert_kv__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize_elements__2 :: ErlangFun
erlps__deserialize_elements__2 [(ErlangInt num_0), rest_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangTuple [ErlangEmptyList, rest_1])
erlps__deserialize_elements__2 [n_0, es_1] =
  let match_expr_5 = (erlps__deserialize2__1 [es_1])
  in
    case match_expr_5 of
      (ErlangTuple [e_3, rest_4]) ->
        let   
          arg_6 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
        in let
          match_expr_12 = (erlps__deserialize_elements__2 [arg_6, rest_4])
        in
          case match_expr_12 of
            (ErlangTuple [tail_10, rest2_11]) ->
              (ErlangTuple [(ErlangCons e_3 tail_10), rest2_11])
            _ -> (EXC.badmatch match_expr_12)
      _ -> (EXC.badmatch match_expr_5)
erlps__deserialize_elements__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__deserialize_elements__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sort_and_check__1 :: ErlangFun
erlps__sort_and_check__1 [list_0] =
  let   
    arg_1 =
      (ErlangFun 2
         let
           lambda_2 [(ErlangTuple [k_5, v_6]), acc_7] =
             let    lop_9 = (erlps__valid_key_type__1 [k_5])
             in let
               case_8 =
                 case lop_9 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       op_arg_11 =
                         (BIF.lists__keymember__3
                            [k_5, (ErlangInt (DBI.fromInt 1)), acc_7])
                     in (BIF.erlang__not__1 [op_arg_11])
                   _ -> (EXC.badarg1 lop_9)
             in
               case case_8 of
                 (ErlangAtom "true") ->
                   let head_15 = (ErlangTuple [k_5, v_6])
                   in (ErlangCons head_15 acc_7)
                 (ErlangAtom "false") -> acc_7
                 something_else -> (EXC.case_clause something_else)
           lambda_2 [arg_3, arg_4] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 2 lambda_2) args)
         in lambda_2)
  in let
    uniqkeylist_21 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
         [arg_1, ErlangEmptyList, list_0])
  in (erlps__sort__1 [uniqkeylist_21])
erlps__sort_and_check__1 [arg_23] = (EXC.function_clause unit)
erlps__sort_and_check__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sort__1 :: ErlangFun
erlps__sort__1 [kvlist_0] =
  let
    sortfun_8 =
      (ErlangFun 2
         let
           lambda_1 [(ErlangTuple [k1_4, _]), (ErlangTuple [k2_5, _])] =
             (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__elt__2"
                [k1_4, k2_5])
           lambda_1 [arg_2, arg_3] = (EXC.function_clause unit)
           lambda_1 args = (EXC.badarity (ErlangFun 2 lambda_1) args)
         in lambda_1)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__sort__2"
       [sortfun_8, kvlist_0])
erlps__sort__1 [arg_11] = (EXC.function_clause unit)
erlps__sort__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__valid_key_type__1 :: ErlangFun
erlps__valid_key_type__1 [k_0] | (isEMap k_0) =
  let arg_1 = (ErlangTuple [(ErlangAtom "map_as_key_in_map"), k_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__valid_key_type__1 [k_0@(ErlangTuple [(ErlangAtom "store_map"),
                                            _, _])]
  =
  let arg_1 = (ErlangTuple [(ErlangAtom "map_as_key_in_map"), k_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__valid_key_type__1 [k_0] | (isEList k_0) =
  let
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [e_4] = (erlps__valid_key_type__1 [e_4])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in (BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_1, k_0])
erlps__valid_key_type__1 [k_0] | (isETuple k_0) =
  let   
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [e_4] = (erlps__valid_key_type__1 [e_4])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in let arg_6 = (BIF.erlang__tuple_to_list__1 [k_0])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_1, arg_6])
erlps__valid_key_type__1 [_k_0] = (ErlangAtom "true")
erlps__valid_key_type__1 [arg_1] = (EXC.function_clause unit)
erlps__valid_key_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)