module Aeb.Fate.Generate.Ops(erlps__gen_and_halt__1,
                             erlps__generate__0,
                             erlps__generate_documentation__1,
                             erlps__get_ops__0,
                             erlps__test_asm_generator__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__gen_and_halt__1 :: ErlangFun
erlps__gen_and_halt__1 [(ErlangCons srcdirarg_0 (ErlangCons includedirarg_1 (ErlangEmptyList)))]
  =
  let    arg_2 = BIF.erlang__atom_to_list__1 [srcdirarg_0]
  in let arg_4 = BIF.erlang__atom_to_list__1 [includedirarg_1]
  in let _ = erlps__generate__2 [arg_2, arg_4]
  in BIF.erlang__halt__0 []
erlps__gen_and_halt__1 [arg_6] = EXC.function_clause unit
erlps__gen_and_halt__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate__0 :: ErlangFun
erlps__generate__0 [] =
  let    arg_0 = toErl "src/"
  in let arg_1 = toErl "include/"
  in erlps__generate__2 [arg_0, arg_1]
erlps__generate__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__get_ops__0 :: ErlangFun
erlps__get_ops__0 [] =
  let arg_0 = erlps__ops_defs__0 []
  in erlps__gen__1 [arg_0]
erlps__get_ops__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate__2 :: ErlangFun
erlps__generate__2 [src_0, include_1] =
  let    arg_2 = erlps__ops_defs__0 []
  in let _ = erlps__check_defs__1 [arg_2]
  in let ops_3 = erlps__get_ops__0 []
  in let rop_5 = toErl "aeb_fate_opcodes.hrl"
  in let hrlfile_6 = BIF.erlang__op_append [include_1, rop_5]
  in let _ = erlps__generate_header_file__2 [hrlfile_6, ops_3]
  in let
    _ =
      erlps__generate_opcodes_ops__4
        [ErlangAtom "aeb_fate_opcodes", hrlfile_6, src_0, ops_3]
  in let
    _ =
      erlps__generate_code_ops__3
        [ErlangAtom "aeb_fate_ops", src_0, ops_3]
  in let arg_16 = toErl "aeb_fate_asm_scan.template"
  in let arg_17 = toErl "aeb_fate_asm_scan.xrl"
  in let
    _ = erlps__generate_scanner__4 [arg_16, arg_17, src_0, ops_3]
  in erlps__gen_asm_pp__3 [ErlangAtom "aeb_fate_pp", src_0, ops_3]
erlps__generate__2 [arg_23, arg_24] = EXC.function_clause unit
erlps__generate__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__check_defs__1 :: ErlangFun
erlps__check_defs__1 [list_0] =
  let    arg_2 = toErl 0
  in let arg_4 = toErl 2
  in let
    arg_3 =
      BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
        [arg_4, list_0]
  in let match_final_1_6 = erlps__check_numbering__2 [arg_2, arg_3]
  in
    case match_final_1_6 of
      (ErlangAtom "true") -> match_final_1_6
      _ -> EXC.badmatch match_final_1_6
erlps__check_defs__1 [arg_8] = EXC.function_clause unit
erlps__check_defs__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__check_numbering__2 :: ErlangFun
erlps__check_numbering__2 [n_0, (ErlangCons t_1 rest_2)] =
  let    arg_3 = toErl 2
  in let opcode_5 = BIF.erlang__element__2 [arg_3, t_1]
  in
    case opcode_5 of
      n_7 | n_7 == n_0 ->
        let    rop_10 = toErl 1
        in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
        in erlps__check_numbering__2 [arg_8, rest_2]
      (ErlangInt num_12) | (ErlangInt num_12) == (toErl 250) ->
        let    lop_14 = toErl 250
        in let rop_15 = toErl 1
        in let arg_13 = BIF.erlang__op_plus [lop_14, rop_15]
        in erlps__check_numbering__2 [arg_13, rest_2]
      _ | weakLt opcode_5 n_0 ->
        ErlangTuple [ErlangAtom "duplicate_opcode", opcode_5]
      _ | weakGt opcode_5 n_0 ->
        ErlangTuple [ErlangAtom "missing_opcode", n_0]
      something_else -> EXC.case_clause something_else
erlps__check_numbering__2 [_, (ErlangEmptyList)] =
  ErlangAtom "true"
erlps__check_numbering__2 [arg_0, arg_1] =
  EXC.function_clause unit
erlps__check_numbering__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__ops_defs__0 :: ErlangFun
erlps__ops_defs__0 [] =
  let    tup_el_2 = toErl 0
  in let tup_el_6 = toErl 10
  in let tup_el_9 = ErlangTuple []
  in let
    tup_el_11 =
      toErl
        "Return from function call, top of stack is return value . The type of the retun value has to match the return type of the function."
  in let
    head_0 =
      ErlangTuple
        [ErlangAtom "RETURN", tup_el_2, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_6, ErlangEmptyList,
         ErlangAtom "return", tup_el_9, ErlangAtom "any", tup_el_11]
  in let tup_el_15 = toErl 1
  in let tup_el_19 = toErl 10
  in let tup_el_24 = ErlangTuple [ErlangAtom "any"]
  in let
    tup_el_27 =
      toErl
        "Push Arg0 and return from function. The type of the retun value has to match the return type of the function."
  in let
    head_13 =
      ErlangTuple
        [ErlangAtom "RETURNR", tup_el_15, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_19,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "returnr", tup_el_24, ErlangAtom "any", tup_el_27]
  in let tup_el_31 = toErl 2
  in let tup_el_35 = toErl 10
  in let tup_el_40 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_43 =
      toErl
        "Call the function Arg0 with args on stack. The types of the arguments has to match the argument typs of the function."
  in let
    head_29 =
      ErlangTuple
        [ErlangAtom "CALL", tup_el_31, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_35,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "call",
         tup_el_40, ErlangAtom "any", tup_el_43]
  in let tup_el_47 = toErl 3
  in let tup_el_51 = toErl 100
  in let
    tup_el_64 =
      ErlangTuple
        [ErlangAtom "contract", ErlangAtom "string",
         ErlangAtom "typerep", ErlangAtom "typerep", ErlangAtom "integer"]
  in let
    tup_el_71 =
      toErl
        "Remote call to contract Arg0 and function Arg1 of type Arg2 => Arg3 with value Arg4. The types of the arguments has to match the argument types of the function."
  in let
    head_45 =
      ErlangTuple
        [ErlangAtom "CALL_R", tup_el_47, ErlangAtom "true",
         ErlangAtom "false", ErlangAtom "true", tup_el_51,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "is")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
         ErlangAtom "call_r", tup_el_64, ErlangAtom "any", tup_el_71]
  in let tup_el_75 = toErl 4
  in let tup_el_79 = toErl 10
  in let tup_el_84 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_87 =
      toErl
        "Tail call to function Arg0. The types of the arguments has to match the argument typs of the function. And the return type of the called function has to match the type of the current function."
  in let
    head_73 =
      ErlangTuple
        [ErlangAtom "CALL_T", tup_el_75, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_79,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "call_t",
         tup_el_84, ErlangAtom "any", tup_el_87]
  in let tup_el_91 = toErl 5
  in let tup_el_95 = toErl 100
  in let
    tup_el_110 =
      ErlangTuple
        [ErlangAtom "contract", ErlangAtom "string",
         ErlangAtom "typerep", ErlangAtom "typerep", ErlangAtom "integer",
         ErlangAtom "integer"]
  in let
    tup_el_118 =
      toErl "Remote call with gas cap in Arg4. Otherwise as CALL_R."
  in let
    head_89 =
      ErlangTuple
        [ErlangAtom "CALL_GR", tup_el_91, ErlangAtom "true",
         ErlangAtom "false", ErlangAtom "true", tup_el_95,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "is")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a")
                       (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
         ErlangAtom "call_gr", tup_el_110, ErlangAtom "any", tup_el_118]
  in let tup_el_122 = toErl 6
  in let tup_el_126 = toErl 10
  in let tup_el_131 = ErlangTuple [ErlangAtom "integer"]
  in let
    tup_el_134 =
      toErl
        "Jump to a basic block. The basic block has to exist in the current function."
  in let
    head_120 =
      ErlangTuple
        [ErlangAtom "JUMP", tup_el_122, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_126,
         ErlangCons (ErlangAtom "ii") ErlangEmptyList, ErlangAtom "jump",
         tup_el_131, ErlangAtom "none", tup_el_134]
  in let tup_el_138 = toErl 7
  in let tup_el_142 = toErl 10
  in let
    tup_el_149 =
      ErlangTuple [ErlangAtom "boolean", ErlangAtom "integer"]
  in let
    tup_el_153 =
      toErl
        "Conditional jump to a basic block. If Arg0 then jump to Arg1."
  in let
    head_136 =
      ErlangTuple
        [ErlangAtom "JUMPIF", tup_el_138, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_142,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "ii") ErlangEmptyList),
         ErlangAtom "jumpif", tup_el_149, ErlangAtom "none", tup_el_153]
  in let tup_el_157 = toErl 8
  in let tup_el_161 = toErl 10
  in let
    tup_el_170 =
      ErlangTuple
        [ErlangAtom "variant", ErlangAtom "integer",
         ErlangAtom "ingeger"]
  in let
    tup_el_175 =
      toErl "Conditional jump to a basic block on variant tag."
  in let
    head_155 =
      ErlangTuple
        [ErlangAtom "SWITCH_V2", tup_el_157, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_161,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "ii")
              (ErlangCons (ErlangAtom "ii") ErlangEmptyList)),
         ErlangAtom "switch", tup_el_170, ErlangAtom "none", tup_el_175]
  in let tup_el_179 = toErl 9
  in let tup_el_183 = toErl 10
  in let
    tup_el_194 =
      ErlangTuple
        [ErlangAtom "variant", ErlangAtom "integer",
         ErlangAtom "integer", ErlangAtom "ingeger"]
  in let
    tup_el_200 =
      toErl "Conditional jump to a basic block on variant tag."
  in let
    head_177 =
      ErlangTuple
        [ErlangAtom "SWITCH_V3", tup_el_179, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_183,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "ii")
              (ErlangCons (ErlangAtom "ii")
                 (ErlangCons (ErlangAtom "ii") ErlangEmptyList))),
         ErlangAtom "switch", tup_el_194, ErlangAtom "none", tup_el_200]
  in let tup_el_204 = toErl 10
  in let tup_el_208 = toErl 10
  in let
    tup_el_217 =
      ErlangTuple [ErlangAtom "list", ErlangAtom "integer"]
  in let
    tup_el_215 = ErlangTuple [ErlangAtom "variant", tup_el_217]
  in let
    tup_el_221 =
      toErl "Conditional jump to a basic block on variant tag."
  in let
    head_202 =
      ErlangTuple
        [ErlangAtom "SWITCH_VN", tup_el_204, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_208,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "li") ErlangEmptyList),
         ErlangAtom "switch", tup_el_215, ErlangAtom "none", tup_el_221]
  in let tup_el_225 = toErl 11
  in let tup_el_229 = toErl 10
  in let tup_el_234 = ErlangTuple []
  in let
    tup_el_236 = toErl "The value sent in the current remote call."
  in let
    head_223 =
      ErlangTuple
        [ErlangAtom "CALL_VALUE", tup_el_225, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_229,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "call_value", tup_el_234, ErlangAtom "integer",
         tup_el_236]
  in let tup_el_240 = toErl 12
  in let tup_el_244 = toErl 10
  in let tup_el_249 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_252 = toErl "Push argument to stack."
  in let
    head_238 =
      ErlangTuple
        [ErlangAtom "PUSH", tup_el_240, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_244,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "push",
         tup_el_249, ErlangAtom "any", tup_el_252]
  in let tup_el_256 = toErl 13
  in let tup_el_260 = toErl 10
  in let tup_el_263 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_266 = toErl "Duplicate top of stack."
  in let
    head_254 =
      ErlangTuple
        [ErlangAtom "DUPA", tup_el_256, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_260,
         ErlangEmptyList, ErlangAtom "dup", tup_el_263, ErlangAtom "any",
         tup_el_266]
  in let tup_el_270 = toErl 14
  in let tup_el_274 = toErl 10
  in let tup_el_279 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_282 = toErl "push Arg0 stack pos on top of stack."
  in let
    head_268 =
      ErlangTuple
        [ErlangAtom "DUP", tup_el_270, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_274,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "dup",
         tup_el_279, ErlangAtom "any", tup_el_282]
  in let tup_el_286 = toErl 15
  in let tup_el_290 = toErl 10
  in let tup_el_295 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_298 = toErl "Arg0 := top of stack."
  in let
    head_284 =
      ErlangTuple
        [ErlangAtom "POP", tup_el_286, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_290,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "pop",
         tup_el_295, ErlangAtom "integer", tup_el_298]
  in let tup_el_302 = toErl 16
  in let tup_el_306 = toErl 10
  in let tup_el_309 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_312 = toErl "Increment accumulator."
  in let
    head_300 =
      ErlangTuple
        [ErlangAtom "INCA", tup_el_302, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_306,
         ErlangEmptyList, ErlangAtom "inc", tup_el_309,
         ErlangAtom "integer", tup_el_312]
  in let tup_el_316 = toErl 17
  in let tup_el_320 = toErl 10
  in let tup_el_325 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_328 = toErl "Increment argument."
  in let
    head_314 =
      ErlangTuple
        [ErlangAtom "INC", tup_el_316, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_320,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "inc",
         tup_el_325, ErlangAtom "integer", tup_el_328]
  in let tup_el_332 = toErl 18
  in let tup_el_336 = toErl 10
  in let tup_el_339 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_342 = toErl "Decrement accumulator."
  in let
    head_330 =
      ErlangTuple
        [ErlangAtom "DECA", tup_el_332, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_336,
         ErlangEmptyList, ErlangAtom "dec", tup_el_339,
         ErlangAtom "integer", tup_el_342]
  in let tup_el_346 = toErl 19
  in let tup_el_350 = toErl 10
  in let tup_el_355 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_358 = toErl "Decrement argument."
  in let
    head_344 =
      ErlangTuple
        [ErlangAtom "DEC", tup_el_346, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_350,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "dec",
         tup_el_355, ErlangAtom "integer", tup_el_358]
  in let tup_el_362 = toErl 20
  in let tup_el_366 = toErl 10
  in let
    tup_el_375 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_379 = toErl "Arg0 := Arg1 + Arg2."
  in let
    head_360 =
      ErlangTuple
        [ErlangAtom "ADD", tup_el_362, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_366,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "add", tup_el_375, ErlangAtom "integer", tup_el_379]
  in let tup_el_383 = toErl 21
  in let tup_el_387 = toErl 10
  in let
    tup_el_396 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_400 = toErl "Arg0 := Arg1 - Arg2."
  in let
    head_381 =
      ErlangTuple
        [ErlangAtom "SUB", tup_el_383, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_387,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "sub", tup_el_396, ErlangAtom "integer", tup_el_400]
  in let tup_el_404 = toErl 22
  in let tup_el_408 = toErl 10
  in let
    tup_el_417 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_421 = toErl "Arg0 := Arg1 * Arg2."
  in let
    head_402 =
      ErlangTuple
        [ErlangAtom "MUL", tup_el_404, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_408,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "mul", tup_el_417, ErlangAtom "integer", tup_el_421]
  in let tup_el_425 = toErl 23
  in let tup_el_429 = toErl 10
  in let
    tup_el_438 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_442 = toErl "Arg0 := Arg1 / Arg2."
  in let
    head_423 =
      ErlangTuple
        [ErlangAtom "DIV", tup_el_425, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_429,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "divide", tup_el_438, ErlangAtom "integer",
         tup_el_442]
  in let tup_el_446 = toErl 24
  in let tup_el_450 = toErl 10
  in let
    tup_el_459 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_463 = toErl "Arg0 := Arg1 mod Arg2."
  in let
    head_444 =
      ErlangTuple
        [ErlangAtom "MOD", tup_el_446, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_450,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "modulo", tup_el_459, ErlangAtom "integer",
         tup_el_463]
  in let tup_el_467 = toErl 25
  in let tup_el_471 = toErl 10
  in let
    tup_el_480 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_484 = toErl "Arg0 := Arg1  ^ Arg2."
  in let
    head_465 =
      ErlangTuple
        [ErlangAtom "POW", tup_el_467, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_471,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "pow", tup_el_480, ErlangAtom "integer", tup_el_484]
  in let tup_el_488 = toErl 26
  in let tup_el_492 = toErl 10
  in let tup_el_499 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_502 = toErl "Arg0 := Arg1."
  in let
    head_486 =
      ErlangTuple
        [ErlangAtom "STORE", tup_el_488, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_492,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "store", tup_el_499, ErlangAtom "any", tup_el_502]
  in let tup_el_506 = toErl 27
  in let tup_el_510 = toErl 100
  in let tup_el_517 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_520 = toErl "Arg0 := sha3(Arg1)."
  in let
    head_504 =
      ErlangTuple
        [ErlangAtom "SHA3", tup_el_506, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_510,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "sha3", tup_el_517, ErlangAtom "hash", tup_el_520]
  in let tup_el_524 = toErl 28
  in let tup_el_528 = toErl 100
  in let tup_el_535 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_538 = toErl "Arg0 := sha256(Arg1)."
  in let
    head_522 =
      ErlangTuple
        [ErlangAtom "SHA256", tup_el_524, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_528,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "sha256", tup_el_535, ErlangAtom "hash", tup_el_538]
  in let tup_el_542 = toErl 29
  in let tup_el_546 = toErl 100
  in let tup_el_553 = ErlangTuple [ErlangAtom "any"]
  in let tup_el_556 = toErl "Arg0 := blake2b(Arg1)."
  in let
    head_540 =
      ErlangTuple
        [ErlangAtom "BLAKE2B", tup_el_542, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_546,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "blake2b", tup_el_553, ErlangAtom "hash", tup_el_556]
  in let tup_el_560 = toErl 30
  in let tup_el_564 = toErl 10
  in let
    tup_el_573 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_577 = toErl "Arg0 := Arg1  < Arg2."
  in let
    head_558 =
      ErlangTuple
        [ErlangAtom "LT", tup_el_560, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_564,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "lt", tup_el_573, ErlangAtom "boolean", tup_el_577]
  in let tup_el_581 = toErl 31
  in let tup_el_585 = toErl 10
  in let
    tup_el_594 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_598 = toErl "Arg0 := Arg1  > Arg2."
  in let
    head_579 =
      ErlangTuple
        [ErlangAtom "GT", tup_el_581, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_585,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "gt", tup_el_594, ErlangAtom "boolean", tup_el_598]
  in let tup_el_602 = toErl 32
  in let tup_el_606 = toErl 10
  in let
    tup_el_615 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_619 = toErl "Arg0 := Arg1  = Arg2."
  in let
    head_600 =
      ErlangTuple
        [ErlangAtom "EQ", tup_el_602, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_606,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "eq", tup_el_615, ErlangAtom "boolean", tup_el_619]
  in let tup_el_623 = toErl 33
  in let tup_el_627 = toErl 10
  in let
    tup_el_636 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_640 = toErl "Arg0 := Arg1 =< Arg2."
  in let
    head_621 =
      ErlangTuple
        [ErlangAtom "ELT", tup_el_623, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_627,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "elt", tup_el_636, ErlangAtom "boolean", tup_el_640]
  in let tup_el_644 = toErl 34
  in let tup_el_648 = toErl 10
  in let
    tup_el_657 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_661 = toErl "Arg0 := Arg1 >= Arg2."
  in let
    head_642 =
      ErlangTuple
        [ErlangAtom "EGT", tup_el_644, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_648,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "egt", tup_el_657, ErlangAtom "boolean", tup_el_661]
  in let tup_el_665 = toErl 35
  in let tup_el_669 = toErl 10
  in let
    tup_el_678 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "integer"]
  in let tup_el_682 = toErl "Arg0 := Arg1 /= Arg2."
  in let
    head_663 =
      ErlangTuple
        [ErlangAtom "NEQ", tup_el_665, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_669,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "neq", tup_el_678, ErlangAtom "boolean", tup_el_682]
  in let tup_el_686 = toErl 36
  in let tup_el_690 = toErl 10
  in let
    tup_el_699 =
      ErlangTuple [ErlangAtom "boolean", ErlangAtom "boolean"]
  in let tup_el_703 = toErl "Arg0 := Arg1 and Arg2."
  in let
    head_684 =
      ErlangTuple
        [ErlangAtom "AND", tup_el_686, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_690,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "and_op", tup_el_699, ErlangAtom "boolean",
         tup_el_703]
  in let tup_el_707 = toErl 37
  in let tup_el_711 = toErl 10
  in let
    tup_el_720 =
      ErlangTuple [ErlangAtom "boolean", ErlangAtom "boolean"]
  in let tup_el_724 = toErl "Arg0 := Arg1  or Arg2."
  in let
    head_705 =
      ErlangTuple
        [ErlangAtom "OR", tup_el_707, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_711,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "or_op", tup_el_720, ErlangAtom "boolean", tup_el_724]
  in let tup_el_728 = toErl 38
  in let tup_el_732 = toErl 10
  in let tup_el_739 = ErlangTuple [ErlangAtom "boolean"]
  in let tup_el_742 = toErl "Arg0 := not Arg1."
  in let
    head_726 =
      ErlangTuple
        [ErlangAtom "NOT", tup_el_728, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_732,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "not_op", tup_el_739, ErlangAtom "boolean",
         tup_el_742]
  in let tup_el_746 = toErl 39
  in let tup_el_750 = toErl 10
  in let tup_el_757 = ErlangTuple [ErlangAtom "integer"]
  in let
    tup_el_760 =
      toErl "Arg0 := tuple of size = Arg1. Elements on stack."
  in let
    head_744 =
      ErlangTuple
        [ErlangAtom "TUPLE", tup_el_746, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_750,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "ii") ErlangEmptyList),
         ErlangAtom "tuple", tup_el_757, ErlangAtom "tuple", tup_el_760]
  in let tup_el_764 = toErl 40
  in let tup_el_768 = toErl 10
  in let
    tup_el_777 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "tuple"]
  in let tup_el_781 = toErl "Arg1 := element(Arg2, Arg3)."
  in let
    head_762 =
      ErlangTuple
        [ErlangAtom "ELEMENT", tup_el_764, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_768,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "element_op", tup_el_777, ErlangAtom "any",
         tup_el_781]
  in let tup_el_785 = toErl 41
  in let tup_el_789 = toErl 10
  in let
    tup_el_800 =
      ErlangTuple
        [ErlangAtom "integer", ErlangAtom "tuple", ErlangAtom "any"]
  in let
    tup_el_805 =
      toErl
        "Arg0 := a new tuple similar to Arg2, but with element number Arg1 replaced by Arg3."
  in let
    head_783 =
      ErlangTuple
        [ErlangAtom "SETELEMENT", tup_el_785, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_789,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "setelement", tup_el_800, ErlangAtom "tuple",
         tup_el_805]
  in let tup_el_809 = toErl 42
  in let tup_el_813 = toErl 10
  in let tup_el_818 = ErlangTuple []
  in let tup_el_820 = toErl "Arg0 := #{}."
  in let
    head_807 =
      ErlangTuple
        [ErlangAtom "MAP_EMPTY", tup_el_809, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_813,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "map_empty", tup_el_818, ErlangAtom "map", tup_el_820]
  in let tup_el_824 = toErl 43
  in let tup_el_828 = toErl 10
  in let
    tup_el_837 = ErlangTuple [ErlangAtom "map", ErlangAtom "any"]
  in let tup_el_841 = toErl "Arg0 := lookup key Arg2 in map Arg1."
  in let
    head_822 =
      ErlangTuple
        [ErlangAtom "MAP_LOOKUP", tup_el_824, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_828,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "map_lookup", tup_el_837, ErlangAtom "any",
         tup_el_841]
  in let tup_el_845 = toErl 44
  in let tup_el_849 = toErl 10
  in let
    tup_el_860 =
      ErlangTuple
        [ErlangAtom "map", ErlangAtom "any", ErlangAtom "any"]
  in let
    tup_el_865 =
      toErl
        "Arg0 := lookup key Arg2 in map Arg1 if key exists in map otherwise Arg0 := Arg3."
  in let
    head_843 =
      ErlangTuple
        [ErlangAtom "MAP_LOOKUPD", tup_el_845, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_849,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "map_lookup", tup_el_860, ErlangAtom "any",
         tup_el_865]
  in let tup_el_869 = toErl 45
  in let tup_el_873 = toErl 10
  in let
    tup_el_884 =
      ErlangTuple
        [ErlangAtom "map", ErlangAtom "any", ErlangAtom "any"]
  in let
    tup_el_889 =
      toErl "Arg0 := update key Arg2 in map Arg1 with value Arg3."
  in let
    head_867 =
      ErlangTuple
        [ErlangAtom "MAP_UPDATE", tup_el_869, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_873,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "map_update", tup_el_884, ErlangAtom "map",
         tup_el_889]
  in let tup_el_893 = toErl 46
  in let tup_el_897 = toErl 10
  in let
    tup_el_906 = ErlangTuple [ErlangAtom "map", ErlangAtom "any"]
  in let
    tup_el_910 = toErl "Arg0 := delete key Arg2 from map Arg1."
  in let
    head_891 =
      ErlangTuple
        [ErlangAtom "MAP_DELETE", tup_el_893, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_897,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "map_delete", tup_el_906, ErlangAtom "map",
         tup_el_910]
  in let tup_el_914 = toErl 47
  in let tup_el_918 = toErl 10
  in let
    tup_el_927 = ErlangTuple [ErlangAtom "map", ErlangAtom "any"]
  in let
    tup_el_931 = toErl "Arg0 := true if key Arg2 is in map Arg1."
  in let
    head_912 =
      ErlangTuple
        [ErlangAtom "MAP_MEMBER", tup_el_914, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_918,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "map_member", tup_el_927, ErlangAtom "boolean",
         tup_el_931]
  in let tup_el_935 = toErl 48
  in let tup_el_939 = toErl 10
  in let
    tup_el_949 =
      ErlangTuple
        [ErlangAtom "tuple",
         ErlangCons (ErlangAtom "any")
           (ErlangCons (ErlangAtom "any") ErlangEmptyList)]
  in let tup_el_947 = ErlangTuple [ErlangAtom "list", tup_el_949]
  in let tup_el_946 = ErlangTuple [tup_el_947]
  in let
    tup_el_957 =
      toErl "Arg0 := make a map from (key, value) list in Arg1."
  in let
    head_933 =
      ErlangTuple
        [ErlangAtom "MAP_FROM_LIST", tup_el_935, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_939,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "map_from_list", tup_el_946, ErlangAtom "map",
         tup_el_957]
  in let tup_el_961 = toErl 49
  in let tup_el_965 = toErl 10
  in let tup_el_972 = ErlangTuple [ErlangAtom "map"]
  in let tup_el_975 = toErl "Arg0 := The size of the map Arg1."
  in let
    head_959 =
      ErlangTuple
        [ErlangAtom "MAP_SIZE", tup_el_961, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_965,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "map_size_", tup_el_972, ErlangAtom "integer",
         tup_el_975]
  in let tup_el_979 = toErl 50
  in let tup_el_983 = toErl 10
  in let tup_el_990 = ErlangTuple [ErlangAtom "map"]
  in let
    tup_el_993 =
      toErl "Arg0 := The tuple list representation of the map Arg1."
  in let
    head_977 =
      ErlangTuple
        [ErlangAtom "MAP_TO_LIST", tup_el_979, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_983,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "map_to_list", tup_el_990, ErlangAtom "list",
         tup_el_993]
  in let tup_el_997 = toErl 51
  in let tup_el_1001 = toErl 10
  in let tup_el_1008 = ErlangTuple [ErlangAtom "list"]
  in let tup_el_1011 = toErl "Arg0 := true if Arg1 == []."
  in let
    head_995 =
      ErlangTuple
        [ErlangAtom "IS_NIL", tup_el_997, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1001,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "is_nil", tup_el_1008, ErlangAtom "boolean",
         tup_el_1011]
  in let tup_el_1015 = toErl 52
  in let tup_el_1019 = toErl 10
  in let
    tup_el_1028 = ErlangTuple [ErlangAtom "any", ErlangAtom "list"]
  in let tup_el_1032 = toErl "Arg0 := [Arg1|Arg2]."
  in let
    head_1013 =
      ErlangTuple
        [ErlangAtom "CONS", tup_el_1015, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1019,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "cons", tup_el_1028, ErlangAtom "list", tup_el_1032]
  in let tup_el_1036 = toErl 53
  in let tup_el_1040 = toErl 10
  in let tup_el_1047 = ErlangTuple [ErlangAtom "list"]
  in let tup_el_1050 = toErl "Arg0 := head of list Arg1."
  in let
    head_1034 =
      ErlangTuple
        [ErlangAtom "HD", tup_el_1036, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1040,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "hd", tup_el_1047, ErlangAtom "any", tup_el_1050]
  in let tup_el_1054 = toErl 54
  in let tup_el_1058 = toErl 10
  in let tup_el_1065 = ErlangTuple [ErlangAtom "list"]
  in let tup_el_1068 = toErl "Arg0 := tail of list Arg1."
  in let
    head_1052 =
      ErlangTuple
        [ErlangAtom "TL", tup_el_1054, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1058,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "tl", tup_el_1065, ErlangAtom "list", tup_el_1068]
  in let tup_el_1072 = toErl 55
  in let tup_el_1076 = toErl 10
  in let tup_el_1083 = ErlangTuple [ErlangAtom "list"]
  in let tup_el_1086 = toErl "Arg0 := length of list Arg1."
  in let
    head_1070 =
      ErlangTuple
        [ErlangAtom "LENGTH", tup_el_1072, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1076,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "length", tup_el_1083, ErlangAtom "integer",
         tup_el_1086]
  in let tup_el_1090 = toErl 56
  in let tup_el_1094 = toErl 10
  in let tup_el_1099 = ErlangTuple []
  in let tup_el_1101 = toErl "Arg0 := []."
  in let
    head_1088 =
      ErlangTuple
        [ErlangAtom "NIL", tup_el_1090, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1094,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "nil",
         tup_el_1099, ErlangAtom "list", tup_el_1101]
  in let tup_el_1105 = toErl 57
  in let tup_el_1109 = toErl 10
  in let
    tup_el_1118 = ErlangTuple [ErlangAtom "list", ErlangAtom "list"]
  in let tup_el_1122 = toErl "Arg0 := Arg1 ++ Arg2."
  in let
    head_1103 =
      ErlangTuple
        [ErlangAtom "APPEND", tup_el_1105, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1109,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "append", tup_el_1118, ErlangAtom "list", tup_el_1122]
  in let tup_el_1126 = toErl 58
  in let tup_el_1130 = toErl 10
  in let
    tup_el_1139 =
      ErlangTuple [ErlangAtom "string", ErlangAtom "string"]
  in let
    tup_el_1143 =
      toErl "Arg0 := string Arg1 followed by string Arg2."
  in let
    head_1124 =
      ErlangTuple
        [ErlangAtom "STR_JOIN", tup_el_1126, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1130,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "str_join", tup_el_1139, ErlangAtom "string",
         tup_el_1143]
  in let tup_el_1147 = toErl 59
  in let tup_el_1151 = toErl 100
  in let tup_el_1158 = ErlangTuple [ErlangAtom "integer"]
  in let
    tup_el_1161 = toErl "Arg0 := turn integer Arg1 into a string."
  in let
    head_1145 =
      ErlangTuple
        [ErlangAtom "INT_TO_STR", tup_el_1147, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1151,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "int_to_str", tup_el_1158, ErlangAtom "string",
         tup_el_1161]
  in let tup_el_1165 = toErl 60
  in let tup_el_1169 = toErl 100
  in let tup_el_1176 = ErlangTuple [ErlangAtom "address"]
  in let
    tup_el_1179 = toErl "Arg0 := turn address Arg1 into a string."
  in let
    head_1163 =
      ErlangTuple
        [ErlangAtom "ADDR_TO_STR", tup_el_1165, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1169,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "addr_to_str", tup_el_1176, ErlangAtom "string",
         tup_el_1179]
  in let tup_el_1183 = toErl 61
  in let tup_el_1187 = toErl 100
  in let tup_el_1194 = ErlangTuple [ErlangAtom "string"]
  in let tup_el_1197 = toErl "Arg0 := the reverse of string Arg1."
  in let
    head_1181 =
      ErlangTuple
        [ErlangAtom "STR_REVERSE", tup_el_1183, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1187,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "str_reverse", tup_el_1194, ErlangAtom "string",
         tup_el_1197]
  in let tup_el_1201 = toErl 62
  in let tup_el_1205 = toErl 10
  in let tup_el_1212 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_1215 = toErl "Arg0 := The length of the string Arg1."
  in let
    head_1199 =
      ErlangTuple
        [ErlangAtom "STR_LENGTH", tup_el_1201, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1205,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "str_length", tup_el_1212, ErlangAtom "integer",
         tup_el_1215]
  in let tup_el_1219 = toErl 63
  in let tup_el_1223 = toErl 10
  in let tup_el_1230 = ErlangTuple [ErlangAtom "bytes"]
  in let tup_el_1233 = toErl "Arg0 := bytes_to_int(Arg1)"
  in let
    head_1217 =
      ErlangTuple
        [ErlangAtom "BYTES_TO_INT", tup_el_1219, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1223,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bytes_to_int", tup_el_1230, ErlangAtom "integer",
         tup_el_1233]
  in let tup_el_1237 = toErl 64
  in let tup_el_1241 = toErl 100
  in let tup_el_1248 = ErlangTuple [ErlangAtom "bytes"]
  in let tup_el_1251 = toErl "Arg0 := bytes_to_str(Arg1)"
  in let
    head_1235 =
      ErlangTuple
        [ErlangAtom "BYTES_TO_STR", tup_el_1237, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1241,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bytes_to_str", tup_el_1248, ErlangAtom "string",
         tup_el_1251]
  in let tup_el_1255 = toErl 65
  in let tup_el_1259 = toErl 10
  in let
    tup_el_1268 =
      ErlangTuple [ErlangAtom "bytes", ErlangAtom "bytes"]
  in let tup_el_1272 = toErl "Arg0 := bytes_concat(Arg1, Arg2)"
  in let
    head_1253 =
      ErlangTuple
        [ErlangAtom "BYTES_CONCAT", tup_el_1255, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1259,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bytes_concat", tup_el_1268, ErlangAtom "bytes",
         tup_el_1272]
  in let tup_el_1276 = toErl 66
  in let tup_el_1280 = toErl 10
  in let
    tup_el_1289 =
      ErlangTuple [ErlangAtom "bytes", ErlangAtom "integer"]
  in let
    tup_el_1293 =
      toErl
        "Arg0 := bytes_split(Arg2, Arg1), where Arg2 is the length of the first chunk."
  in let
    head_1274 =
      ErlangTuple
        [ErlangAtom "BYTES_SPLIT", tup_el_1276, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1280,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bytes_split", tup_el_1289, ErlangAtom "bytes",
         tup_el_1293]
  in let tup_el_1297 = toErl 67
  in let tup_el_1301 = toErl 10
  in let tup_el_1308 = ErlangTuple [ErlangAtom "integer"]
  in let
    tup_el_1311 = toErl "Arg0 := turn integer Arg1 into an address."
  in let
    head_1295 =
      ErlangTuple
        [ErlangAtom "INT_TO_ADDR", tup_el_1297, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1301,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "int_to_addr", tup_el_1308, ErlangAtom "address",
         tup_el_1311]
  in let tup_el_1315 = toErl 68
  in let tup_el_1319 = toErl 10
  in let
    tup_el_1330 =
      ErlangTuple
        [ErlangAtom "integer", ErlangAtom "integer",
         ErlangAtom "integer"]
  in let
    tup_el_1335 =
      toErl
        "Arg0 := create a variant of size Arg1 with the tag Arg2 (Arg2 < Arg1) and take Arg3 elements from the stack."
  in let
    head_1313 =
      ErlangTuple
        [ErlangAtom "VARIANT", tup_el_1315, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1319,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "variant", tup_el_1330, ErlangAtom "variant",
         tup_el_1335]
  in let tup_el_1339 = toErl 69
  in let tup_el_1343 = toErl 10
  in let
    tup_el_1352 =
      ErlangTuple [ErlangAtom "variant", ErlangAtom "integer"]
  in let
    tup_el_1356 =
      toErl "Arg0 := true if variant Arg1 has the tag Arg2."
  in let
    head_1337 =
      ErlangTuple
        [ErlangAtom "VARIANT_TEST", tup_el_1339, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1343,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "variant_test", tup_el_1352, ErlangAtom "boolean",
         tup_el_1356]
  in let tup_el_1360 = toErl 70
  in let tup_el_1364 = toErl 10
  in let
    tup_el_1373 =
      ErlangTuple [ErlangAtom "variant", ErlangAtom "integer"]
  in let
    tup_el_1377 =
      toErl "Arg0 := element number Arg2 from variant Arg1."
  in let
    head_1358 =
      ErlangTuple
        [ErlangAtom "VARIANT_ELEMENT", tup_el_1360, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1364,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "variant_element", tup_el_1373, ErlangAtom "any",
         tup_el_1377]
  in let tup_el_1381 = toErl 71
  in let tup_el_1385 = toErl 10
  in let tup_el_1388 = ErlangTuple []
  in let tup_el_1390 = toErl "push an empty bitmap on the stack."
  in let
    head_1379 =
      ErlangTuple
        [ErlangAtom "BITS_NONEA", tup_el_1381, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1385,
         ErlangEmptyList, ErlangAtom "bits_none", tup_el_1388,
         ErlangAtom "bits", tup_el_1390]
  in let tup_el_1394 = toErl 72
  in let tup_el_1398 = toErl 10
  in let tup_el_1403 = ErlangTuple []
  in let tup_el_1405 = toErl "Arg0 := empty bitmap."
  in let
    head_1392 =
      ErlangTuple
        [ErlangAtom "BITS_NONE", tup_el_1394, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1398,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "bits_none", tup_el_1403, ErlangAtom "bits",
         tup_el_1405]
  in let tup_el_1409 = toErl 73
  in let tup_el_1413 = toErl 10
  in let tup_el_1416 = ErlangTuple []
  in let tup_el_1418 = toErl "push a full bitmap on the stack."
  in let
    head_1407 =
      ErlangTuple
        [ErlangAtom "BITS_ALLA", tup_el_1409, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1413,
         ErlangEmptyList, ErlangAtom "bits_all", tup_el_1416,
         ErlangAtom "bits", tup_el_1418]
  in let tup_el_1422 = toErl 74
  in let tup_el_1426 = toErl 10
  in let tup_el_1431 = ErlangTuple []
  in let tup_el_1433 = toErl "Arg0 := full bitmap."
  in let
    head_1420 =
      ErlangTuple
        [ErlangAtom "BITS_ALL", tup_el_1422, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1426,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "bits_all", tup_el_1431, ErlangAtom "bits",
         tup_el_1433]
  in let tup_el_1437 = toErl 75
  in let tup_el_1441 = toErl 10
  in let tup_el_1448 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_1451 = toErl "Arg0 := bitmap with Arg1 bits set."
  in let
    head_1435 =
      ErlangTuple
        [ErlangAtom "BITS_ALL_N", tup_el_1437, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1441,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bits_all_n", tup_el_1448, ErlangAtom "bits",
         tup_el_1451]
  in let tup_el_1455 = toErl 76
  in let tup_el_1459 = toErl 10
  in let
    tup_el_1468 =
      ErlangTuple [ErlangAtom "bits", ErlangAtom "integer"]
  in let tup_el_1472 = toErl "Arg0 := set bit Arg2 of bitmap Arg1."
  in let
    head_1453 =
      ErlangTuple
        [ErlangAtom "BITS_SET", tup_el_1455, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1459,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bits_set", tup_el_1468, ErlangAtom "bits",
         tup_el_1472]
  in let tup_el_1476 = toErl 77
  in let tup_el_1480 = toErl 10
  in let
    tup_el_1489 =
      ErlangTuple [ErlangAtom "bits", ErlangAtom "integer"]
  in let
    tup_el_1493 = toErl "Arg0 := clear bit Arg2 of bitmap Arg1."
  in let
    head_1474 =
      ErlangTuple
        [ErlangAtom "BITS_CLEAR", tup_el_1476, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1480,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bits_clear", tup_el_1489, ErlangAtom "bits",
         tup_el_1493]
  in let tup_el_1497 = toErl 78
  in let tup_el_1501 = toErl 10
  in let
    tup_el_1510 =
      ErlangTuple [ErlangAtom "bits", ErlangAtom "integer"]
  in let
    tup_el_1514 =
      toErl "Arg0 := true if bit Arg2 of bitmap Arg1 is set."
  in let
    head_1495 =
      ErlangTuple
        [ErlangAtom "BITS_TEST", tup_el_1497, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1501,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bits_test", tup_el_1510, ErlangAtom "boolean",
         tup_el_1514]
  in let tup_el_1518 = toErl 79
  in let tup_el_1522 = toErl 10
  in let tup_el_1529 = ErlangTuple [ErlangAtom "bits"]
  in let
    tup_el_1532 =
      toErl
        "Arg0 := sum of set bits in bitmap Arg1. Exception if infinit bitmap."
  in let
    head_1516 =
      ErlangTuple
        [ErlangAtom "BITS_SUM", tup_el_1518, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1522,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bits_sum", tup_el_1529, ErlangAtom "integer",
         tup_el_1532]
  in let tup_el_1536 = toErl 80
  in let tup_el_1540 = toErl 10
  in let
    tup_el_1549 = ErlangTuple [ErlangAtom "bits", ErlangAtom "bits"]
  in let tup_el_1553 = toErl "Arg0 := Arg1 v Arg2."
  in let
    head_1534 =
      ErlangTuple
        [ErlangAtom "BITS_OR", tup_el_1536, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1540,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bits_or", tup_el_1549, ErlangAtom "bits",
         tup_el_1553]
  in let tup_el_1557 = toErl 81
  in let tup_el_1561 = toErl 10
  in let
    tup_el_1570 = ErlangTuple [ErlangAtom "bits", ErlangAtom "bits"]
  in let tup_el_1574 = toErl "Arg0 := Arg1 ^ Arg2."
  in let
    head_1555 =
      ErlangTuple
        [ErlangAtom "BITS_AND", tup_el_1557, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1561,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bits_and", tup_el_1570, ErlangAtom "bits",
         tup_el_1574]
  in let tup_el_1578 = toErl 82
  in let tup_el_1582 = toErl 10
  in let
    tup_el_1591 = ErlangTuple [ErlangAtom "bits", ErlangAtom "bits"]
  in let tup_el_1595 = toErl "Arg0 := Arg1 - Arg2."
  in let
    head_1576 =
      ErlangTuple
        [ErlangAtom "BITS_DIFF", tup_el_1578, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1582,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bits_diff", tup_el_1591, ErlangAtom "bits",
         tup_el_1595]
  in let tup_el_1599 = toErl 83
  in let tup_el_1603 = toErl 10
  in let tup_el_1608 = ErlangTuple []
  in let
    tup_el_1610 = toErl "Arg0 := The current contract balance."
  in let
    head_1597 =
      ErlangTuple
        [ErlangAtom "BALANCE", tup_el_1599, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1603,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "balance", tup_el_1608, ErlangAtom "integer",
         tup_el_1610]
  in let tup_el_1614 = toErl 84
  in let tup_el_1618 = toErl 10
  in let tup_el_1623 = ErlangTuple []
  in let
    tup_el_1625 =
      toErl
        "Arg0 := Address of contract called by the call transaction."
  in let
    head_1612 =
      ErlangTuple
        [ErlangAtom "ORIGIN", tup_el_1614, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1618,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "origin",
         tup_el_1623, ErlangAtom "address", tup_el_1625]
  in let tup_el_1629 = toErl 85
  in let tup_el_1633 = toErl 10
  in let tup_el_1638 = ErlangTuple []
  in let
    tup_el_1640 =
      toErl "Arg0 := The address that signed the call transaction."
  in let
    head_1627 =
      ErlangTuple
        [ErlangAtom "CALLER", tup_el_1629, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1633,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "caller",
         tup_el_1638, ErlangAtom "address", tup_el_1640]
  in let tup_el_1644 = toErl 86
  in let tup_el_1648 = toErl 10
  in let tup_el_1655 = ErlangTuple [ErlangAtom "integer"]
  in let tup_el_1658 = toErl "Arg0 := The blockhash at height."
  in let
    head_1642 =
      ErlangTuple
        [ErlangAtom "BLOCKHASH", tup_el_1644, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1648,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "blockhash", tup_el_1655, ErlangAtom "hash",
         tup_el_1658]
  in let tup_el_1662 = toErl 87
  in let tup_el_1666 = toErl 10
  in let tup_el_1671 = ErlangTuple []
  in let
    tup_el_1673 =
      toErl "Arg0 := The address of the current beneficiary."
  in let
    head_1660 =
      ErlangTuple
        [ErlangAtom "BENEFICIARY", tup_el_1662, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1666,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "beneficiary", tup_el_1671, ErlangAtom "address",
         tup_el_1673]
  in let tup_el_1677 = toErl 88
  in let tup_el_1681 = toErl 10
  in let tup_el_1686 = ErlangTuple []
  in let
    tup_el_1688 =
      toErl
        "Arg0 := The current timestamp. Unrelaiable, don\'t use for anything."
  in let
    head_1675 =
      ErlangTuple
        [ErlangAtom "TIMESTAMP", tup_el_1677, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1681,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "timestamp", tup_el_1686, ErlangAtom "integer",
         tup_el_1688]
  in let tup_el_1692 = toErl 89
  in let tup_el_1696 = toErl 10
  in let tup_el_1701 = ErlangTuple []
  in let
    tup_el_1703 =
      toErl "Arg0 := The block height of the cureent generation."
  in let
    head_1690 =
      ErlangTuple
        [ErlangAtom "GENERATION", tup_el_1692, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1696,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "generation", tup_el_1701, ErlangAtom "integer",
         tup_el_1703]
  in let tup_el_1707 = toErl 90
  in let tup_el_1711 = toErl 10
  in let tup_el_1716 = ErlangTuple []
  in let
    tup_el_1718 = toErl "Arg0 := The current micro block number."
  in let
    head_1705 =
      ErlangTuple
        [ErlangAtom "MICROBLOCK", tup_el_1707, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1711,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "microblock", tup_el_1716, ErlangAtom "integer",
         tup_el_1718]
  in let tup_el_1722 = toErl 91
  in let tup_el_1726 = toErl 10
  in let tup_el_1731 = ErlangTuple []
  in let tup_el_1733 = toErl "Arg0 := The current difficulty."
  in let
    head_1720 =
      ErlangTuple
        [ErlangAtom "DIFFICULTY", tup_el_1722, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1726,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "difficulty", tup_el_1731, ErlangAtom "integer",
         tup_el_1733]
  in let tup_el_1737 = toErl 92
  in let tup_el_1741 = toErl 10
  in let tup_el_1746 = ErlangTuple []
  in let tup_el_1748 = toErl "Arg0 := The current gaslimit."
  in let
    head_1735 =
      ErlangTuple
        [ErlangAtom "GASLIMIT", tup_el_1737, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1741,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "gaslimit", tup_el_1746, ErlangAtom "integer",
         tup_el_1748]
  in let tup_el_1752 = toErl 93
  in let tup_el_1756 = toErl 10
  in let tup_el_1761 = ErlangTuple []
  in let tup_el_1763 = toErl "Arg0 := The amount of gas left."
  in let
    head_1750 =
      ErlangTuple
        [ErlangAtom "GAS", tup_el_1752, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1756,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "gas",
         tup_el_1761, ErlangAtom "integer", tup_el_1763]
  in let tup_el_1767 = toErl 94
  in let tup_el_1771 = toErl 10
  in let tup_el_1776 = ErlangTuple []
  in let
    tup_el_1778 = toErl "Arg0 := The current contract address."
  in let
    head_1765 =
      ErlangTuple
        [ErlangAtom "ADDRESS", tup_el_1767, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1771,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "address", tup_el_1776, ErlangAtom "address",
         tup_el_1778]
  in let tup_el_1782 = toErl 95
  in let tup_el_1786 = toErl 10
  in let tup_el_1791 = ErlangTuple []
  in let tup_el_1793 = toErl "Arg0 := The current gas price."
  in let
    head_1780 =
      ErlangTuple
        [ErlangAtom "GASPRICE", tup_el_1782, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1786,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "gasprice", tup_el_1791, ErlangAtom "integer",
         tup_el_1793]
  in let tup_el_1797 = toErl 96
  in let tup_el_1801 = toErl 1000
  in let tup_el_1806 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_1809 = toErl "Create a log message in the call object."
  in let
    head_1795 =
      ErlangTuple
        [ErlangAtom "LOG0", tup_el_1797, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1801,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "log",
         tup_el_1806, ErlangAtom "none", tup_el_1809]
  in let tup_el_1813 = toErl 97
  in let tup_el_1817 = toErl 1100
  in let
    tup_el_1824 =
      ErlangTuple [ErlangAtom "integer", ErlangAtom "string"]
  in let
    tup_el_1828 =
      toErl "Create a log message with one topic in the call object."
  in let
    head_1811 =
      ErlangTuple
        [ErlangAtom "LOG1", tup_el_1813, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1817,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "log", tup_el_1824, ErlangAtom "none", tup_el_1828]
  in let tup_el_1832 = toErl 98
  in let tup_el_1836 = toErl 1200
  in let
    tup_el_1845 =
      ErlangTuple
        [ErlangAtom "integer", ErlangAtom "integer", ErlangAtom "string"]
  in let
    tup_el_1850 =
      toErl "Create a log message with two topics in the call object."
  in let
    head_1830 =
      ErlangTuple
        [ErlangAtom "LOG2", tup_el_1832, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1836,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "log", tup_el_1845, ErlangAtom "none", tup_el_1850]
  in let tup_el_1854 = toErl 99
  in let tup_el_1858 = toErl 1300
  in let
    tup_el_1869 =
      ErlangTuple
        [ErlangAtom "integer", ErlangAtom "integer",
         ErlangAtom "integer", ErlangAtom "string"]
  in let
    tup_el_1875 =
      toErl
        "Create a log message with three topics in the call object."
  in let
    head_1852 =
      ErlangTuple
        [ErlangAtom "LOG3", tup_el_1854, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1858,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "log", tup_el_1869, ErlangAtom "none", tup_el_1875]
  in let tup_el_1879 = toErl 100
  in let tup_el_1883 = toErl 1400
  in let
    tup_el_1896 =
      ErlangTuple
        [ErlangAtom "integer", ErlangAtom "integer",
         ErlangAtom "integer", ErlangAtom "integer", ErlangAtom "string"]
  in let
    tup_el_1903 =
      toErl "Create a log message with four topics in the call object."
  in let
    head_1877 =
      ErlangTuple
        [ErlangAtom "LOG4", tup_el_1879, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_1883,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
         ErlangAtom "log", tup_el_1896, ErlangAtom "none", tup_el_1903]
  in let tup_el_1907 = toErl 101
  in let tup_el_1911 = toErl 100
  in let
    tup_el_1918 =
      ErlangTuple [ErlangAtom "address", ErlangAtom "integer"]
  in let
    tup_el_1922 =
      toErl
        "Transfer Arg1 tokens to account Arg0. (If the contract account has at least that many tokens."
  in let
    head_1905 =
      ErlangTuple
        [ErlangAtom "SPEND", tup_el_1907, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_1911,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "spend", tup_el_1918, ErlangAtom "none", tup_el_1922]
  in let tup_el_1926 = toErl 102
  in let tup_el_1930 = toErl 100
  in let
    tup_el_1947 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "address",
         ErlangAtom "integer", ErlangAtom "variant", ErlangAtom "typerep",
         ErlangAtom "typerep"]
  in let
    tup_el_1955 =
      toErl
        "Arg0 := New oracle with address Arg2, query fee Arg3, TTL Arg4, query type Arg5 and response type Arg6. Arg0 contains delegation signature."
  in let
    head_1924 =
      ErlangTuple
        [ErlangAtom "ORACLE_REGISTER", tup_el_1926, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_1930,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a")
                       (ErlangCons (ErlangAtom "a")
                          (ErlangCons (ErlangAtom "a") ErlangEmptyList)))))),
         ErlangAtom "oracle_register", tup_el_1947, ErlangAtom "oracle",
         tup_el_1955]
  in let tup_el_1959 = toErl 103
  in let tup_el_1963 = toErl 100
  in let
    tup_el_1982 =
      ErlangTuple
        [ErlangAtom "oracle", ErlangAtom "any", ErlangAtom "integer",
         ErlangAtom "variant", ErlangAtom "variant", ErlangAtom "typerep",
         ErlangAtom "typerep"]
  in let
    tup_el_1991 =
      toErl
        "Arg0 := New oracle query for oracle Arg1, question in Arg2, query fee in Arg3, query TTL in Arg4, response TTL in Arg5. Typereps for checking oracle type is in Arg6 and Arg7."
  in let
    head_1957 =
      ErlangTuple
        [ErlangAtom "ORACLE_QUERY", tup_el_1959, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_1963,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a")
                       (ErlangCons (ErlangAtom "a")
                          (ErlangCons (ErlangAtom "a")
                             (ErlangCons (ErlangAtom "a")
                                ErlangEmptyList))))))),
         ErlangAtom "oracle_query", tup_el_1982,
         ErlangAtom "oracle_query", tup_el_1991]
  in let tup_el_1995 = toErl 104
  in let tup_el_1999 = toErl 100
  in let
    tup_el_2014 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "oracle",
         ErlangAtom "oracle_query", ErlangAtom "any",
         ErlangAtom "typerep", ErlangAtom "typerep"]
  in let
    tup_el_2022 =
      toErl
        "Respond as oracle Arg1 to query in Arg2 with response Arg3. Arg0 contains delegation signature. Typereps for checking oracle type is in Arg4 and Arg5."
  in let
    head_1993 =
      ErlangTuple
        [ErlangAtom "ORACLE_RESPOND", tup_el_1995, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_1999,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a")
                       (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
         ErlangAtom "oracle_respond", tup_el_2014, ErlangAtom "none",
         tup_el_2022]
  in let tup_el_2026 = toErl 105
  in let tup_el_2030 = toErl 100
  in let
    tup_el_2039 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "oracle",
         ErlangAtom "variant"]
  in let
    tup_el_2044 =
      toErl
        "Extend oracle in Arg1 with TTL in Arg2. Arg0 contains delegation signature."
  in let
    head_2024 =
      ErlangTuple
        [ErlangAtom "ORACLE_EXTEND", tup_el_2026, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_2030,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "oracle_extend", tup_el_2039, ErlangAtom "none",
         tup_el_2044]
  in let tup_el_2048 = toErl 106
  in let tup_el_2052 = toErl 100
  in let
    tup_el_2065 =
      ErlangTuple
        [ErlangAtom "oracle", ErlangAtom "oracle_query",
         ErlangAtom "typerep", ErlangAtom "typerep"]
  in let
    tup_el_2071 =
      toErl
        "Arg0 := option variant with answer (if any) from oracle query in Arg1 given by oracle Arg0. Typereps for checking oracle type is in Arg3 and Arg4."
  in let
    head_2046 =
      ErlangTuple
        [ErlangAtom "ORACLE_GET_ANSWER", tup_el_2048, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2052,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
         ErlangAtom "oracle_get_answer", tup_el_2065, ErlangAtom "any",
         tup_el_2071]
  in let tup_el_2075 = toErl 107
  in let tup_el_2079 = toErl 100
  in let
    tup_el_2092 =
      ErlangTuple
        [ErlangAtom "oracle", ErlangAtom "oracle_query",
         ErlangAtom "typerep", ErlangAtom "typerep"]
  in let
    tup_el_2098 =
      toErl
        "Arg0 := question in oracle query Arg2 given to oracle Arg1. Typereps for checking oracle type is in Arg3 and Arg4."
  in let
    head_2073 =
      ErlangTuple
        [ErlangAtom "ORACLE_GET_QUESTION", tup_el_2075,
         ErlangAtom "false", ErlangAtom "false", ErlangAtom "true",
         tup_el_2079,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
         ErlangAtom "oracle_get_question", tup_el_2092, ErlangAtom "any",
         tup_el_2098]
  in let tup_el_2102 = toErl 108
  in let tup_el_2106 = toErl 100
  in let tup_el_2113 = ErlangTuple [ErlangAtom "oracle"]
  in let tup_el_2116 = toErl "Arg0 := query fee for oracle Arg1"
  in let
    head_2100 =
      ErlangTuple
        [ErlangAtom "ORACLE_QUERY_FEE", tup_el_2102, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2106,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "oracle_query_fee", tup_el_2113, ErlangAtom "integer",
         tup_el_2116]
  in let tup_el_2120 = toErl 109
  in let tup_el_2124 = toErl 100
  in let
    tup_el_2135 =
      ErlangTuple
        [ErlangAtom "string", ErlangAtom "string", ErlangAtom "typerep"]
  in let
    tup_el_2140 =
      toErl
        "Resolve name in Arg0 with tag Arg1. Arg2 describes the type parameter of the resolved name."
  in let
    head_2118 =
      ErlangTuple
        [ErlangAtom "AENS_RESOLVE", tup_el_2120, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2124,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "aens_resolve", tup_el_2135, ErlangAtom "variant",
         tup_el_2140]
  in let tup_el_2144 = toErl 110
  in let tup_el_2148 = toErl 100
  in let
    tup_el_2157 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "address", ErlangAtom "hash"]
  in let
    tup_el_2162 =
      toErl
        "Preclaim the hash in Arg2 for address in Arg1. Arg0 contains delegation signature."
  in let
    head_2142 =
      ErlangTuple
        [ErlangAtom "AENS_PRECLAIM", tup_el_2144, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_2148,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "aens_preclaim", tup_el_2157, ErlangAtom "none",
         tup_el_2162]
  in let tup_el_2166 = toErl 111
  in let tup_el_2170 = toErl 100
  in let
    tup_el_2183 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "address",
         ErlangAtom "string", ErlangAtom "integer", ErlangAtom "integer"]
  in let
    tup_el_2190 =
      toErl
        "Attempt to claim the name in Arg2 for address in Arg1 at a price in Arg4. Arg3 contains the salt used to hash the preclaim. Arg0 contains delegation signature."
  in let
    head_2164 =
      ErlangTuple
        [ErlangAtom "AENS_CLAIM", tup_el_2166, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_2170,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
         ErlangAtom "aens_claim", tup_el_2183, ErlangAtom "none",
         tup_el_2190]
  in let tup_el_2194 = toErl 112
  in let tup_el_2198 = toErl 100
  in let
    tup_el_2213 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "address",
         ErlangAtom "string", ErlangAtom "variant", ErlangAtom "variant",
         ErlangAtom "variant"]
  in let
    tup_el_2221 =
      toErl
        "Updates name in Arg2 for address in Arg1. Arg3 contains optional ttl (of type Chain.ttl), Arg4 contains optional client_ttl (of type int), Arg5 contains optional pointers (of type map(string, pointee))"
  in let
    head_2192 =
      ErlangTuple
        [ErlangAtom "AENS_UPDATE", tup_el_2194, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_2198,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a")
                       (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
         ErlangAtom "aens_update", tup_el_2213, ErlangAtom "none",
         tup_el_2221]
  in let tup_el_2225 = toErl 113
  in let tup_el_2229 = toErl 100
  in let
    tup_el_2240 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "address",
         ErlangAtom "address", ErlangAtom "string"]
  in let
    tup_el_2246 =
      toErl
        "Transfer ownership of name Arg3 from account Arg1 to Arg2. Arg0 contains delegation signature."
  in let
    head_2223 =
      ErlangTuple
        [ErlangAtom "AENS_TRANSFER", tup_el_2225, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_2229,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "aens_transfer", tup_el_2240, ErlangAtom "none",
         tup_el_2246]
  in let tup_el_2250 = toErl 114
  in let tup_el_2254 = toErl 100
  in let
    tup_el_2263 =
      ErlangTuple
        [ErlangAtom "signature", ErlangAtom "address",
         ErlangAtom "string"]
  in let
    tup_el_2268 =
      toErl
        "Revoke the name in Arg2 from owner Arg1. Arg0 contains delegation signature."
  in let
    head_2248 =
      ErlangTuple
        [ErlangAtom "AENS_REVOKE", tup_el_2250, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", tup_el_2254,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "aens_revoke", tup_el_2263, ErlangAtom "none",
         tup_el_2268]
  in let tup_el_2272 = toErl 115
  in let tup_el_2276 = toErl 50
  in let tup_el_2283 = ErlangTuple [ErlangAtom "address"]
  in let tup_el_2286 = toErl "Arg0 := The balance of address Arg1."
  in let
    head_2270 =
      ErlangTuple
        [ErlangAtom "BALANCE_OTHER", tup_el_2272, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2276,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "balance_other", tup_el_2283, ErlangAtom "integer",
         tup_el_2286]
  in let tup_el_2290 = toErl 116
  in let tup_el_2294 = toErl 1300
  in let
    tup_el_2305 =
      ErlangTuple
        [ErlangAtom "bytes", ErlangAtom "address", ErlangAtom "bytes"]
  in let
    tup_el_2310 = toErl "Arg0 := verify_sig(Hash, PubKey, Signature)"
  in let
    head_2288 =
      ErlangTuple
        [ErlangAtom "VERIFY_SIG", tup_el_2290, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2294,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "verify_sig", tup_el_2305, ErlangAtom "boolean",
         tup_el_2310]
  in let tup_el_2314 = toErl 117
  in let tup_el_2318 = toErl 1300
  in let
    tup_el_2329 =
      ErlangTuple
        [ErlangAtom "bytes", ErlangAtom "bytes", ErlangAtom "bytes"]
  in let
    tup_el_2334 =
      toErl "Arg0 := verify_sig_secp256k1(Hash, PubKey, Signature)"
  in let
    head_2312 =
      ErlangTuple
        [ErlangAtom "VERIFY_SIG_SECP256K1", tup_el_2314,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2318,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "verify_sig_secp256k1", tup_el_2329,
         ErlangAtom "boolean", tup_el_2334]
  in let tup_el_2338 = toErl 118
  in let tup_el_2342 = toErl 10
  in let tup_el_2349 = ErlangTuple [ErlangAtom "contract"]
  in let
    tup_el_2352 = toErl "Arg0 := Arg1 - A no-op type conversion"
  in let
    head_2336 =
      ErlangTuple
        [ErlangAtom "CONTRACT_TO_ADDRESS", tup_el_2338,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2342,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "contract_to_address", tup_el_2349,
         ErlangAtom "address", tup_el_2352]
  in let tup_el_2356 = toErl 119
  in let tup_el_2360 = toErl 10
  in let tup_el_2365 = ErlangTuple []
  in let
    tup_el_2367 =
      toErl
        "If in GA authentication context return Some(TxHash) otherwise None."
  in let
    head_2354 =
      ErlangTuple
        [ErlangAtom "AUTH_TX_HASH", tup_el_2356, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2360,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "auth_tx_hash", tup_el_2365, ErlangAtom "variant",
         tup_el_2367]
  in let tup_el_2371 = toErl 120
  in let tup_el_2375 = toErl 100
  in let
    tup_el_2386 =
      ErlangTuple
        [ErlangAtom "oracle", ErlangAtom "typerep", ErlangAtom "typerep"]
  in let
    tup_el_2391 =
      toErl
        "Arg0 := is Arg1 an oracle with the given query (Arg2) and response (Arg3) types"
  in let
    head_2369 =
      ErlangTuple
        [ErlangAtom "ORACLE_CHECK", tup_el_2371, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2375,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "oracle_check", tup_el_2386, ErlangAtom "bool",
         tup_el_2391]
  in let tup_el_2395 = toErl 121
  in let tup_el_2399 = toErl 100
  in let
    tup_el_2412 =
      ErlangTuple
        [ErlangAtom "oracle", ErlangAtom "oracle_query",
         ErlangAtom "typerep", ErlangAtom "typerep"]
  in let
    tup_el_2418 =
      toErl
        "Arg0 := is Arg2 a query for the oracle Arg1 with the given types (Arg3, Arg4)"
  in let
    head_2393 =
      ErlangTuple
        [ErlangAtom "ORACLE_CHECK_QUERY", tup_el_2395,
         ErlangAtom "false", ErlangAtom "false", ErlangAtom "true",
         tup_el_2399,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
         ErlangAtom "oracle_check_query", tup_el_2412, ErlangAtom "bool",
         tup_el_2418]
  in let tup_el_2422 = toErl 122
  in let tup_el_2426 = toErl 100
  in let tup_el_2433 = ErlangTuple [ErlangAtom "address"]
  in let tup_el_2436 = toErl "Arg0 := is Arg1 an oracle"
  in let
    head_2420 =
      ErlangTuple
        [ErlangAtom "IS_ORACLE", tup_el_2422, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2426,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "is_oracle", tup_el_2433, ErlangAtom "bool",
         tup_el_2436]
  in let tup_el_2440 = toErl 123
  in let tup_el_2444 = toErl 100
  in let tup_el_2451 = ErlangTuple [ErlangAtom "address"]
  in let tup_el_2454 = toErl "Arg0 := is Arg1 a contract"
  in let
    head_2438 =
      ErlangTuple
        [ErlangAtom "IS_CONTRACT", tup_el_2440, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2444,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "is_contract", tup_el_2451, ErlangAtom "bool",
         tup_el_2454]
  in let tup_el_2458 = toErl 124
  in let tup_el_2462 = toErl 100
  in let tup_el_2469 = ErlangTuple [ErlangAtom "address"]
  in let tup_el_2472 = toErl "Arg0 := is Arg1 a payable address"
  in let
    head_2456 =
      ErlangTuple
        [ErlangAtom "IS_PAYABLE", tup_el_2458, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_2462,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "is_payable", tup_el_2469, ErlangAtom "bool",
         tup_el_2472]
  in let tup_el_2476 = toErl 125
  in let tup_el_2480 = toErl 10
  in let tup_el_2485 = ErlangTuple []
  in let tup_el_2487 = toErl "Arg0 := contract creator"
  in let
    head_2474 =
      ErlangTuple
        [ErlangAtom "CREATOR", tup_el_2476, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2480,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "contract_creator", tup_el_2485, ErlangAtom "address",
         tup_el_2487]
  in let tup_el_2491 = toErl 126
  in let tup_el_2495 = toErl 1300
  in let
    tup_el_2506 =
      ErlangTuple
        [ErlangAtom "bytes", ErlangAtom "bytes", ErlangAtom "bytes"]
  in let
    tup_el_2511 =
      toErl "Arg0 := ecverify_secp256k1(Hash, Addr, Signature)"
  in let
    head_2489 =
      ErlangTuple
        [ErlangAtom "ECVERIFY_SECP256K1", tup_el_2491,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2495,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
         ErlangAtom "ecverify_secp256k1", tup_el_2506, ErlangAtom "bytes",
         tup_el_2511]
  in let tup_el_2515 = toErl 127
  in let tup_el_2519 = toErl 1300
  in let
    tup_el_2528 =
      ErlangTuple [ErlangAtom "bytes", ErlangAtom "bytes"]
  in let
    tup_el_2532 =
      toErl "Arg0 := ecrecover_secp256k1(Hash, Signature)"
  in let
    head_2513 =
      ErlangTuple
        [ErlangAtom "ECRECOVER_SECP256K1", tup_el_2515,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2519,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "ecrecover_secp256k1", tup_el_2528,
         ErlangAtom "bytes", tup_el_2532]
  in let tup_el_2536 = toErl 128
  in let tup_el_2540 = toErl 10
  in let tup_el_2547 = ErlangTuple [ErlangAtom "address"]
  in let
    tup_el_2550 = toErl "Arg0 := Arg1 - A no-op type conversion"
  in let
    head_2534 =
      ErlangTuple
        [ErlangAtom "ADDRESS_TO_CONTRACT", tup_el_2536,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2540,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "address_to_contract", tup_el_2547,
         ErlangAtom "contract", tup_el_2550]
  in let tup_el_2554 = toErl 129
  in let tup_el_2558 = toErl 100
  in let tup_el_2565 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2568 =
      toErl "Arg0 := BLS12_381.g1_neg(Arg1) - Negate a G1-value"
  in let
    head_2552 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G1_NEG", tup_el_2554, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2558,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g1_neg", tup_el_2565, ErlangAtom "tuple",
         tup_el_2568]
  in let tup_el_2572 = toErl 130
  in let tup_el_2576 = toErl 100
  in let tup_el_2583 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2586 =
      toErl
        "Arg0 := BLS12_381.g1_normalize(Arg1) - Normalize a G1-value"
  in let
    head_2570 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G1_NORM", tup_el_2572, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2576,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g1_norm", tup_el_2583, ErlangAtom "tuple",
         tup_el_2586]
  in let tup_el_2590 = toErl 131
  in let tup_el_2594 = toErl 2000
  in let tup_el_2601 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2604 =
      toErl
        "Arg0 := BLS12_381.g1_valid(Arg1) - Check if G1-value is a valid group member"
  in let
    head_2588 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G1_VALID", tup_el_2590,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2594,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g1_valid", tup_el_2601, ErlangAtom "bool",
         tup_el_2604]
  in let tup_el_2608 = toErl 132
  in let tup_el_2612 = toErl 30
  in let tup_el_2619 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2622 =
      toErl
        "Arg0 := BLS12_381.g1_is_zero(Arg1) - Check if G1-value is zero"
  in let
    head_2606 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G1_IS_ZERO", tup_el_2608,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2612,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g1_is_zero", tup_el_2619,
         ErlangAtom "bool", tup_el_2622]
  in let tup_el_2626 = toErl 133
  in let tup_el_2630 = toErl 100
  in let
    tup_el_2639 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2643 =
      toErl "Arg0 := BLS12_381.g1_add(Arg1, Arg2) - Add two G1-values"
  in let
    head_2624 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G1_ADD", tup_el_2626, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2630,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_g1_add", tup_el_2639, ErlangAtom "tuple",
         tup_el_2643]
  in let tup_el_2647 = toErl 134
  in let tup_el_2651 = toErl 1000
  in let
    tup_el_2660 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2664 =
      toErl
        "Arg0 := BLS12_381.g1_mul(Arg1, Arg2) - Scalar multiplication for a G1-value (Arg1), and an Fr-value"
  in let
    head_2645 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G1_MUL", tup_el_2647, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2651,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_g1_mul", tup_el_2660, ErlangAtom "tuple",
         tup_el_2664]
  in let tup_el_2668 = toErl 135
  in let tup_el_2672 = toErl 100
  in let tup_el_2679 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2682 =
      toErl "Arg0 := BLS12_381.g2_neg(Arg1) - Negate a G2-value"
  in let
    head_2666 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G2_NEG", tup_el_2668, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2672,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g2_neg", tup_el_2679, ErlangAtom "tuple",
         tup_el_2682]
  in let tup_el_2686 = toErl 136
  in let tup_el_2690 = toErl 100
  in let tup_el_2697 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2700 =
      toErl
        "Arg0 := BLS12_381.g2_normalize(Arg1) - Normalize a G2-value"
  in let
    head_2684 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G2_NORM", tup_el_2686, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2690,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g2_norm", tup_el_2697, ErlangAtom "tuple",
         tup_el_2700]
  in let tup_el_2704 = toErl 137
  in let tup_el_2708 = toErl 2000
  in let tup_el_2715 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2718 =
      toErl
        "Arg0 := BLS12_381.g2_valid(Arg1) - Check if G2-value is a valid group member"
  in let
    head_2702 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G2_VALID", tup_el_2704,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2708,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g2_valid", tup_el_2715, ErlangAtom "bool",
         tup_el_2718]
  in let tup_el_2722 = toErl 138
  in let tup_el_2726 = toErl 30
  in let tup_el_2733 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2736 =
      toErl
        "Arg0 := BLS12_381.g2_is_zero(Arg1) - Check if G2-value is zero"
  in let
    head_2720 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G2_IS_ZERO", tup_el_2722,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2726,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_g2_is_zero", tup_el_2733,
         ErlangAtom "bool", tup_el_2736]
  in let tup_el_2740 = toErl 139
  in let tup_el_2744 = toErl 100
  in let
    tup_el_2753 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2757 =
      toErl "Arg0 := BLS12_381.g2_add(Arg1, Arg2) - Add two G2-values"
  in let
    head_2738 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G2_ADD", tup_el_2740, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2744,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_g2_add", tup_el_2753, ErlangAtom "tuple",
         tup_el_2757]
  in let tup_el_2761 = toErl 140
  in let tup_el_2765 = toErl 1000
  in let
    tup_el_2774 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2778 =
      toErl
        "Arg0 := BLS12_381.g2_mul(Arg1, Arg2) - Scalar multiplication for a G2-value (Arg2), and an Fr-value"
  in let
    head_2759 =
      ErlangTuple
        [ErlangAtom "BLS12_381_G2_MUL", tup_el_2761, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2765,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_g2_mul", tup_el_2774, ErlangAtom "tuple",
         tup_el_2778]
  in let tup_el_2782 = toErl 141
  in let tup_el_2786 = toErl 100
  in let tup_el_2793 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2796 =
      toErl "Arg0 := BLS12_381.gt_inv(Arg1) - Invert a GT-value"
  in let
    head_2780 =
      ErlangTuple
        [ErlangAtom "BLS12_381_GT_INV", tup_el_2782, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2786,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_gt_inv", tup_el_2793, ErlangAtom "tuple",
         tup_el_2796]
  in let tup_el_2800 = toErl 142
  in let tup_el_2804 = toErl 100
  in let
    tup_el_2813 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2817 =
      toErl "Arg0 := BLS12_381.gt_add(Arg1, Arg2) - Add two GT-values"
  in let
    head_2798 =
      ErlangTuple
        [ErlangAtom "BLS12_381_GT_ADD", tup_el_2800, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2804,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_gt_add", tup_el_2813, ErlangAtom "tuple",
         tup_el_2817]
  in let tup_el_2821 = toErl 143
  in let tup_el_2825 = toErl 100
  in let
    tup_el_2834 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2838 =
      toErl
        "Arg0 := BLS12_381.gt_mul(Arg1, Arg2) - Multiply two GT-values"
  in let
    head_2819 =
      ErlangTuple
        [ErlangAtom "BLS12_381_GT_MUL", tup_el_2821, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2825,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_gt_mul", tup_el_2834, ErlangAtom "tuple",
         tup_el_2838]
  in let tup_el_2842 = toErl 144
  in let tup_el_2846 = toErl 2000
  in let
    tup_el_2855 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2859 =
      toErl
        "Arg0 := BLS12_381.gt_pow(Arg1, Arg2) - Scalar exponentiation for a GT-value (Arg2), and an Fr-value"
  in let
    head_2840 =
      ErlangTuple
        [ErlangAtom "BLS12_381_GT_POW", tup_el_2842, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2846,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_gt_pow", tup_el_2855, ErlangAtom "tuple",
         tup_el_2859]
  in let tup_el_2863 = toErl 145
  in let tup_el_2867 = toErl 30
  in let tup_el_2874 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2877 =
      toErl
        "Arg0 := BLS12_381.gt_is_one(Arg1) - Check if a GT value is \"one\""
  in let
    head_2861 =
      ErlangTuple
        [ErlangAtom "BLS12_381_GT_IS_ONE", tup_el_2863,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2867,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_gt_is_one", tup_el_2874, ErlangAtom "bool",
         tup_el_2877]
  in let tup_el_2881 = toErl 146
  in let tup_el_2885 = toErl 12000
  in let
    tup_el_2894 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2898 =
      toErl
        "Arg0 := BLS12_381.pairing(Arg1, Arg2) - Find the pairing of a G1-value (Arg1) and a G2-value (Arg2)"
  in let
    head_2879 =
      ErlangTuple
        [ErlangAtom "BLS12_381_PAIRING", tup_el_2881, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_2885,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_pairing", tup_el_2894, ErlangAtom "tuple",
         tup_el_2898]
  in let tup_el_2902 = toErl 147
  in let tup_el_2906 = toErl 5000
  in let
    tup_el_2915 =
      ErlangTuple [ErlangAtom "tuple", ErlangAtom "tuple"]
  in let
    tup_el_2919 =
      toErl
        "Arg0 := BLS12_381.miller_loop(Arg1, Arg2) - Do the Miller-loop step of pairing for a G1-value (Arg1) and a G2-value (Arg2)"
  in let
    head_2900 =
      ErlangTuple
        [ErlangAtom "BLS12_381_MILLER_LOOP", tup_el_2902,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2906,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a")
              (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
         ErlangAtom "bls12_381_miller_loop", tup_el_2915,
         ErlangAtom "tuple", tup_el_2919]
  in let tup_el_2923 = toErl 148
  in let tup_el_2927 = toErl 7000
  in let tup_el_2934 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2937 =
      toErl
        "Arg0 := BLS12_381.final_exp(Arg1) - Do the final exponentiation in pairing"
  in let
    head_2921 =
      ErlangTuple
        [ErlangAtom "BLS12_381_FINAL_EXP", tup_el_2923,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2927,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_final_exp", tup_el_2934,
         ErlangAtom "tuple", tup_el_2937]
  in let tup_el_2941 = toErl 149
  in let tup_el_2945 = toErl 30
  in let tup_el_2952 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2955 =
      toErl
        "Arg0 := to_montgomery(Arg1) - Convert (Big)integer to montgomery representation (32 bytes)"
  in let
    head_2939 =
      ErlangTuple
        [ErlangAtom "BLS12_381_INT_TO_FR", tup_el_2941,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2945,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_int_to_fr", tup_el_2952,
         ErlangAtom "tuple", tup_el_2955]
  in let tup_el_2959 = toErl 150
  in let tup_el_2963 = toErl 30
  in let tup_el_2970 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2973 =
      toErl
        "Arg0 := to_montgomery(Arg1) - Convert (Big)integer to montgomery representation (48 bytes)"
  in let
    head_2957 =
      ErlangTuple
        [ErlangAtom "BLS12_381_INT_TO_FP", tup_el_2959,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2963,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_int_to_fp", tup_el_2970,
         ErlangAtom "tuple", tup_el_2973]
  in let tup_el_2977 = toErl 151
  in let tup_el_2981 = toErl 30
  in let tup_el_2988 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_2991 =
      toErl
        "Arg0 := from_montgomery(Arg1) - Convert montgomery representation (32 bytes) to integer"
  in let
    head_2975 =
      ErlangTuple
        [ErlangAtom "BLS12_381_FR_TO_INT", tup_el_2977,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2981,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_fr_to_int", tup_el_2988,
         ErlangAtom "tuple", tup_el_2991]
  in let tup_el_2995 = toErl 152
  in let tup_el_2999 = toErl 30
  in let tup_el_3006 = ErlangTuple [ErlangAtom "tuple"]
  in let
    tup_el_3009 =
      toErl
        "Arg0 := from_montgomery(Arg1) - Convert montgomery representation (48 bytes) to integer"
  in let
    head_2993 =
      ErlangTuple
        [ErlangAtom "BLS12_381_FP_TO_INT", tup_el_2995,
         ErlangAtom "false", ErlangAtom "true", ErlangAtom "true",
         tup_el_2999,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "bls12_381_fp_to_int", tup_el_3006,
         ErlangAtom "tuple", tup_el_3009]
  in let tup_el_3013 = toErl 153
  in let tup_el_3017 = toErl 100
  in let tup_el_3024 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_3027 =
      toErl "Lookup the name of Arg0. Returns option(AENS.name)"
  in let
    head_3011 =
      ErlangTuple
        [ErlangAtom "AENS_LOOKUP", tup_el_3013, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_3017,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "aens_lookup", tup_el_3024, ErlangAtom "variant",
         tup_el_3027]
  in let tup_el_3031 = toErl 154
  in let tup_el_3035 = toErl 100
  in let tup_el_3042 = ErlangTuple [ErlangAtom "oracle"]
  in let tup_el_3045 = toErl "Arg0 := expiry block for oracle Arg1"
  in let
    head_3029 =
      ErlangTuple
        [ErlangAtom "ORACLE_EXPIRY", tup_el_3031, ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "true", tup_el_3035,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "oracle_expiry", tup_el_3042, ErlangAtom "int",
         tup_el_3045]
  in let tup_el_3049 = toErl 155
  in let tup_el_3053 = toErl 100
  in let tup_el_3058 = ErlangTuple []
  in let
    tup_el_3060 =
      toErl
        "If in GA authentication context return Some(Tx) otherwise None."
  in let
    head_3047 =
      ErlangTuple
        [ErlangAtom "AUTH_TX", tup_el_3049, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3053,
         ErlangCons (ErlangAtom "a") ErlangEmptyList,
         ErlangAtom "auth_tx", tup_el_3058, ErlangAtom "variant",
         tup_el_3060]
  in let tup_el_3064 = toErl 156
  in let tup_el_3068 = toErl 100
  in let tup_el_3075 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_3078 =
      toErl "Arg0 := string converted to list of characters"
  in let
    head_3062 =
      ErlangTuple
        [ErlangAtom "STR_TO_LIST", tup_el_3064, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3068,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "str_to_list", tup_el_3075, ErlangAtom "list",
         tup_el_3078]
  in let tup_el_3082 = toErl 157
  in let tup_el_3086 = toErl 100
  in let tup_el_3093 = ErlangTuple [ErlangAtom "list"]
  in let
    tup_el_3096 =
      toErl "Arg0 := string converted from list of characters"
  in let
    head_3080 =
      ErlangTuple
        [ErlangAtom "STR_FROM_LIST", tup_el_3082, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3086,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "str_from_list", tup_el_3093, ErlangAtom "string",
         tup_el_3096]
  in let tup_el_3100 = toErl 158
  in let tup_el_3104 = toErl 100
  in let tup_el_3111 = ErlangTuple [ErlangAtom "string"]
  in let tup_el_3114 = toErl "Arg0 := to_upper(string)"
  in let
    head_3098 =
      ErlangTuple
        [ErlangAtom "STR_TO_UPPER", tup_el_3100, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3104,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "str_to_upper", tup_el_3111, ErlangAtom "string",
         tup_el_3114]
  in let tup_el_3118 = toErl 159
  in let tup_el_3122 = toErl 100
  in let tup_el_3129 = ErlangTuple [ErlangAtom "string"]
  in let tup_el_3132 = toErl "Arg0 := to_lower(string)"
  in let
    head_3116 =
      ErlangTuple
        [ErlangAtom "STR_TO_LOWER", tup_el_3118, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3122,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "str_to_lower", tup_el_3129, ErlangAtom "string",
         tup_el_3132]
  in let tup_el_3136 = toErl 160
  in let tup_el_3140 = toErl 10
  in let tup_el_3147 = ErlangTuple [ErlangAtom "char"]
  in let
    tup_el_3150 =
      toErl "Arg0 := integer representation of UTF-8 character"
  in let
    head_3134 =
      ErlangTuple
        [ErlangAtom "CHAR_TO_INT", tup_el_3136, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3140,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "char_to_int", tup_el_3147, ErlangAtom "int",
         tup_el_3150]
  in let tup_el_3154 = toErl 161
  in let tup_el_3158 = toErl 10
  in let tup_el_3165 = ErlangTuple [ErlangAtom "int"]
  in let
    tup_el_3168 =
      toErl
        "Arg0 := Some(UTF-8 character) from integer if valid, None if not valid."
  in let
    head_3152 =
      ErlangTuple
        [ErlangAtom "CHAR_FROM_INT", tup_el_3154, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3158,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "a") ErlangEmptyList),
         ErlangAtom "char_from_int", tup_el_3165, ErlangAtom "variant",
         tup_el_3168]
  in let tup_el_3172 = toErl 162
  in let tup_el_3176 = toErl 100
  in let
    tup_el_3193 =
      ErlangTuple
        [ErlangAtom "contract", ErlangAtom "string",
         ErlangAtom "typerep", ErlangAtom "typerep", ErlangAtom "integer",
         ErlangAtom "integer", ErlangAtom "bool"]
  in let
    tup_el_3202 =
      toErl
        "Potentially protected remote call. Arg5 is protected flag, otherwise as CALL_GR."
  in let
    head_3170 =
      ErlangTuple
        [ErlangAtom "CALL_PGR", tup_el_3172, ErlangAtom "true",
         ErlangAtom "false", ErlangAtom "true", tup_el_3176,
         ErlangCons (ErlangAtom "a")
           (ErlangCons (ErlangAtom "is")
              (ErlangCons (ErlangAtom "a")
                 (ErlangCons (ErlangAtom "a")
                    (ErlangCons (ErlangAtom "a")
                       (ErlangCons (ErlangAtom "a")
                          (ErlangCons (ErlangAtom "a") ErlangEmptyList)))))),
         ErlangAtom "call_pgr", tup_el_3193, ErlangAtom "variant",
         tup_el_3202]
  in let tup_el_3206 = toErl 250
  in let tup_el_3210 = toErl 10
  in let tup_el_3213 = ErlangTuple []
  in let
    tup_el_3215 = toErl "Mark the current contract for deactivation."
  in let
    head_3204 =
      ErlangTuple
        [ErlangAtom "DEACTIVATE", tup_el_3206, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3210,
         ErlangEmptyList, ErlangAtom "deactivate", tup_el_3213,
         ErlangAtom "none", tup_el_3215]
  in let tup_el_3219 = toErl 251
  in let tup_el_3223 = toErl 10
  in let tup_el_3228 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_3231 =
      toErl
        "Abort execution (dont use all gas) with error message in Arg0."
  in let
    head_3217 =
      ErlangTuple
        [ErlangAtom "ABORT", tup_el_3219, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_3223,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "abort",
         tup_el_3228, ErlangAtom "none", tup_el_3231]
  in let tup_el_3235 = toErl 252
  in let tup_el_3239 = toErl 10
  in let tup_el_3244 = ErlangTuple [ErlangAtom "string"]
  in let
    tup_el_3247 =
      toErl
        "Abort execution (use upp all gas) with error message in Arg0."
  in let
    head_3233 =
      ErlangTuple
        [ErlangAtom "EXIT", tup_el_3235, ErlangAtom "true",
         ErlangAtom "true", ErlangAtom "true", tup_el_3239,
         ErlangCons (ErlangAtom "a") ErlangEmptyList, ErlangAtom "exit",
         tup_el_3244, ErlangAtom "none", tup_el_3247]
  in let tup_el_3251 = toErl 253
  in let tup_el_3255 = toErl 1
  in let tup_el_3258 = ErlangTuple []
  in let tup_el_3260 = toErl "The no op. does nothing."
  in let
    head_3249 =
      ErlangTuple
        [ErlangAtom "NOP", tup_el_3251, ErlangAtom "false",
         ErlangAtom "true", ErlangAtom "true", tup_el_3255,
         ErlangEmptyList, ErlangAtom "nop", tup_el_3258,
         ErlangAtom "none", tup_el_3260]
  in
    ErlangCons head_0
      (ErlangCons head_13
         (ErlangCons head_29
            (ErlangCons head_45
               (ErlangCons head_73
                  (ErlangCons head_89
                     (ErlangCons head_120
                        (ErlangCons head_136
                           (ErlangCons head_155
                              (ErlangCons head_177
                                 (ErlangCons head_202
                                    (ErlangCons head_223
                                       (ErlangCons head_238
                                          (ErlangCons head_254
                                             (ErlangCons head_268
                                                (ErlangCons head_284
                                                   (ErlangCons head_300
                                                      (ErlangCons head_314
                                                         (ErlangCons head_330
                                                            (ErlangCons head_344
                                                               (ErlangCons
                                                                  head_360
                                                                  (ErlangCons
                                                                     head_381
                                                                     (ErlangCons
                                                                        head_402
                                                                        (ErlangCons
                                                                           head_423
                                                                           (ErlangCons
                                                                              head_444
                                                                              (ErlangCons
                                                                                 head_465
                                                                                 (ErlangCons
                                                                                    head_486
                                                                                    (ErlangCons
                                                                                       head_504
                                                                                       (ErlangCons
                                                                                          head_522
                                                                                          (ErlangCons
                                                                                             head_540
                                                                                             (ErlangCons
                                                                                                head_558
                                                                                                (ErlangCons
                                                                                                   head_579
                                                                                                   (ErlangCons
                                                                                                      head_600
                                                                                                      (ErlangCons
                                                                                                         head_621
                                                                                                         (ErlangCons
                                                                                                            head_642
                                                                                                            (ErlangCons
                                                                                                               head_663
                                                                                                               (ErlangCons
                                                                                                                  head_684
                                                                                                                  (ErlangCons
                                                                                                                     head_705
                                                                                                                     (ErlangCons
                                                                                                                        head_726
                                                                                                                        (ErlangCons
                                                                                                                           head_744
                                                                                                                           (ErlangCons
                                                                                                                              head_762
                                                                                                                              (ErlangCons
                                                                                                                                 head_783
                                                                                                                                 (ErlangCons
                                                                                                                                    head_807
                                                                                                                                    (ErlangCons
                                                                                                                                       head_822
                                                                                                                                       (ErlangCons
                                                                                                                                          head_843
                                                                                                                                          (ErlangCons
                                                                                                                                             head_867
                                                                                                                                             (ErlangCons
                                                                                                                                                head_891
                                                                                                                                                (ErlangCons
                                                                                                                                                   head_912
                                                                                                                                                   (ErlangCons
                                                                                                                                                      head_933
                                                                                                                                                      (ErlangCons
                                                                                                                                                         head_959
                                                                                                                                                         (ErlangCons
                                                                                                                                                            head_977
                                                                                                                                                            (ErlangCons
                                                                                                                                                               head_995
                                                                                                                                                               (ErlangCons
                                                                                                                                                                  head_1013
                                                                                                                                                                  (ErlangCons
                                                                                                                                                                     head_1034
                                                                                                                                                                     (ErlangCons
                                                                                                                                                                        head_1052
                                                                                                                                                                        (ErlangCons
                                                                                                                                                                           head_1070
                                                                                                                                                                           (ErlangCons
                                                                                                                                                                              head_1088
                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                 head_1103
                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                    head_1124
                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                       head_1145
                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                          head_1163
                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                             head_1181
                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                head_1199
                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                   head_1217
                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                      head_1235
                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                         head_1253
                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                            head_1274
                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                               head_1295
                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                  head_1313
                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                     head_1337
                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                        head_1358
                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                           head_1379
                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                              head_1392
                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                 head_1407
                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                    head_1420
                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                       head_1435
                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                          head_1453
                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                             head_1474
                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                head_1495
                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                   head_1516
                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                      head_1534
                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                         head_1555
                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                            head_1576
                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                               head_1597
                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                  head_1612
                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                     head_1627
                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                        head_1642
                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                           head_1660
                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                              head_1675
                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                 head_1690
                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                    head_1705
                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                       head_1720
                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                          head_1735
                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                             head_1750
                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                head_1765
                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                   head_1780
                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                      head_1795
                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                         head_1811
                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                            head_1830
                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                               head_1852
                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                  head_1877
                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                     head_1905
                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                        head_1924
                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                           head_1957
                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                              head_1993
                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                 head_2024
                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                    head_2046
                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                       head_2073
                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                          head_2100
                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                             head_2118
                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                head_2142
                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                   head_2164
                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                      head_2192
                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                         head_2223
                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                            head_2248
                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                               head_2270
                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                  head_2288
                                                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                     head_2312
                                                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                        head_2336
                                                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                           head_2354
                                                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                              head_2369
                                                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                 head_2393
                                                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                    head_2420
                                                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                       head_2438
                                                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                          head_2456
                                                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                             head_2474
                                                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                head_2489
                                                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                   head_2513
                                                                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                      head_2534
                                                                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                         head_2552
                                                                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                            head_2570
                                                                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                               head_2588
                                                                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                  head_2606
                                                                                                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                     head_2624
                                                                                                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                        head_2645
                                                                                                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                           head_2666
                                                                                                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                              head_2684
                                                                                                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                 head_2702
                                                                                                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                    head_2720
                                                                                                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                       head_2738
                                                                                                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                          head_2759
                                                                                                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                             head_2780
                                                                                                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                head_2798
                                                                                                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                   head_2819
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                      head_2840
                                                                                                                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                         head_2861
                                                                                                                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                            head_2879
                                                                                                                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                               head_2900
                                                                                                                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  head_2921
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     head_2939
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        head_2957
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           head_2975
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              head_2993
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 head_3011
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    head_3029
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       head_3047
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          head_3062
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             head_3080
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                head_3098
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   head_3116
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      head_3134
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         head_3152
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            head_3170
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               head_3204
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  head_3217
rlangCons
head_3233
rlangCons
head_3249
rlangEmptyList))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
erlps__ops_defs__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate_header_file__2 :: ErlangFun
erlps__generate_header_file__2 [filename_0, ops_1] =
  let
    matchExpr_7 =
      BIF.do_remote_fun_call "File" "erlps__open__2"
        [filename_0, ErlangCons (ErlangAtom "write") ErlangEmptyList]
  in
    case matchExpr_7 of
      (ErlangTuple [(ErlangAtom "ok"), file_6]) ->
        let   
          arg_8 =
            flmap
              (\ lc_11 ->
                 let lcRet_12 = erlps__gen_defines__1 [lc_11]
                 in ErlangCons lcRet_12 ErlangEmptyList)
              ops_1
        in let
          defines_14 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_8]
        in let arg_16 = toErl "~s"
        in let arg_19 = toErl "Provides opcode defines.\n"
        in let head_18 = erlps__prelude__1 [arg_19]
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_6, arg_16, ErlangCons head_18 ErlangEmptyList]
        in let arg_22 = toErl "%% FATE opcodes\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_6, arg_22, ErlangCons defines_14 ErlangEmptyList]
        in let arg_27 = toErl "~s"
        in let
          head_29 =
            toErl
              "-define(\'FUNCTION\'                , 16#fe).\n-define(\'EXTEND\'                  , 16#ff).\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_6, arg_27, ErlangCons head_29 ErlangEmptyList]
        in BIF.do_remote_fun_call "File" "erlps__close__1" [file_6]
      _ -> EXC.badmatch matchExpr_7
erlps__generate_header_file__2 [arg_32, arg_33] =
  EXC.function_clause unit
erlps__generate_header_file__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate_opcodes_ops__4 :: ErlangFun
erlps__generate_opcodes_ops__4 [modulename_0, hrlfile_1,
                                srcdir_2, ops_3]
  =
  let    lop_6 = BIF.erlang__atom_to_list__1 [modulename_0]
  in let rop_8 = toErl ".erl"
  in let rop_5 = BIF.erlang__op_append [lop_6, rop_8]
  in let filename_9 = BIF.erlang__op_append [srcdir_2, rop_5]
  in let
    matchExpr_15 =
      BIF.do_remote_fun_call "File" "erlps__open__2"
        [filename_9, ErlangCons (ErlangAtom "write") ErlangEmptyList]
  in
    case matchExpr_15 of
      (ErlangTuple [(ErlangAtom "ok"), file_14]) ->
        let   
          arg_16 =
            flmap
              (\ lc_19 ->
                 let lcRet_20 = erlps__gen_mnemonic__1 [lc_19]
                 in ErlangCons lcRet_20 ErlangEmptyList)
              ops_3
        in let
          mnemonic_22 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_16]
        in let
          arg_23 =
            flmap
              (\ lc_26 ->
                 let lcRet_27 = erlps__gen_m_to_op__1 [lc_26]
                 in ErlangCons lcRet_27 ErlangEmptyList)
              ops_3
        in let
          toop_29 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_23]
        in let
          arg_30 =
            flmap
              (\ lc_33 ->
                 let lcRet_34 = erlps__gen_args__1 [lc_33]
                 in ErlangCons lcRet_34 ErlangEmptyList)
              ops_3
        in let
          args_36 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_30]
        in let
          arg_37 =
            flmap
              (\ lc_40 ->
                 let lcRet_41 = erlps__gen_bb__1 [lc_40]
                 in ErlangCons lcRet_41 ErlangEmptyList)
              ops_3
        in let
          endbb_43 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_37]
        in let
          arg_44 =
            flmap
              (\ lc_47 ->
                 let lcRet_48 = erlps__gen_in_auth__1 [lc_47]
                 in ErlangCons lcRet_48 ErlangEmptyList)
              ops_3
        in let
          inauth_50 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_44]
        in let
          arg_51 =
            flmap
              (\ lc_54 ->
                 let lcRet_55 = erlps__gen_allowed_offchain__1 [lc_54]
                 in ErlangCons lcRet_55 ErlangEmptyList)
              ops_3
        in let
          offchain_57 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_51]
        in let
          arg_58 =
            flmap
              (\ lc_61 ->
                 let lcRet_62 = erlps__gen_gas_cost__1 [lc_61]
                 in ErlangCons lcRet_62 ErlangEmptyList)
              ops_3
        in let
          gascost_64 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_58]
        in let arg_66 = toErl "~s"
        in let arg_69 = toErl "Provides opcode primitives.\n"
        in let head_68 = erlps__prelude__1 [arg_69]
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_66, ErlangCons head_68 ErlangEmptyList]
        in let arg_72 = toErl "~s"
        in let
          head_78 =
            toErl
              "args/1\n        , end_bb/1\n        , in_auth/1\n        , allowed_offchain/1\n        , mnemonic/1\n        , m_to_op/1\n        , gas_cost/1\n"
        in let
          head_74 =
            erlps__ops_exports__3
              [modulename_0, hrlfile_1, ErlangCons head_78 ErlangEmptyList]
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_72, ErlangCons head_74 ErlangEmptyList]
        in let arg_82 = toErl "%% FATE mnemonics\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_82, ErlangCons mnemonic_22 ErlangEmptyList]
        in let
          arg_87 = toErl "mnemonic(Op) -> exit({bad_opcode, Op}).\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_87, ErlangEmptyList]
        in let arg_90 = toErl "%% FATE opcodes\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_90, ErlangCons toop_29 ErlangEmptyList]
        in let
          arg_95 = toErl "m_to_op(M) -> exit({bad_mnemonic, M}).\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_95, ErlangEmptyList]
        in let arg_98 = toErl "%% FATE numbers of args to op.\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_98, ErlangCons args_36 ErlangEmptyList]
        in let arg_103 = toErl "args(Op) -> exit({bad_opcode, Op}).\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_103, ErlangEmptyList]
        in let arg_106 = toErl "%% Does FATE Op end a Basic Block?\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_106, ErlangCons endbb_43 ErlangEmptyList]
        in let arg_111 = toErl "end_bb(_) -> false.\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_111, ErlangEmptyList]
        in let
          arg_114 =
            toErl "%% Is FATE Op allowed in GA Authentication context?\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_114, ErlangCons inauth_50 ErlangEmptyList]
        in let arg_119 = toErl "in_auth(_) -> false.\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_119, ErlangEmptyList]
        in let
          arg_122 =
            toErl
              "%% Is FATE Op allowed in a state channel offchain context?\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_122, ErlangCons offchain_57 ErlangEmptyList]
        in let arg_127 = toErl "allowed_offchain(_) -> false.\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_127, ErlangEmptyList]
        in let arg_130 = toErl "%% Base cost of operation\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_130, ErlangCons gascost_64 ErlangEmptyList]
        in let
          arg_135 = toErl "gas_cost(Op) -> exit({bad_opcode, Op}).\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_14, arg_135, ErlangEmptyList]
        in BIF.do_remote_fun_call "File" "erlps__close__1" [file_14]
      _ -> EXC.badmatch matchExpr_15
erlps__generate_opcodes_ops__4 [arg_138, arg_139, arg_140,
                                arg_141]
  =
  EXC.function_clause unit
erlps__generate_opcodes_ops__4 args =
  EXC.badarity (ErlangFun 4 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate_code_ops__3 :: ErlangFun
erlps__generate_code_ops__3 [modulename_0, srcdir_1, ops_2] =
  let    lop_5 = BIF.erlang__atom_to_list__1 [modulename_0]
  in let rop_7 = toErl ".erl"
  in let rop_4 = BIF.erlang__op_append [lop_5, rop_7]
  in let filename_8 = BIF.erlang__op_append [srcdir_1, rop_4]
  in let
    matchExpr_14 =
      BIF.do_remote_fun_call "File" "erlps__open__2"
        [filename_8, ErlangCons (ErlangAtom "write") ErlangEmptyList]
  in
    case matchExpr_14 of
      (ErlangTuple [(ErlangAtom "ok"), file_13]) ->
        let   
          arg_15 =
            flmap
              (\ lc_18 ->
                 let lcRet_19 = erlps__gen_type__1 [lc_18]
                 in ErlangCons lcRet_19 ErlangEmptyList)
              ops_2
        in let
          types_21 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_15]
        in let
          arg_22 =
            flmap
              (\ lc_25 ->
                 let lcRet_26 = erlps__gen_type_exports__1 [lc_25]
                 in ErlangCons lcRet_26 ErlangEmptyList)
              ops_2
        in let
          typeexports_28 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_22]
        in
          case ops_2 of
            (ErlangCons (ErlangMap map_29) restofops_31) | (DM.Just firsttype_30) <-
                                                             (Map.lookup
                                                                (ErlangAtom
                                                                   "type_name")
                                                                map_29) ->
              let   
                arg_33 =
                  flmap
                    (\ lc_36 ->
                       let lcRet_37 = erlps__gen_fate_code_type__1 [lc_36]
                       in ErlangCons lcRet_37 ErlangEmptyList)
                    restofops_31
              in let
                fatetypes_39 =
                  BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_33]
              in let
                arg_40 =
                  flmap
                    (\ lc_43 ->
                       let lcRet_44 = erlps__gen_constructor_exports__1 [lc_43]
                       in ErlangCons lcRet_44 ErlangEmptyList)
                    ops_2
              in let
                constructorexports_46 =
                  BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_40]
              in let
                arg_47 =
                  flmap
                    (\ lc_50 ->
                       let lcRet_51 = erlps__gen_constructors__1 [lc_50]
                       in ErlangCons lcRet_51 ErlangEmptyList)
                    ops_2
              in let
                constructors_53 =
                  BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_47]
              in let arg_55 = toErl "~s"
              in let
                arg_58 =
                  toErl
                    " Provide constructor functuions for Fate instructions.\n%%% Provide types and documentation for Fate instructions.\n"
              in let head_57 = erlps__prelude__1 [arg_58]
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_55, ErlangCons head_57 ErlangEmptyList]
              in let arg_61 = toErl "-module(~w).\n\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_61, ErlangCons modulename_0 ErlangEmptyList]
              in let
                arg_66 =
                  toErl
                    "-include_lib(\"aebytecode/include/aeb_fate_data.hrl\").\n\n-define(i(__X__), {immediate, __X__ }).\n\n-type fate_arg_immediate(T) :: {immediate, T}.\n-type fate_arg_var()        :: {var, integer()}.\n-type fate_arg_arg()        :: {arg, integer()}.\n-type fate_arg_stack()      :: {stack, 0}.\n-type fate_arg() :: fate_arg_immediate()\n                  | fate_arg_var()\n                  | fate_arg_arg()\n                  | fate_arg_stack().\n\n-type fate_arg_immediate() :: {immediate, aeb_fate_data:fate_type()}.\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_66, ErlangEmptyList]
              in let arg_69 = toErl "~s"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_69, ErlangCons types_21 ErlangEmptyList]
              in let
                arg_74 =
                  toErl "-type fate_code() :: ~s\n~s                   .\n\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_74,
                     ErlangCons firsttype_30
                       (ErlangCons fatetypes_39 ErlangEmptyList)]
              in let
                arg_81 =
                  toErl "-export_type([ fate_code/0\n~s            ]).\n\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_81, ErlangCons typeexports_28 ErlangEmptyList]
              in let arg_86 = toErl "-export([ foo/0\n~s       ]).\n\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_86,
                     ErlangCons constructorexports_46 ErlangEmptyList]
              in let arg_91 = toErl "~s\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_91,
                     ErlangCons constructors_53 ErlangEmptyList]
              in let arg_96 = toErl "foo() -> \"A temp hack.\".\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                    [file_13, arg_96, ErlangEmptyList]
              in BIF.do_remote_fun_call "File" "erlps__close__1" [file_13]
            _ -> EXC.badmatch ops_2
      _ -> EXC.badmatch matchExpr_14
erlps__generate_code_ops__3 [arg_99, arg_100, arg_101] =
  EXC.function_clause unit
erlps__generate_code_ops__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_type__1 :: ErlangFun
erlps__gen_type__1 [(ErlangMap map_0)]
  | (DM.Just type_2) <- (Map.lookup (ErlangAtom "type") map_0)
  , (DM.Just typename_1) <-
      (Map.lookup (ErlangAtom "type_name") map_0) =
  let    arg_4 = toErl "-type ~-29s :: ~s.\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4,
         ErlangCons typename_1 (ErlangCons type_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_type__1 [arg_10] = EXC.function_clause unit
erlps__gen_type__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_fate_code_type__1 :: ErlangFun
erlps__gen_fate_code_type__1 [(ErlangMap map_0)]
  | (DM.Just typename_1) <-
      (Map.lookup (ErlangAtom "type_name") map_0) =
  let    arg_3 = toErl "                   | ~s\n"
  in let
    arg_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons typename_1 ErlangEmptyList]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2]
erlps__gen_fate_code_type__1 [arg_7] = EXC.function_clause unit
erlps__gen_fate_code_type__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_type_exports__1 :: ErlangFun
erlps__gen_type_exports__1 [(ErlangMap map_0)]
  | (DM.Just typename_1) <-
      (Map.lookup (ErlangAtom "type_name") map_0) =
  let    arg_3 = toErl "             , ~s/0\n"
  in let rop_7 = toErl "()"
  in let head_5 = BIF.erlang__op_unAppend [typename_1, rop_7]
  in let
    arg_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons head_5 ErlangEmptyList]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2]
erlps__gen_type_exports__1 [arg_9] = EXC.function_clause unit
erlps__gen_type_exports__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_constructor_exports__1 :: ErlangFun
erlps__gen_constructor_exports__1 [(ErlangMap map_0)]
  | (DM.Just function_1) <-
      (Map.lookup (ErlangAtom "constructor_type") map_0) =
  let    arg_3 = toErl "        , ~s\n"
  in let
    arg_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons function_1 ErlangEmptyList]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2]
erlps__gen_constructor_exports__1 [arg_7] =
  EXC.function_clause unit
erlps__gen_constructor_exports__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_constructors__1 :: ErlangFun
erlps__gen_constructors__1 [(ErlangMap map_0)]
  | (DM.Just name_3) <- (Map.lookup (ErlangAtom "opname") map_0)
  , (DM.Just type_2) <- (Map.lookup (ErlangAtom "type_name") map_0)
  , (DM.Just (ErlangEmptyList)) <-
      (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just function_1) <-
      (Map.lookup (ErlangAtom "constructor") map_0) =
  let    arg_5 = toErl "-spec ~s() -> ~s.\n~s() ->\n    ~w.\n\n"
  in let
    arg_4 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_5,
         ErlangCons function_1
           (ErlangCons type_2
              (ErlangCons function_1 (ErlangCons name_3 ErlangEmptyList)))]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_4]
erlps__gen_constructors__1 [(ErlangMap map_0)]
  | (DM.Just name_4) <- (Map.lookup (ErlangAtom "opname") map_0)
  , (DM.Just type_3) <- (Map.lookup (ErlangAtom "type_name") map_0)
  , (DM.Just argspec_2) <- (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just function_1) <-
      (Map.lookup (ErlangAtom "constructor") map_0) =
  let    argtypespecs_6 = erlps__gen_arg_type_specs__1 [argspec_2]
  in let arg_7 = toErl 0
  in let args_9 = erlps__gen_arg_names__2 [arg_7, argspec_2]
  in let arg_10 = toErl 0
  in let useargs_12 = erlps__gen_arg_uses__2 [arg_10, argspec_2]
  in let
    arg_14 =
      toErl "-spec ~s(~s) -> ~s.\n~s(~s) ->\n    {~w, ~s}.\n\n"
  in let
    arg_13 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_14,
         ErlangCons function_1
           (ErlangCons argtypespecs_6
              (ErlangCons type_3
                 (ErlangCons function_1
                    (ErlangCons args_9
                       (ErlangCons name_4
                          (ErlangCons useargs_12 ErlangEmptyList))))))]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_13]
erlps__gen_constructors__1 [arg_30] = EXC.function_clause unit
erlps__gen_constructors__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_arg_type_specs__1 :: ErlangFun
erlps__gen_arg_type_specs__1 [(ErlangEmptyList)] =
  ErlangEmptyList
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "a") (ErlangEmptyList))]
  =
  toErl "fate_arg()"
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "is") (ErlangEmptyList))]
  =
  toErl "aeb_fate_data:fate_string()"
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "ii") (ErlangEmptyList))]
  =
  toErl "aeb_fate_data:fate_integer()"
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "li") (ErlangEmptyList))]
  =
  toErl "[aeb_fate_data:fate_integer()]"
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "t") (ErlangEmptyList))]
  =
  toErl "aeb_fate_data:fate_type_type()"
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "a") args_0)]
  =
  let    lop_1 = toErl "fate_arg(), "
  in let rop_2 = erlps__gen_arg_type_specs__1 [args_0]
  in BIF.erlang__op_append [lop_1, rop_2]
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "is") args_0)]
  =
  let    lop_1 = toErl "aeb_fate_data:fate_string(), "
  in let rop_2 = erlps__gen_arg_type_specs__1 [args_0]
  in BIF.erlang__op_append [lop_1, rop_2]
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "ii") args_0)]
  =
  let    lop_1 = toErl "aeb_fate_data:fate_integer(), "
  in let rop_2 = erlps__gen_arg_type_specs__1 [args_0]
  in BIF.erlang__op_append [lop_1, rop_2]
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "li") args_0)]
  =
  let    lop_1 = toErl "[aeb_fate_data:fate_integer()], "
  in let rop_2 = erlps__gen_arg_type_specs__1 [args_0]
  in BIF.erlang__op_append [lop_1, rop_2]
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "t") args_0)]
  =
  let    lop_1 = toErl "aeb_fate_data:fate_type_type(), "
  in let rop_2 = erlps__gen_arg_type_specs__1 [args_0]
  in BIF.erlang__op_append [lop_1, rop_2]
erlps__gen_arg_type_specs__1 [arg_4] = EXC.function_clause unit
erlps__gen_arg_type_specs__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_arg_names__2 :: ErlangFun
erlps__gen_arg_names__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__gen_arg_names__2 [n_0, (ErlangCons _ (ErlangEmptyList))] =
  let arg_1 = toErl "Arg~w"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__gen_arg_names__2 [n_0, (ErlangCons _ args_1)] =
  let    arg_3 = toErl "Arg~w, "
  in let
    lop_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons n_0 ErlangEmptyList]
  in let rop_10 = toErl 1
  in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
  in let rop_7 = erlps__gen_arg_names__2 [arg_8, args_1]
  in BIF.erlang__op_append [lop_2, rop_7]
erlps__gen_arg_names__2 [arg_12, arg_13] =
  EXC.function_clause unit
erlps__gen_arg_names__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_arg_uses__2 :: ErlangFun
erlps__gen_arg_uses__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "a") (ErlangEmptyList))]
  =
  let arg_1 = toErl "Arg~w"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "is") (ErlangEmptyList))]
  =
  let arg_1 = toErl "{immediate, Arg~w}"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "ii") (ErlangEmptyList))]
  =
  let arg_1 = toErl "{immediate, Arg~w}"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "li") (ErlangEmptyList))]
  =
  let arg_1 = toErl "{immediate, Arg~w}"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "t") (ErlangEmptyList))]
  =
  let arg_1 = toErl "Arg~w"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "a") args_1)]
  =
  let    arg_3 = toErl "Arg~w, "
  in let
    lop_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons n_0 ErlangEmptyList]
  in let rop_10 = toErl 1
  in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
  in let rop_7 = erlps__gen_arg_uses__2 [arg_8, args_1]
  in BIF.erlang__op_append [lop_2, rop_7]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "is") args_1)]
  =
  let    arg_3 = toErl "{immediate, Arg~w}, "
  in let
    lop_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons n_0 ErlangEmptyList]
  in let rop_10 = toErl 1
  in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
  in let rop_7 = erlps__gen_arg_uses__2 [arg_8, args_1]
  in BIF.erlang__op_append [lop_2, rop_7]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "ii") args_1)]
  =
  let    arg_3 = toErl "{immediate, Arg~w}, "
  in let
    lop_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons n_0 ErlangEmptyList]
  in let rop_10 = toErl 1
  in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
  in let rop_7 = erlps__gen_arg_uses__2 [arg_8, args_1]
  in BIF.erlang__op_append [lop_2, rop_7]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "li") args_1)]
  =
  let    arg_3 = toErl "[{immediate, I} || I <- Arg~w], "
  in let
    lop_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons n_0 ErlangEmptyList]
  in let rop_10 = toErl 1
  in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
  in let rop_7 = erlps__gen_arg_uses__2 [arg_8, args_1]
  in BIF.erlang__op_append [lop_2, rop_7]
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "t") args_1)]
  =
  let    arg_3 = toErl "Arg~w, "
  in let
    lop_2 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_3, ErlangCons n_0 ErlangEmptyList]
  in let rop_10 = toErl 1
  in let arg_8 = BIF.erlang__op_plus [n_0, rop_10]
  in let rop_7 = erlps__gen_arg_uses__2 [arg_8, args_1]
  in BIF.erlang__op_append [lop_2, rop_7]
erlps__gen_arg_uses__2 [arg_12, arg_13] =
  EXC.function_clause unit
erlps__gen_arg_uses__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__ops_exports__3 :: ErlangFun
erlps__ops_exports__3 [module_0, hrlfile_1, exports_2] =
  let   
    lop_5 =
      toErl
        "-module(~w).\n\n-export([ ~s         ]).\n\n-include_lib(\"aebytecode/"
  in let
    rop_8 =
      toErl
        "\").\n\n%%====================================================================\n%% API\n%%====================================================================\n"
  in let rop_6 = BIF.erlang__op_append [hrlfile_1, rop_8]
  in let arg_4 = BIF.erlang__op_append [lop_5, rop_6]
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4,
         ErlangCons module_0 (ErlangCons exports_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__ops_exports__3 [arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__ops_exports__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_mnemonic__1 :: ErlangFun
erlps__gen_mnemonic__1 [(ErlangMap map_0)]
  | (DM.Just macro_2) <- (Map.lookup (ErlangAtom "macro") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let    arg_4 = toErl "mnemonic(~24s) -> ~24w ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons macro_2 (ErlangCons name_1 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_mnemonic__1 [arg_10] = EXC.function_clause unit
erlps__gen_mnemonic__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_m_to_op__1 :: ErlangFun
erlps__gen_m_to_op__1 [(ErlangMap map_0)]
  | (DM.Just macro_2) <- (Map.lookup (ErlangAtom "macro") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let    arg_4 = toErl "m_to_op(~24w) -> ~24s ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons name_1 (ErlangCons macro_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_m_to_op__1 [arg_10] = EXC.function_clause unit
erlps__gen_m_to_op__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_args__1 :: ErlangFun
erlps__gen_args__1 [(ErlangMap map_0)]
  | (DM.Just arity_2) <- (Map.lookup (ErlangAtom "arity") map_0)
  , (DM.Just macro_1) <- (Map.lookup (ErlangAtom "macro") map_0) =
  let    arg_4 = toErl "args(~24s) -> ~2w ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons macro_1 (ErlangCons arity_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_args__1 [arg_10] = EXC.function_clause unit
erlps__gen_args__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_bb__1 :: ErlangFun
erlps__gen_bb__1 [(ErlangMap map_0)]
  | (DM.Just endbb_2) <- (Map.lookup (ErlangAtom "end_bb") map_0)
  , (DM.Just macro_1) <- (Map.lookup (ErlangAtom "macro") map_0) =
  let    arg_4 = toErl "end_bb(~24s) -> ~w ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons macro_1 (ErlangCons endbb_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_bb__1 [arg_10] = EXC.function_clause unit
erlps__gen_bb__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_in_auth__1 :: ErlangFun
erlps__gen_in_auth__1 [(ErlangMap map_0)]
  | (DM.Just inauth_2) <- (Map.lookup (ErlangAtom "in_auth") map_0)
  , (DM.Just macro_1) <- (Map.lookup (ErlangAtom "macro") map_0) =
  let    arg_4 = toErl "in_auth(~24s) -> ~w ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons macro_1 (ErlangCons inauth_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_in_auth__1 [arg_10] = EXC.function_clause unit
erlps__gen_in_auth__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_allowed_offchain__1 :: ErlangFun
erlps__gen_allowed_offchain__1 [(ErlangMap map_0)]
  | (DM.Just offchain_2) <-
      (Map.lookup (ErlangAtom "offchain") map_0)
  , (DM.Just macro_1) <- (Map.lookup (ErlangAtom "macro") map_0) =
  let    arg_4 = toErl "allowed_offchain(~24s) -> ~w ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4,
         ErlangCons macro_1 (ErlangCons offchain_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_allowed_offchain__1 [arg_10] =
  EXC.function_clause unit
erlps__gen_allowed_offchain__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_gas_cost__1 :: ErlangFun
erlps__gen_gas_cost__1 [(ErlangMap map_0)]
  | (DM.Just gas_2) <- (Map.lookup (ErlangAtom "gas") map_0)
  , (DM.Just macro_1) <- (Map.lookup (ErlangAtom "macro") map_0) =
  let    arg_4 = toErl "gas_cost(~24s) -> ~w ;\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons macro_1 (ErlangCons gas_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_gas_cost__1 [arg_10] = EXC.function_clause unit
erlps__gen_gas_cost__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__prelude__1 :: ErlangFun
erlps__prelude__1 [doc_0] =
  let   
    lop_1 =
      toErl
        "%%%-------------------------------------------------------------------\n%%% @copyright (C) 2019, Aeternity Anstalt\n%%%\n%%%   === ===  N O T E :   This file is generated do not edit. === ===\n%%%\n%%% Source is in aeb_fate_generate_ops.erl\n%%% @doc\n%%%     "
  in let
    rop_4 =
      toErl
        "%%% @end\n%%%-------------------------------------------------------------------\n\n"
  in let rop_2 = BIF.erlang__op_append [doc_0, rop_4]
  in BIF.erlang__op_append [lop_1, rop_2]
erlps__prelude__1 [arg_5] = EXC.function_clause unit
erlps__prelude__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_defines__1 :: ErlangFun
erlps__gen_defines__1 [(ErlangMap map_0)]
  | (DM.Just opcode_2) <- (Map.lookup (ErlangAtom "opcode") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let    arg_4 = toErl "-define(~-29w, 16#~2.16.0b).\n"
  in let
    arg_3 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_4, ErlangCons name_1 (ErlangCons opcode_2 ErlangEmptyList)]
  in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
erlps__gen_defines__1 [arg_10] = EXC.function_clause unit
erlps__gen_defines__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen__1 :: ErlangFun
erlps__gen__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__gen__1 [(ErlangCons (ErlangTuple [opname_0, opcode_1,
                                         endbb_2, inauth_3, allowedoffchain_4,
                                         gas_5, fateformat_6, constructor_7,
                                         argtypes_8, restype_9,
                                         doc_10]) rest_11)]
  =
  let    arity_13 = BIF.erlang__length__1 [fateformat_6]
  in let name_15 = BIF.erlang__atom_to_list__1 [opname_0]
  in let
    lowername_17 =
      BIF.do_remote_fun_call "String" "erlps__to_lower__1" [name_15]
  in let lop_18 = toErl "fate_"
  in let rop_21 = toErl "()"
  in let rop_19 = BIF.erlang__op_append [lowername_17, rop_21]
  in let typename_22 = BIF.erlang__op_append [lop_18, rop_19]
  in let lop_23 = toErl "?"
  in let macro_25 = BIF.erlang__op_append [lop_23, name_15]
  in let
    type_39 =
      case fateformat_6 of
        (ErlangEmptyList) ->
          let arg_27 = toErl "~w"
          in
            BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
              [arg_27, ErlangCons opname_0 ErlangEmptyList]
        args_31 ->
          let    arg_32 = toErl "{~w, ~s}"
          in let head_36 = erlps__expand_types__1 [args_31]
          in
            BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
              [arg_32,
               ErlangCons opname_0 (ErlangCons head_36 ErlangEmptyList)]
  in let lop_40 = BIF.erlang__atom_to_list__1 [constructor_7]
  in let lop_43 = toErl "/"
  in let arg_45 = toErl "~w"
  in let
    rop_44 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_45, ErlangCons arity_13 ErlangEmptyList]
  in let rop_42 = BIF.erlang__op_append [lop_43, rop_44]
  in let
    constructortype_49 = BIF.erlang__op_append [lop_40, rop_42]
  in let
    head_50 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "opname") opname_0,
            DT.Tuple (ErlangAtom "opcode") opcode_1,
            DT.Tuple (ErlangAtom "arity") arity_13,
            DT.Tuple (ErlangAtom "end_bb") endbb_2,
            DT.Tuple (ErlangAtom "in_auth") inauth_3,
            DT.Tuple (ErlangAtom "offchain") allowedoffchain_4,
            DT.Tuple (ErlangAtom "format") fateformat_6,
            DT.Tuple (ErlangAtom "macro") macro_25,
            DT.Tuple (ErlangAtom "type_name") typename_22,
            DT.Tuple (ErlangAtom "doc") doc_10,
            DT.Tuple (ErlangAtom "gas") gas_5,
            DT.Tuple (ErlangAtom "type") type_39,
            DT.Tuple (ErlangAtom "constructor") constructor_7,
            DT.Tuple (ErlangAtom "constructor_type") constructortype_49,
            DT.Tuple (ErlangAtom "arg_types") argtypes_8,
            DT.Tuple (ErlangAtom "res_type") restype_9])
  in let tail_83 = erlps__gen__1 [rest_11]
  in ErlangCons head_50 tail_83
erlps__gen__1 [arg_85] = EXC.function_clause unit
erlps__gen__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__expand_types__1 :: ErlangFun
erlps__expand_types__1 [(ErlangEmptyList)] = toErl ""
erlps__expand_types__1 [(ErlangCons t_0 (ErlangEmptyList))] =
  erlps__expand_type__1 [t_0]
erlps__expand_types__1 [(ErlangCons t_0 ts_1)] =
  let    lop_2 = erlps__expand_type__1 [t_0]
  in let lop_5 = toErl ", "
  in let rop_6 = erlps__expand_types__1 [ts_1]
  in let rop_4 = BIF.erlang__op_append [lop_5, rop_6]
  in BIF.erlang__op_append [lop_2, rop_4]
erlps__expand_types__1 [arg_8] = EXC.function_clause unit
erlps__expand_types__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__expand_type__1 :: ErlangFun
erlps__expand_type__1 [(ErlangAtom "a")] = toErl "fate_arg()"
erlps__expand_type__1 [(ErlangAtom "is")] =
  toErl "fate_arg_immediate(aeb_fate_data:fate_string())"
erlps__expand_type__1 [(ErlangAtom "ii")] =
  toErl "fate_arg_immediate(aeb_fate_data:fate_integer())"
erlps__expand_type__1 [(ErlangAtom "li")] =
  toErl "fate_arg_immediate([aeb_fate_data:fate_integer()])"
erlps__expand_type__1 [(ErlangAtom "t")] =
  toErl "aeb_fate_data:fate_type_type()"
erlps__expand_type__1 [arg_0] = EXC.function_clause unit
erlps__expand_type__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate_scanner__4 :: ErlangFun
erlps__generate_scanner__4 [templatefile_0, outfile_1, path_2,
                            ops_3]
  =
  let   
    arg_4 =
      BIF.do_remote_fun_call "Filename" "erlps__join__2"
        [path_2, templatefile_0]
  in let
    matchExpr_8 =
      BIF.do_remote_fun_call "File" "erlps__read_file__1" [arg_4]
  in
    case matchExpr_8 of
      (ErlangTuple [(ErlangAtom "ok"), template_7]) ->
        let   
          arg_9 =
            flmap
              (\ lc_12 ->
                 let lcRet_13 = erlps__gen_token__1 [lc_12]
                 in ErlangCons lcRet_13 ErlangEmptyList)
              ops_3
        in let
          tokens_15 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_9]
        in let
          newfile_18 =
            erlps__insert_tokens_in_template__2 [template_7, tokens_15]
        in let
          arg_19 =
            BIF.do_remote_fun_call "Filename" "erlps__join__2"
              [path_2, outfile_1]
        in
          BIF.do_remote_fun_call "File" "erlps__write_file__2"
            [arg_19, newfile_18]
      _ -> EXC.badmatch matchExpr_8
erlps__generate_scanner__4 [arg_23, arg_24, arg_25, arg_26] =
  EXC.function_clause unit
erlps__generate_scanner__4 args =
  EXC.badarity (ErlangFun 4 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_token__1 :: ErlangFun
erlps__gen_token__1 [(ErlangMap map_0)]
  | (DM.Just opname_1) <-
      (Map.lookup (ErlangAtom "opname") map_0) =
  let    name_3 = BIF.erlang__atom_to_list__1 [opname_1]
  in let
    arg_4 = toErl "~-28s: {token, {mnemonic, TokenLine, ~w}}.\n"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_4, ErlangCons name_3 (ErlangCons opname_1 ErlangEmptyList)]
erlps__gen_token__1 [arg_10] = EXC.function_clause unit
erlps__gen_token__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__insert_tokens_in_template__2 :: ErlangFun
erlps__insert_tokens_in_template__2 [(ErlangBinary binSeg_0),
                                     tokens_88]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 37)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 37)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 32)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_12) == (toErl 35)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_15) == (toErl 35)
  , (ErlangInt size_16) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      (BIN.chopInt bin_14 size_16 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_18) == (toErl 35)
  , (ErlangInt size_19) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      (BIN.chopInt bin_17 size_19 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_21) == (toErl 82)
  , (ErlangInt size_22) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_24) bin_23) <-
      (BIN.chopInt bin_20 size_22 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_24) == (toErl 69)
  , (ErlangInt size_25) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_27) bin_26) <-
      (BIN.chopInt bin_23 size_25 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_27) == (toErl 80)
  , (ErlangInt size_28) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_30) bin_29) <-
      (BIN.chopInt bin_26 size_28 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_30) == (toErl 76)
  , (ErlangInt size_31) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_33) bin_32) <-
      (BIN.chopInt bin_29 size_31 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_33) == (toErl 65)
  , (ErlangInt size_34) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_36) bin_35) <-
      (BIN.chopInt bin_32 size_34 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_36) == (toErl 67)
  , (ErlangInt size_37) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_39) bin_38) <-
      (BIN.chopInt bin_35 size_37 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_39) == (toErl 69)
  , (ErlangInt size_40) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_42) bin_41) <-
      (BIN.chopInt bin_38 size_40 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_42) == (toErl 87)
  , (ErlangInt size_43) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_45) bin_44) <-
      (BIN.chopInt bin_41 size_43 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_45) == (toErl 73)
  , (ErlangInt size_46) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_48) bin_47) <-
      (BIN.chopInt bin_44 size_46 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_48) == (toErl 84)
  , (ErlangInt size_49) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_51) bin_50) <-
      (BIN.chopInt bin_47 size_49 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_51) == (toErl 72)
  , (ErlangInt size_52) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_54) bin_53) <-
      (BIN.chopInt bin_50 size_52 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_54) == (toErl 79)
  , (ErlangInt size_55) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_57) bin_56) <-
      (BIN.chopInt bin_53 size_55 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_57) == (toErl 80)
  , (ErlangInt size_58) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_60) bin_59) <-
      (BIN.chopInt bin_56 size_58 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_60) == (toErl 84)
  , (ErlangInt size_61) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_63) bin_62) <-
      (BIN.chopInt bin_59 size_61 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_63) == (toErl 79)
  , (ErlangInt size_64) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_66) bin_65) <-
      (BIN.chopInt bin_62 size_64 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_66) == (toErl 75)
  , (ErlangInt size_67) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_69) bin_68) <-
      (BIN.chopInt bin_65 size_67 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_69) == (toErl 69)
  , (ErlangInt size_70) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_72) bin_71) <-
      (BIN.chopInt bin_68 size_70 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_72) == (toErl 78)
  , (ErlangInt size_73) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_75) bin_74) <-
      (BIN.chopInt bin_71 size_73 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_75) == (toErl 83)
  , (ErlangInt size_76) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_78) bin_77) <-
      (BIN.chopInt bin_74 size_76 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_78) == (toErl 35)
  , (ErlangInt size_79) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_81) bin_80) <-
      (BIN.chopInt bin_77 size_79 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_81) == (toErl 35)
  , (ErlangInt size_82) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_84) bin_83) <-
      (BIN.chopInt bin_80 size_82 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_84) == (toErl 35)
  , (ErlangInt size_85) <- (BIN.size bin_83)
  , (BIN.Ok rest_87 bin_86) <- (BIN.chopBin bin_83 size_85 8)
  , BIN.empty bin_86 =
  ErlangCons tokens_88 (ErlangCons rest_87 ErlangEmptyList)
erlps__insert_tokens_in_template__2 [(ErlangBinary binSeg_0),
                                     tokens_79]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 37)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 37)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 37)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_12) == (toErl 32)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_15) == (toErl 35)
  , (ErlangInt size_16) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      (BIN.chopInt bin_14 size_16 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_18) == (toErl 35)
  , (ErlangInt size_19) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      (BIN.chopInt bin_17 size_19 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_21) == (toErl 35)
  , (ErlangInt size_22) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_24) bin_23) <-
      (BIN.chopInt bin_20 size_22 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_24) == (toErl 82)
  , (ErlangInt size_25) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_27) bin_26) <-
      (BIN.chopInt bin_23 size_25 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_27) == (toErl 69)
  , (ErlangInt size_28) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_30) bin_29) <-
      (BIN.chopInt bin_26 size_28 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_30) == (toErl 80)
  , (ErlangInt size_31) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_33) bin_32) <-
      (BIN.chopInt bin_29 size_31 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_33) == (toErl 76)
  , (ErlangInt size_34) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_36) bin_35) <-
      (BIN.chopInt bin_32 size_34 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_36) == (toErl 65)
  , (ErlangInt size_37) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_39) bin_38) <-
      (BIN.chopInt bin_35 size_37 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_39) == (toErl 67)
  , (ErlangInt size_40) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_42) bin_41) <-
      (BIN.chopInt bin_38 size_40 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_42) == (toErl 69)
  , (ErlangInt size_43) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_45) bin_44) <-
      (BIN.chopInt bin_41 size_43 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_45) == (toErl 87)
  , (ErlangInt size_46) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_48) bin_47) <-
      (BIN.chopInt bin_44 size_46 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_48) == (toErl 73)
  , (ErlangInt size_49) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_51) bin_50) <-
      (BIN.chopInt bin_47 size_49 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_51) == (toErl 84)
  , (ErlangInt size_52) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_54) bin_53) <-
      (BIN.chopInt bin_50 size_52 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_54) == (toErl 72)
  , (ErlangInt size_55) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_57) bin_56) <-
      (BIN.chopInt bin_53 size_55 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_57) == (toErl 78)
  , (ErlangInt size_58) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_60) bin_59) <-
      (BIN.chopInt bin_56 size_58 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_60) == (toErl 79)
  , (ErlangInt size_61) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_63) bin_62) <-
      (BIN.chopInt bin_59 size_61 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_63) == (toErl 84)
  , (ErlangInt size_64) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_66) bin_65) <-
      (BIN.chopInt bin_62 size_64 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_66) == (toErl 69)
  , (ErlangInt size_67) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_69) bin_68) <-
      (BIN.chopInt bin_65 size_67 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_69) == (toErl 35)
  , (ErlangInt size_70) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_72) bin_71) <-
      (BIN.chopInt bin_68 size_70 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_72) == (toErl 35)
  , (ErlangInt size_73) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_75) bin_74) <-
      (BIN.chopInt bin_71 size_73 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_75) == (toErl 35)
  , (ErlangInt size_76) <- (BIN.size bin_74)
  , (BIN.Ok rest_78 bin_77) <- (BIN.chopBin bin_74 size_76 8)
  , BIN.empty bin_77 =
  let   
    head_80 =
      toErl
        "%%%\n%%%   === ===  N O T E :   This file is generated do not edit. === ===\n%%%\n%%% Source is in aeb_fate_generate_ops.erl\n%%%          and aeb_fate_asm_scan.template"
  in let
    tail_81 =
      erlps__insert_tokens_in_template__2 [rest_78, tokens_79]
  in ErlangCons head_80 tail_81
erlps__insert_tokens_in_template__2 [(ErlangBinary binSeg_0),
                                     tokens_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok b_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    tail_9 = erlps__insert_tokens_in_template__2 [rest_6, tokens_7]
  in ErlangCons b_3 tail_9
erlps__insert_tokens_in_template__2 [arg_12, arg_13] =
  EXC.function_clause unit
erlps__insert_tokens_in_template__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_asm_pp__3 :: ErlangFun
erlps__gen_asm_pp__3 [module_0, path_1, ops_2] =
  let    arg_5 = BIF.erlang__atom_to_list__1 [module_0]
  in let
    lop_3 =
      BIF.do_remote_fun_call "Filename" "erlps__join__2"
        [path_1, arg_5]
  in let rop_7 = toErl ".erl"
  in let filename_8 = BIF.erlang__op_append [lop_3, rop_7]
  in let
    matchExpr_14 =
      BIF.do_remote_fun_call "File" "erlps__open__2"
        [filename_8, ErlangCons (ErlangAtom "write") ErlangEmptyList]
  in
    case matchExpr_14 of
      (ErlangTuple [(ErlangAtom "ok"), file_13]) ->
        let   
          arg_15 =
            flmap
              (\ lc_18 ->
                 let    lop_20 = erlps__gen_format__1 [lc_18]
                 in let rop_22 = toErl "\n"
                 in let lcRet_19 = BIF.erlang__op_append [lop_20, rop_22]
                 in ErlangCons lcRet_19 ErlangEmptyList)
              ops_2
        in let
          formats_23 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_15]
        in let arg_25 = toErl "~s"
        in let
          arg_28 =
            toErl
              " Provide pretty printing functuions for Fate instructions.\n"
        in let head_27 = erlps__prelude__1 [arg_28]
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_13, arg_25, ErlangCons head_27 ErlangEmptyList]
        in let arg_31 = toErl "-module(~w).\n\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_13, arg_31, ErlangCons module_0 ErlangEmptyList]
        in let
          arg_36 =
            toErl
              "-export([format_op/2]).\n\nformat_arg(li, {immediate, LI}) ->\n    aeb_fate_data:format(LI);\nformat_arg(_, {immediate, I}) ->\n    aeb_fate_data:format(I);\nformat_arg(a, {arg, N}) -> io_lib:format(\"arg~~p\", [N]);\nformat_arg(a, {var, N}) when N < 0 -> io_lib:format(\"store~~p\", [-N]);\nformat_arg(a, {var, N}) -> io_lib:format(\"var~~p\", [N]);\nformat_arg(a, {stack, 0}) -> \"a\".\n\nlookup(Name, Symbols) ->\n    maps:get(Name, Symbols, io_lib:format(\"~~p\",[Name])).\n\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_13, arg_36, ErlangCons formats_23 ErlangEmptyList]
        in let
          arg_41 =
            toErl
              "format_op(Op, _Symbols) -> io_lib:format(\";; Bad Op: ~~w\\n\", [Op]).\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_13, arg_41, ErlangEmptyList]
        in BIF.do_remote_fun_call "File" "erlps__close__1" [file_13]
      _ -> EXC.badmatch matchExpr_14
erlps__gen_asm_pp__3 [arg_44, arg_45, arg_46] =
  EXC.function_clause unit
erlps__gen_asm_pp__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_format__1 :: ErlangFun
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0)
  , (==) name_1 (ErlangAtom "CALL_R") =
  let   
    arg_2 =
      toErl
        "format_op({~w, {immediate, Contract}, {immediate, Function}, ArgType, RetType, Value}, Symbols) ->\n    [\"~s \", lookup(Contract, Symbols), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value)];\nformat_op({~w, Contract, {immediate, Function}, ArgType, RetType, Value}, Symbols) ->\n[\"~s \", format_arg(a, Contract), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value)];\n"
  in let head_6 = BIF.erlang__atom_to_list__1 [name_1]
  in let head_11 = BIF.erlang__atom_to_list__1 [name_1]
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_2,
       ErlangCons name_1
         (ErlangCons head_6
            (ErlangCons name_1 (ErlangCons head_11 ErlangEmptyList)))]
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0)
  , (==) name_1 (ErlangAtom "CALL_GR") =
  let   
    arg_2 =
      toErl
        "format_op({~w, {immediate, Contract}, {immediate, Function}, ArgType, RetType, Value, Gas}, Symbols) ->\n    [\"~s \", lookup(Contract, Symbols), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value),  \" \", format_arg(a, Gas)];\nformat_op({~w, Contract, {immediate, Function}, ArgType, RetType, Value, Gas}, Symbols) ->\n[\"~s \", format_arg(a, Contract), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value),  \" \", format_arg(a, Gas)];\n"
  in let head_6 = BIF.erlang__atom_to_list__1 [name_1]
  in let head_11 = BIF.erlang__atom_to_list__1 [name_1]
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_2,
       ErlangCons name_1
         (ErlangCons head_6
            (ErlangCons name_1 (ErlangCons head_11 ErlangEmptyList)))]
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangEmptyList)) <-
      (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let    arg_2 = toErl "format_op(~w, _) -> [\"~s\"];"
  in let head_6 = BIF.erlang__atom_to_list__1 [name_1]
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_2, ErlangCons name_1 (ErlangCons head_6 ErlangEmptyList)]
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just args_2) <- (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let nameasstring_4 = BIF.erlang__atom_to_list__1 [name_1]
  in
    case args_2 of
      (ErlangCons t0_6 (ErlangEmptyList)) ->
        let
          arg_7 =
            toErl
              "format_op({~w, Arg0}, _) ->\n    [\"~s \", format_arg(~w, Arg0)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_7,
             ErlangCons name_1
               (ErlangCons nameasstring_4 (ErlangCons t0_6 ErlangEmptyList))]
      (ErlangCons t0_15 (ErlangCons t1_16 (ErlangEmptyList))) ->
        let
          arg_17 =
            toErl
              "format_op({~w, Arg0, Arg1}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_17,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_15 (ErlangCons t1_16 ErlangEmptyList)))]
      (ErlangCons t0_27 (ErlangCons t1_28 (ErlangCons t2_29 (ErlangEmptyList)))) ->
        let
          arg_30 =
            toErl
              "format_op({~w, Arg0, Arg1, Arg2}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_30,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_27
                     (ErlangCons t1_28 (ErlangCons t2_29 ErlangEmptyList))))]
      (ErlangCons t0_42 (ErlangCons t1_43 (ErlangCons t2_44 (ErlangCons t3_45 (ErlangEmptyList))))) ->
        let
          arg_46 =
            toErl
              "format_op({~w, Arg0, Arg1, Arg2, Arg3}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_46,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_42
                     (ErlangCons t1_43
                        (ErlangCons t2_44
                           (ErlangCons t3_45 ErlangEmptyList)))))]
      (ErlangCons t0_60 (ErlangCons t1_61 (ErlangCons t2_62 (ErlangCons t3_63 (ErlangCons t4_64 (ErlangEmptyList)))))) ->
        let
          arg_65 =
            toErl
              "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_65,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_60
                     (ErlangCons t1_61
                        (ErlangCons t2_62
                           (ErlangCons t3_63
                              (ErlangCons t4_64 ErlangEmptyList))))))]
      (ErlangCons t0_81 (ErlangCons t1_82 (ErlangCons t2_83 (ErlangCons t3_84 (ErlangCons t4_85 (ErlangCons t5_86 (ErlangEmptyList))))))) ->
        let
          arg_87 =
            toErl
              "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4),\" \",  format_arg(~w, Arg5)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_87,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_81
                     (ErlangCons t1_82
                        (ErlangCons t2_83
                           (ErlangCons t3_84
                              (ErlangCons t4_85
                                 (ErlangCons t5_86 ErlangEmptyList)))))))]
      (ErlangCons t0_105 (ErlangCons t1_106 (ErlangCons t2_107 (ErlangCons t3_108 (ErlangCons t4_109 (ErlangCons t5_110 (ErlangCons t6_111 (ErlangEmptyList)))))))) ->
        let
          arg_112 =
            toErl
              "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4),\" \",  format_arg(~w, Arg5),\" \",  format_arg(~w, Arg6)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_112,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_105
                     (ErlangCons t1_106
                        (ErlangCons t2_107
                           (ErlangCons t3_108
                              (ErlangCons t4_109
                                 (ErlangCons t5_110
                                    (ErlangCons t6_111 ErlangEmptyList))))))))]
      (ErlangCons t0_132 (ErlangCons t1_133 (ErlangCons t2_134 (ErlangCons t3_135 (ErlangCons t4_136 (ErlangCons t5_137 (ErlangCons t6_138 (ErlangCons t7_139 (ErlangEmptyList))))))))) ->
        let
          arg_140 =
            toErl
              "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4),\" \",  format_arg(~w, Arg5),\" \",  format_arg(~w, Arg6),\" \",  format_arg(~w, Arg7)];"
        in
          BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
            [arg_140,
             ErlangCons name_1
               (ErlangCons nameasstring_4
                  (ErlangCons t0_132
                     (ErlangCons t1_133
                        (ErlangCons t2_134
                           (ErlangCons t3_135
                              (ErlangCons t4_136
                                 (ErlangCons t5_137
                                    (ErlangCons t6_138
                                       (ErlangCons t7_139
                                          ErlangEmptyList)))))))))]
      something_else -> EXC.case_clause something_else
erlps__gen_format__1 [arg_162] = EXC.function_clause unit
erlps__gen_format__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__test_asm_generator__1 :: ErlangFun
erlps__test_asm_generator__1 [filename_0] =
  let
    matchExpr_6 =
      BIF.do_remote_fun_call "File" "erlps__open__2"
        [filename_0, ErlangCons (ErlangAtom "write") ErlangEmptyList]
  in
    case matchExpr_6 of
      (ErlangTuple [(ErlangAtom "ok"), file_5]) ->
        let    lcSrc_8 = erlps__get_ops__0 []
        in let
          arg_7 =
            flmap
              (\ lc_10 ->
                 let    lop_12 = erlps__gen_instruction__1 [lc_10]
                 in let rop_14 = toErl "\n"
                 in let lcRet_11 = BIF.erlang__op_append [lop_12, rop_14]
                 in ErlangCons lcRet_11 ErlangEmptyList)
              lcSrc_8
        in let
          instructions_15 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_7]
        in let
          arg_17 =
            toErl
              ";; CONTRACT all_instructions\n\n;; Dont expect this contract to typecheck or run.\n;; Just used to check assembler rountrip of all instruction.\n\nFUNCTION foo () : {tuple, []}\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_5, arg_17, ErlangCons instructions_15 ErlangEmptyList]
        in let arg_22 = toErl "  RETURNR ()\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_5, arg_22, ErlangEmptyList]
        in BIF.do_remote_fun_call "File" "erlps__close__1" [file_5]
      _ -> EXC.badmatch matchExpr_6
erlps__test_asm_generator__1 [arg_25] = EXC.function_clause unit
erlps__test_asm_generator__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_instruction__1 :: ErlangFun
erlps__gen_instruction__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangEmptyList)) <-
      (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let arg_2 = toErl "  ~s\n"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_2, ErlangCons name_1 ErlangEmptyList]
erlps__gen_instruction__1 [(ErlangMap map_0)]
  | (DM.Just argtypes_2) <-
      (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let    arg_4 = toErl " "
  in let
    arg_5 =
      flmap
        (\ lc_8 ->
           let lcRet_9 = erlps__gen_arg__1 [lc_8]
           in ErlangCons lcRet_9 ErlangEmptyList)
        argtypes_2
  in let
    arg_3 =
      BIF.do_remote_fun_call "Lists" "erlps__join__2" [arg_4, arg_5]
  in let
    args_11 =
      BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3]
  in let arg_12 = toErl "  ~s ~s\n"
  in let
    i_18 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_12, ErlangCons name_1 (ErlangCons args_11 ErlangEmptyList)]
  in i_18
erlps__gen_instruction__1 [arg_19] = EXC.function_clause unit
erlps__gen_instruction__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_arg__1 :: ErlangFun
erlps__gen_arg__1 [(ErlangAtom "a")] = erlps__any_arg__0 []
erlps__gen_arg__1 [(ErlangAtom "is")] = toErl "foo"
erlps__gen_arg__1 [(ErlangAtom "ii")] = erlps__gen_int__0 []
erlps__gen_arg__1 [(ErlangAtom "li")] = toErl "[1, 2, 3]"
erlps__gen_arg__1 [(ErlangAtom "t")] = toErl "integer"
erlps__gen_arg__1 [arg_0] = EXC.function_clause unit
erlps__gen_arg__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__any_arg__0 :: ErlangFun
erlps__any_arg__0 [] =
  let    arg_1 = toErl 5
  in let
    arg_0 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in let tup_el_3 = toErl "a"
  in let tup_el_4 = erlps__stack_arg__0 []
  in let tup_el_5 = erlps__var_arg__0 []
  in let tup_el_6 = erlps__arg_arg__0 []
  in let tup_el_7 = erlps__imm_arg__0 []
  in let
    arg_2 =
      ErlangTuple [tup_el_3, tup_el_4, tup_el_5, tup_el_6, tup_el_7]
  in BIF.erlang__element__2 [arg_0, arg_2]
erlps__any_arg__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__stack_arg__0 :: ErlangFun
erlps__stack_arg__0 [] = toErl "a"
erlps__stack_arg__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__arg_arg__0 :: ErlangFun
erlps__arg_arg__0 [] =
  let    lop_0 = toErl "arg"
  in let arg_4 = toErl 256
  in let
    lop_3 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_4]
  in let rop_5 = toErl 1
  in let arg_2 = BIF.erlang__op_minus [lop_3, rop_5]
  in let rop_1 = BIF.erlang__integer_to_list__1 [arg_2]
  in BIF.erlang__op_append [lop_0, rop_1]
erlps__arg_arg__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__var_arg__0 :: ErlangFun
erlps__var_arg__0 [] =
  let    lop_0 = toErl "var"
  in let arg_4 = toErl 256
  in let
    lop_3 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_4]
  in let rop_5 = toErl 1
  in let arg_2 = BIF.erlang__op_minus [lop_3, rop_5]
  in let rop_1 = BIF.erlang__integer_to_list__1 [arg_2]
  in BIF.erlang__op_append [lop_0, rop_1]
erlps__var_arg__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__imm_arg__0 :: ErlangFun
erlps__imm_arg__0 [] =
  let    arg_1 = toErl 15
  in let
    case_0 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in
    case case_0 of
      (ErlangInt num_2) | (ErlangInt num_2) == (toErl 1) ->
        erlps__gen_int__0 []
      (ErlangInt num_3) | (ErlangInt num_3) == (toErl 2) ->
        erlps__gen_int__0 []
      (ErlangInt num_4) | (ErlangInt num_4) == (toErl 3) ->
        erlps__gen_int__0 []
      (ErlangInt num_5) | (ErlangInt num_5) == (toErl 4) ->
        erlps__gen_int__0 []
      (ErlangInt num_6) | (ErlangInt num_6) == (toErl 5) ->
        erlps__gen_int__0 []
      (ErlangInt num_7) | (ErlangInt num_7) == (toErl 6) ->
        erlps__gen_int__0 []
      (ErlangInt num_8) | (ErlangInt num_8) == (toErl 7) ->
        erlps__gen_int__0 []
      (ErlangInt num_9) | (ErlangInt num_9) == (toErl 8) ->
        erlps__gen_address__0 []
      (ErlangInt num_10) | (ErlangInt num_10) == (toErl 9) ->
        erlps__gen_boolean__0 []
      (ErlangInt num_11) | (ErlangInt num_11) == (toErl 10) ->
        erlps__gen_string__0 []
      (ErlangInt num_12) | (ErlangInt num_12) == (toErl 11) ->
        erlps__gen_map__0 []
      (ErlangInt num_13) | (ErlangInt num_13) == (toErl 12) ->
        erlps__gen_list__0 []
      (ErlangInt num_14) | (ErlangInt num_14) == (toErl 13) ->
        erlps__gen_bits__0 []
      (ErlangInt num_15) | (ErlangInt num_15) == (toErl 14) ->
        erlps__gen_tuple__0 []
      (ErlangInt num_16) | (ErlangInt num_16) == (toErl 15) ->
        erlps__gen_variant__0 []
      something_else -> EXC.case_clause something_else
erlps__imm_arg__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_key__0 :: ErlangFun
erlps__gen_key__0 [] =
  let    arg_1 = toErl 15
  in let
    case_0 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in
    case case_0 of
      (ErlangInt num_2) | (ErlangInt num_2) == (toErl 1) ->
        erlps__gen_int__0 []
      (ErlangInt num_3) | (ErlangInt num_3) == (toErl 2) ->
        erlps__gen_int__0 []
      (ErlangInt num_4) | (ErlangInt num_4) == (toErl 3) ->
        erlps__gen_int__0 []
      (ErlangInt num_5) | (ErlangInt num_5) == (toErl 4) ->
        erlps__gen_int__0 []
      (ErlangInt num_6) | (ErlangInt num_6) == (toErl 5) ->
        erlps__gen_int__0 []
      (ErlangInt num_7) | (ErlangInt num_7) == (toErl 6) ->
        erlps__gen_int__0 []
      (ErlangInt num_8) | (ErlangInt num_8) == (toErl 7) ->
        erlps__gen_int__0 []
      (ErlangInt num_9) | (ErlangInt num_9) == (toErl 8) ->
        erlps__gen_address__0 []
      (ErlangInt num_10) | (ErlangInt num_10) == (toErl 9) ->
        erlps__gen_boolean__0 []
      (ErlangInt num_11) | (ErlangInt num_11) == (toErl 10) ->
        erlps__gen_string__0 []
      (ErlangInt num_12) | (ErlangInt num_12) == (toErl 11) ->
        erlps__gen_string__0 []
      (ErlangInt num_13) | (ErlangInt num_13) == (toErl 12) ->
        erlps__gen_list__0 []
      (ErlangInt num_14) | (ErlangInt num_14) == (toErl 13) ->
        erlps__gen_bits__0 []
      (ErlangInt num_15) | (ErlangInt num_15) == (toErl 14) ->
        erlps__gen_tuple__0 []
      (ErlangInt num_16) | (ErlangInt num_16) == (toErl 15) ->
        erlps__gen_variant__0 []
      something_else -> EXC.case_clause something_else
erlps__gen_key__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_boolean__0 :: ErlangFun
erlps__gen_boolean__0 [] =
  let    arg_1 = toErl 2
  in let
    arg_0 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in let tup_el_3 = toErl "true"
  in let tup_el_4 = toErl "false"
  in let arg_2 = ErlangTuple [tup_el_3, tup_el_4]
  in BIF.erlang__element__2 [arg_0, arg_2]
erlps__gen_boolean__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_int__0 :: ErlangFun
erlps__gen_int__0 [] =
  let    arg_1 = toErl 4
  in let
    arg_0 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in let arg_7 = toErl 10
  in let arg_8 = toErl 40
  in let arg_6 = BIF.math__pow__2 [arg_7, arg_8]
  in let arg_5 = BIF.erlang__round__1 [arg_6]
  in let
    arg_4 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_5]
  in let tup_el_3 = BIF.erlang__integer_to_list__1 [arg_4]
  in let arg_11 = toErl 10
  in let
    arg_10 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_11]
  in let tup_el_9 = BIF.erlang__integer_to_list__1 [arg_10]
  in let arg_14 = toErl 100
  in let
    arg_13 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_14]
  in let tup_el_12 = BIF.erlang__integer_to_list__1 [arg_13]
  in let arg_16 = toErl "0x~.16b"
  in let arg_21 = toErl 10
  in let arg_22 = toErl 10
  in let arg_20 = BIF.math__pow__2 [arg_21, arg_22]
  in let arg_19 = BIF.erlang__round__1 [arg_20]
  in let
    head_18 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_19]
  in let
    tup_el_15 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_16, ErlangCons head_18 ErlangEmptyList]
  in let
    arg_2 = ErlangTuple [tup_el_3, tup_el_9, tup_el_12, tup_el_15]
  in BIF.erlang__element__2 [arg_0, arg_2]
erlps__gen_int__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_address__0 :: ErlangFun
erlps__gen_address__0 [] =
  toErl "#nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv"
erlps__gen_address__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_string__0 :: ErlangFun
erlps__gen_string__0 [] = toErl "\"foo\""
erlps__gen_string__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_map__0 :: ErlangFun
erlps__gen_map__0 [] =
  let    lop_0 = toErl "{ "
  in let lop_2 = erlps__gen_key__0 []
  in let lop_4 = toErl " => "
  in let lop_6 = erlps__imm_arg__0 []
  in let rop_7 = toErl "}"
  in let rop_5 = BIF.erlang__op_append [lop_6, rop_7]
  in let rop_3 = BIF.erlang__op_append [lop_4, rop_5]
  in let rop_1 = BIF.erlang__op_append [lop_2, rop_3]
  in BIF.erlang__op_append [lop_0, rop_1]
erlps__gen_map__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_list__0 :: ErlangFun
erlps__gen_list__0 [] =
  let    arg_1 = toErl 4
  in let
    case_0 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in
    case case_0 of
      (ErlangInt num_2) | (ErlangInt num_2) == (toErl 1) -> toErl "[]"
      (ErlangInt num_3) | (ErlangInt num_3) == (toErl 2) ->
        let    lop_4 = toErl "["
        in let arg_7 = toErl ", "
        in let arg_8 = erlps__gen_list_elements__0 []
        in let
          lop_6 =
            BIF.do_remote_fun_call "Lists" "erlps__join__2" [arg_7, arg_8]
        in let rop_9 = toErl " ]"
        in let rop_5 = BIF.erlang__op_append [lop_6, rop_9]
        in BIF.erlang__op_append [lop_4, rop_5]
      (ErlangInt num_10) | (ErlangInt num_10) == (toErl 3) ->
        let    lop_11 = toErl "[ "
        in let lop_13 = erlps__imm_arg__0 []
        in let rop_14 = toErl " ]"
        in let rop_12 = BIF.erlang__op_append [lop_13, rop_14]
        in BIF.erlang__op_append [lop_11, rop_12]
      (ErlangInt num_15) | (ErlangInt num_15) == (toErl 4) ->
        let    lop_16 = toErl "[ "
        in let lop_18 = erlps__imm_arg__0 []
        in let lop_20 = toErl ", "
        in let lop_22 = erlps__imm_arg__0 []
        in let rop_23 = toErl " ]"
        in let rop_21 = BIF.erlang__op_append [lop_22, rop_23]
        in let rop_19 = BIF.erlang__op_append [lop_20, rop_21]
        in let rop_17 = BIF.erlang__op_append [lop_18, rop_19]
        in BIF.erlang__op_append [lop_16, rop_17]
      something_else -> EXC.case_clause something_else
erlps__gen_list__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_list_elements__0 :: ErlangFun
erlps__gen_list_elements__0 [] =
  let    arg_1 = toErl 3
  in let
    case_0 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in
    case case_0 of
      (ErlangInt num_2) | (ErlangInt num_2) == (toErl 1) ->
        let    head_3 = erlps__imm_arg__0 []
        in let tail_4 = erlps__gen_list_elements__0 []
        in ErlangCons head_3 tail_4
      (ErlangInt num_5) | (ErlangInt num_5) == (toErl 2) ->
        ErlangEmptyList
      (ErlangInt num_6) | (ErlangInt num_6) == (toErl 3) ->
        let head_7 = erlps__imm_arg__0 []
        in ErlangCons head_7 ErlangEmptyList
      something_else -> EXC.case_clause something_else
erlps__gen_list_elements__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_bits__0 :: ErlangFun
erlps__gen_bits__0 [] =
  let    arg_1 = toErl 3
  in let
    arg_0 = BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in let tup_el_3 = toErl "<>"
  in let tup_el_4 = toErl "!<>"
  in let tup_el_5 = toErl "101010"
  in let arg_2 = ErlangTuple [tup_el_3, tup_el_4, tup_el_5]
  in BIF.erlang__element__2 [arg_0, arg_2]
erlps__gen_bits__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_tuple__0 :: ErlangFun
erlps__gen_tuple__0 [] =
  let    arg_1 = toErl 3
  in let
    case_0 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in
    case case_0 of
      (ErlangInt num_2) | (ErlangInt num_2) == (toErl 1) -> toErl "()"
      (ErlangInt num_3) | (ErlangInt num_3) == (toErl 2) ->
        toErl "(42)"
      (ErlangInt num_4) | (ErlangInt num_4) == (toErl 3) ->
        let    lop_5 = toErl "("
        in let lop_7 = erlps__imm_arg__0 []
        in let rop_8 = toErl ")"
        in let rop_6 = BIF.erlang__op_append [lop_7, rop_8]
        in BIF.erlang__op_append [lop_5, rop_6]
      something_else -> EXC.case_clause something_else
erlps__gen_tuple__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_variant__0 :: ErlangFun
erlps__gen_variant__0 [] =
  let    arg_1 = toErl 3
  in let
    case_0 =
      BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_1]
  in
    case case_0 of
      (ErlangInt num_2) | (ErlangInt num_2) == (toErl 1) ->
        toErl "(| 5 | 2 | (1, \"foo\", ()) |)"
      (ErlangInt num_3) | (ErlangInt num_3) == (toErl 2) ->
        let    lop_4 = toErl "(| 2 | 1 | ( "
        in let lop_6 = erlps__imm_arg__0 []
        in let rop_7 = toErl " ) |)"
        in let rop_5 = BIF.erlang__op_append [lop_6, rop_7]
        in BIF.erlang__op_append [lop_4, rop_5]
      (ErlangInt num_8) | (ErlangInt num_8) == (toErl 3) ->
        let    lop_9 = toErl "(| 2 | 0 | ( "
        in let lop_11 = erlps__imm_arg__0 []
        in let lop_13 = toErl ", "
        in let lop_15 = erlps__imm_arg__0 []
        in let rop_16 = toErl " ) |)"
        in let rop_14 = BIF.erlang__op_append [lop_15, rop_16]
        in let rop_12 = BIF.erlang__op_append [lop_13, rop_14]
        in let rop_10 = BIF.erlang__op_append [lop_11, rop_12]
        in BIF.erlang__op_append [lop_9, rop_10]
      something_else -> EXC.case_clause something_else
erlps__gen_variant__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__generate_documentation__1 :: ErlangFun
erlps__generate_documentation__1 [filename_0] =
  let
    matchExpr_6 =
      BIF.do_remote_fun_call "File" "erlps__open__2"
        [filename_0, ErlangCons (ErlangAtom "write") ErlangEmptyList]
  in
    case matchExpr_6 of
      (ErlangTuple [(ErlangAtom "ok"), file_5]) ->
        let    lcSrc_8 = erlps__get_ops__0 []
        in let
          arg_7 =
            flmap
              (\ lc_10 ->
                 let    lop_12 = erlps__gen_doc__1 [lc_10]
                 in let rop_14 = toErl "\n"
                 in let lcRet_11 = BIF.erlang__op_append [lop_12, rop_14]
                 in ErlangCons lcRet_11 ErlangEmptyList)
              lcSrc_8
        in let
          instructions_15 =
            BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_7]
        in let
          arg_17 =
            toErl
              "### Operations\n\n| OpCode | Name | Args | Description |\n| ---    | ---  | ---  |        ---  |\n~s"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_5, arg_17, ErlangCons instructions_15 ErlangEmptyList]
        in let arg_22 = toErl "\n"
        in let
          _ =
            BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
              [file_5, arg_22, ErlangEmptyList]
        in BIF.do_remote_fun_call "File" "erlps__close__1" [file_5]
      _ -> EXC.badmatch matchExpr_6
erlps__generate_documentation__1 [arg_25] =
  EXC.function_clause unit
erlps__generate_documentation__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gen_doc__1 :: ErlangFun
erlps__gen_doc__1 [(ErlangMap map_0)]
  | (DM.Just _constructortype_12) <-
      (Map.lookup (ErlangAtom "constructor_type") map_0)
  , (DM.Just _constructor_11) <-
      (Map.lookup (ErlangAtom "constructor") map_0)
  , (DM.Just _type_10) <- (Map.lookup (ErlangAtom "type") map_0)
  , (DM.Just _gas_9) <- (Map.lookup (ErlangAtom "gas") map_0)
  , (DM.Just doc_8) <- (Map.lookup (ErlangAtom "doc") map_0)
  , (DM.Just _typename_7) <-
      (Map.lookup (ErlangAtom "type_name") map_0)
  , (DM.Just _macro_6) <- (Map.lookup (ErlangAtom "macro") map_0)
  , (DM.Just fateformat_5) <-
      (Map.lookup (ErlangAtom "format") map_0)
  , (DM.Just _endbb_4) <- (Map.lookup (ErlangAtom "end_bb") map_0)
  , (DM.Just _arity_3) <- (Map.lookup (ErlangAtom "arity") map_0)
  , (DM.Just opcode_2) <- (Map.lookup (ErlangAtom "opcode") map_0)
  , (DM.Just name_1) <- (Map.lookup (ErlangAtom "opname") map_0) =
  let   
    arguments_28 =
      case fateformat_5 of
        (ErlangEmptyList) -> toErl ""
        _ ->
          let    arg_14 = toErl " "
          in let arg_19 = toErl 0
          in let lop_21 = BIF.erlang__length__1 [fateformat_5]
          in let rop_23 = toErl 1
          in let arg_20 = BIF.erlang__op_minus [lop_21, rop_23]
          in let
            arg_18 =
              BIF.do_remote_fun_call "Lists" "erlps__seq__2" [arg_19, arg_20]
          in let
            lcSrc_16 =
              BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                [fateformat_5, arg_18]
          in let
            arg_15 =
              flmap
                (\ lc_25 ->
                   let lcRet_26 = erlps__format_arg_doc__1 [lc_25]
                   in ErlangCons lcRet_26 ErlangEmptyList)
                lcSrc_16
          in
            BIF.do_remote_fun_call "Lists" "erlps__join__2" [arg_14, arg_15]
  in let arg_29 = toErl "| 0x~.16b | ~w | ~s | ~s |\n"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_29,
       ErlangCons opcode_2
         (ErlangCons name_1
            (ErlangCons arguments_28 (ErlangCons doc_8 ErlangEmptyList)))]
erlps__gen_doc__1 [arg_39] = EXC.function_clause unit
erlps__gen_doc__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__format_arg_doc__1 :: ErlangFun
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "a"), n_0])]
  =
  let arg_1 = toErl "Arg~w"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "is"),
                                        _n_0])]
  =
  toErl "Identifier"
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "ii"),
                                        _n_0])]
  =
  toErl "Integer"
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "li"),
                                        _n_0])]
  =
  toErl "[Integers]"
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "t"), _n_0])]
  =
  toErl "Type"
erlps__format_arg_doc__1 [arg_1] = EXC.function_clause unit
erlps__format_arg_doc__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args