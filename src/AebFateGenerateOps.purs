module Aeb.Fate.Generate.Ops(erlps__gen_and_halt__1,
                             erlps__generate__0,
                             erlps__generate_documentation__1,
                             erlps__get_ops__0,
                             erlps__test_asm_generator__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__gen_and_halt__1 :: ErlangFun
erlps__gen_and_halt__1 [(ErlangCons srcdirarg_0 (ErlangCons includedirarg_1 (ErlangEmptyList)))]
  =
  let    arg_2 = (BIF.erlang__atom_to_list__1 [srcdirarg_0])
  in let arg_4 = (BIF.erlang__atom_to_list__1 [includedirarg_1])
  in let _ = (erlps__generate__2 [arg_2, arg_4])
  in (BIF.erlang__halt__0 [])
erlps__gen_and_halt__1 [arg_6] = (EXC.function_clause unit)
erlps__gen_and_halt__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate__0 :: ErlangFun
erlps__generate__0 [] =
  let    arg_0 = (make_string "src/")
  in let arg_1 = (make_string "include/")
  in (erlps__generate__2 [arg_0, arg_1])
erlps__generate__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_ops__0 :: ErlangFun
erlps__get_ops__0 [] =
  let arg_0 = (erlps__ops_defs__0 [])
  in (erlps__gen__1 [arg_0])
erlps__get_ops__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate__2 :: ErlangFun
erlps__generate__2 [src_0, include_1] =
  let    arg_2 = (erlps__ops_defs__0 [])
  in let _ = (erlps__check_defs__1 [arg_2])
  in let ops_3 = (erlps__get_ops__0 [])
  in let rop_5 = (make_string "aeb_fate_opcodes.hrl")
  in let hrlfile_6 = (BIF.erlang__op_append [include_1, rop_5])
  in let _ = (erlps__generate_header_file__2 [hrlfile_6, ops_3])
  in let
    _ =
      (erlps__generate_opcodes_ops__4
         [(ErlangAtom "aeb_fate_opcodes"), hrlfile_6, src_0, ops_3])
  in let
    _ =
      (erlps__generate_code_ops__3
         [(ErlangAtom "aeb_fate_ops"), src_0, ops_3])
  in let arg_16 = (make_string "aeb_fate_asm_scan.template")
  in let arg_17 = (make_string "aeb_fate_asm_scan.xrl")
  in let
    _ = (erlps__generate_scanner__4 [arg_16, arg_17, src_0, ops_3])
  in
    (erlps__gen_asm_pp__3 [(ErlangAtom "aeb_fate_pp"), src_0, ops_3])
erlps__generate__2 [arg_23, arg_24] = (EXC.function_clause unit)
erlps__generate__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_defs__1 :: ErlangFun
erlps__check_defs__1 [list_0] =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
         [(ErlangInt (DBI.fromInt 2)), list_0])
  in let
    match_final_1_6 =
      (erlps__check_numbering__2 [(ErlangInt (DBI.fromInt 0)), arg_3])
  in
    case match_final_1_6 of
      (ErlangAtom "true") -> match_final_1_6
      _ -> (EXC.badmatch match_final_1_6)
erlps__check_defs__1 [arg_8] = (EXC.function_clause unit)
erlps__check_defs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_numbering__2 :: ErlangFun
erlps__check_numbering__2 [n_0, (ErlangCons t_1 rest_2)] =
  let
    opcode_5 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), t_1])
  in
    case opcode_5 of
      n_7 | (n_7 == n_0) ->
        let
          arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
        in (erlps__check_numbering__2 [arg_8, rest_2])
      (ErlangInt num_12) | ((ErlangInt num_12) ==
                              (ErlangInt (DBI.fromInt 250))) ->
        let
          arg_13 =
            (BIF.erlang__op_plus
               [(ErlangInt (DBI.fromInt 250)), (ErlangInt (DBI.fromInt 1))])
        in (erlps__check_numbering__2 [arg_13, rest_2])
      _ | (weakLt opcode_5 n_0) ->
        (ErlangTuple [(ErlangAtom "duplicate_opcode"), opcode_5])
      _ | (weakGt opcode_5 n_0) ->
        (ErlangTuple [(ErlangAtom "missing_opcode"), n_0])
      something_else -> (EXC.case_clause something_else)
erlps__check_numbering__2 [_, (ErlangEmptyList)] =
  (ErlangAtom "true")
erlps__check_numbering__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__check_numbering__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ops_defs__0 :: ErlangFun
erlps__ops_defs__0 [] =
  let    tup_el_9 = (ErlangTuple [])
  in let
    tup_el_11 =
      (make_string
         "Return from function call, top of stack is return value . The type of the retun value has to match the return type of the function.")
  in let
    head_0 =
      (ErlangTuple
         [(ErlangAtom "RETURN"), (ErlangInt (DBI.fromInt 0)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "return"), tup_el_9, (ErlangAtom "any"), tup_el_11])
  in let tup_el_24 = (ErlangTuple [(ErlangAtom "any")])
  in let
    tup_el_27 =
      (make_string
         "Push Arg0 and return from function. The type of the retun value has to match the return type of the function.")
  in let
    head_13 =
      (ErlangTuple
         [(ErlangAtom "RETURNR"), (ErlangInt (DBI.fromInt 1)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "returnr"), tup_el_24, (ErlangAtom "any"),
          tup_el_27])
  in let tup_el_40 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_43 =
      (make_string
         "Call the function Arg0 with args on stack. The types of the arguments has to match the argument typs of the function.")
  in let
    head_29 =
      (ErlangTuple
         [(ErlangAtom "CALL"), (ErlangInt (DBI.fromInt 2)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "call"), tup_el_40, (ErlangAtom "any"), tup_el_43])
  in let
    tup_el_64 =
      (ErlangTuple
         [(ErlangAtom "contract"), (ErlangAtom "string"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep"),
          (ErlangAtom "integer")])
  in let
    tup_el_71 =
      (make_string
         "Remote call to contract Arg0 and function Arg1 of type Arg2 => Arg3 with value Arg4. The types of the arguments has to match the argument types of the function.")
  in let
    head_45 =
      (ErlangTuple
         [(ErlangAtom "CALL_R"), (ErlangInt (DBI.fromInt 3)),
          (ErlangAtom "true"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "is")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
          (ErlangAtom "call_r"), tup_el_64, (ErlangAtom "any"), tup_el_71])
  in let tup_el_84 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_87 =
      (make_string
         "Tail call to function Arg0. The types of the arguments has to match the argument typs of the function. And the return type of the called function has to match the type of the current function.")
  in let
    head_73 =
      (ErlangTuple
         [(ErlangAtom "CALL_T"), (ErlangInt (DBI.fromInt 4)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "call_t"), tup_el_84, (ErlangAtom "any"), tup_el_87])
  in let
    tup_el_110 =
      (ErlangTuple
         [(ErlangAtom "contract"), (ErlangAtom "string"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep"),
          (ErlangAtom "integer"), (ErlangAtom "integer")])
  in let
    tup_el_118 =
      (make_string
         "Remote call with gas cap in Arg4. Otherwise as CALL_R.")
  in let
    head_89 =
      (ErlangTuple
         [(ErlangAtom "CALL_GR"), (ErlangInt (DBI.fromInt 5)),
          (ErlangAtom "true"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "is")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a")
                         (ErlangCons (ErlangAtom "a") ErlangEmptyList)))))),
          (ErlangAtom "call_gr"), tup_el_110, (ErlangAtom "any"),
          tup_el_118])
  in let tup_el_131 = (ErlangTuple [(ErlangAtom "integer")])
  in let
    tup_el_134 =
      (make_string
         "Jump to a basic block. The basic block has to exist in the current function.")
  in let
    head_120 =
      (ErlangTuple
         [(ErlangAtom "JUMP"), (ErlangInt (DBI.fromInt 6)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "ii") ErlangEmptyList),
          (ErlangAtom "jump"), tup_el_131, (ErlangAtom "none"),
          tup_el_134])
  in let
    tup_el_149 =
      (ErlangTuple [(ErlangAtom "boolean"), (ErlangAtom "integer")])
  in let
    tup_el_153 =
      (make_string
         "Conditional jump to a basic block. If Arg0 then jump to Arg1.")
  in let
    head_136 =
      (ErlangTuple
         [(ErlangAtom "JUMPIF"), (ErlangInt (DBI.fromInt 7)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "ii") ErlangEmptyList)),
          (ErlangAtom "jumpif"), tup_el_149, (ErlangAtom "none"),
          tup_el_153])
  in let
    tup_el_170 =
      (ErlangTuple
         [(ErlangAtom "variant"), (ErlangAtom "integer"),
          (ErlangAtom "ingeger")])
  in let
    tup_el_175 =
      (make_string "Conditional jump to a basic block on variant tag.")
  in let
    head_155 =
      (ErlangTuple
         [(ErlangAtom "SWITCH_V2"), (ErlangInt (DBI.fromInt 8)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "ii")
                (ErlangCons (ErlangAtom "ii") ErlangEmptyList))),
          (ErlangAtom "switch"), tup_el_170, (ErlangAtom "none"),
          tup_el_175])
  in let
    tup_el_194 =
      (ErlangTuple
         [(ErlangAtom "variant"), (ErlangAtom "integer"),
          (ErlangAtom "integer"), (ErlangAtom "ingeger")])
  in let
    tup_el_200 =
      (make_string "Conditional jump to a basic block on variant tag.")
  in let
    head_177 =
      (ErlangTuple
         [(ErlangAtom "SWITCH_V3"), (ErlangInt (DBI.fromInt 9)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "ii")
                (ErlangCons (ErlangAtom "ii")
                   (ErlangCons (ErlangAtom "ii") ErlangEmptyList)))),
          (ErlangAtom "switch"), tup_el_194, (ErlangAtom "none"),
          tup_el_200])
  in let
    tup_el_217 =
      (ErlangTuple [(ErlangAtom "list"), (ErlangAtom "integer")])
  in let
    tup_el_215 = (ErlangTuple [(ErlangAtom "variant"), tup_el_217])
  in let
    tup_el_221 =
      (make_string "Conditional jump to a basic block on variant tag.")
  in let
    head_202 =
      (ErlangTuple
         [(ErlangAtom "SWITCH_VN"), (ErlangInt (DBI.fromInt 10)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "li") ErlangEmptyList)),
          (ErlangAtom "switch"), tup_el_215, (ErlangAtom "none"),
          tup_el_221])
  in let tup_el_234 = (ErlangTuple [])
  in let
    tup_el_236 =
      (make_string "The value sent in the current remote call.")
  in let
    head_223 =
      (ErlangTuple
         [(ErlangAtom "CALL_VALUE"), (ErlangInt (DBI.fromInt 11)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "call_value"), tup_el_234, (ErlangAtom "integer"),
          tup_el_236])
  in let tup_el_249 = (ErlangTuple [(ErlangAtom "any")])
  in let tup_el_252 = (make_string "Push argument to stack.")
  in let
    head_238 =
      (ErlangTuple
         [(ErlangAtom "PUSH"), (ErlangInt (DBI.fromInt 12)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "push"), tup_el_249, (ErlangAtom "any"), tup_el_252])
  in let tup_el_263 = (ErlangTuple [(ErlangAtom "any")])
  in let tup_el_266 = (make_string "Duplicate top of stack.")
  in let
    head_254 =
      (ErlangTuple
         [(ErlangAtom "DUPA"), (ErlangInt (DBI.fromInt 13)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "dup"), tup_el_263, (ErlangAtom "any"), tup_el_266])
  in let tup_el_279 = (ErlangTuple [(ErlangAtom "any")])
  in let
    tup_el_282 = (make_string "push Arg0 stack pos on top of stack.")
  in let
    head_268 =
      (ErlangTuple
         [(ErlangAtom "DUP"), (ErlangInt (DBI.fromInt 14)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "dup"), tup_el_279, (ErlangAtom "any"), tup_el_282])
  in let tup_el_295 = (ErlangTuple [(ErlangAtom "integer")])
  in let tup_el_298 = (make_string "Arg0 := top of stack.")
  in let
    head_284 =
      (ErlangTuple
         [(ErlangAtom "POP"), (ErlangInt (DBI.fromInt 15)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "pop"), tup_el_295, (ErlangAtom "integer"),
          tup_el_298])
  in let tup_el_309 = (ErlangTuple [(ErlangAtom "integer")])
  in let tup_el_312 = (make_string "Increment accumulator.")
  in let
    head_300 =
      (ErlangTuple
         [(ErlangAtom "INCA"), (ErlangInt (DBI.fromInt 16)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "inc"), tup_el_309, (ErlangAtom "integer"),
          tup_el_312])
  in let tup_el_325 = (ErlangTuple [(ErlangAtom "integer")])
  in let tup_el_328 = (make_string "Increment argument.")
  in let
    head_314 =
      (ErlangTuple
         [(ErlangAtom "INC"), (ErlangInt (DBI.fromInt 17)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "inc"), tup_el_325, (ErlangAtom "integer"),
          tup_el_328])
  in let tup_el_339 = (ErlangTuple [(ErlangAtom "integer")])
  in let tup_el_342 = (make_string "Decrement accumulator.")
  in let
    head_330 =
      (ErlangTuple
         [(ErlangAtom "DECA"), (ErlangInt (DBI.fromInt 18)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "dec"), tup_el_339, (ErlangAtom "integer"),
          tup_el_342])
  in let tup_el_355 = (ErlangTuple [(ErlangAtom "integer")])
  in let tup_el_358 = (make_string "Decrement argument.")
  in let
    head_344 =
      (ErlangTuple
         [(ErlangAtom "DEC"), (ErlangInt (DBI.fromInt 19)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "dec"), tup_el_355, (ErlangAtom "integer"),
          tup_el_358])
  in let
    tup_el_375 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_379 = (make_string "Arg0 := Arg1 + Arg2.")
  in let
    head_360 =
      (ErlangTuple
         [(ErlangAtom "ADD"), (ErlangInt (DBI.fromInt 20)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "add"), tup_el_375, (ErlangAtom "integer"),
          tup_el_379])
  in let
    tup_el_396 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_400 = (make_string "Arg0 := Arg1 - Arg2.")
  in let
    head_381 =
      (ErlangTuple
         [(ErlangAtom "SUB"), (ErlangInt (DBI.fromInt 21)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "sub"), tup_el_396, (ErlangAtom "integer"),
          tup_el_400])
  in let
    tup_el_417 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_421 = (make_string "Arg0 := Arg1 * Arg2.")
  in let
    head_402 =
      (ErlangTuple
         [(ErlangAtom "MUL"), (ErlangInt (DBI.fromInt 22)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "mul"), tup_el_417, (ErlangAtom "integer"),
          tup_el_421])
  in let
    tup_el_438 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_442 = (make_string "Arg0 := Arg1 / Arg2.")
  in let
    head_423 =
      (ErlangTuple
         [(ErlangAtom "DIV"), (ErlangInt (DBI.fromInt 23)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "divide"), tup_el_438, (ErlangAtom "integer"),
          tup_el_442])
  in let
    tup_el_459 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_463 = (make_string "Arg0 := Arg1 mod Arg2.")
  in let
    head_444 =
      (ErlangTuple
         [(ErlangAtom "MOD"), (ErlangInt (DBI.fromInt 24)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "modulo"), tup_el_459, (ErlangAtom "integer"),
          tup_el_463])
  in let
    tup_el_480 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_484 = (make_string "Arg0 := Arg1  ^ Arg2.")
  in let
    head_465 =
      (ErlangTuple
         [(ErlangAtom "POW"), (ErlangInt (DBI.fromInt 25)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "pow"), tup_el_480, (ErlangAtom "integer"),
          tup_el_484])
  in let tup_el_499 = (ErlangTuple [(ErlangAtom "any")])
  in let tup_el_502 = (make_string "Arg0 := Arg1.")
  in let
    head_486 =
      (ErlangTuple
         [(ErlangAtom "STORE"), (ErlangInt (DBI.fromInt 26)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "store"), tup_el_499, (ErlangAtom "any"),
          tup_el_502])
  in let tup_el_517 = (ErlangTuple [(ErlangAtom "any")])
  in let tup_el_520 = (make_string "Arg0 := sha3(Arg1).")
  in let
    head_504 =
      (ErlangTuple
         [(ErlangAtom "SHA3"), (ErlangInt (DBI.fromInt 27)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "sha3"), tup_el_517, (ErlangAtom "hash"),
          tup_el_520])
  in let tup_el_535 = (ErlangTuple [(ErlangAtom "any")])
  in let tup_el_538 = (make_string "Arg0 := sha256(Arg1).")
  in let
    head_522 =
      (ErlangTuple
         [(ErlangAtom "SHA256"), (ErlangInt (DBI.fromInt 28)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "sha256"), tup_el_535, (ErlangAtom "hash"),
          tup_el_538])
  in let tup_el_553 = (ErlangTuple [(ErlangAtom "any")])
  in let tup_el_556 = (make_string "Arg0 := blake2b(Arg1).")
  in let
    head_540 =
      (ErlangTuple
         [(ErlangAtom "BLAKE2B"), (ErlangInt (DBI.fromInt 29)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "blake2b"), tup_el_553, (ErlangAtom "hash"),
          tup_el_556])
  in let
    tup_el_573 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_577 = (make_string "Arg0 := Arg1  < Arg2.")
  in let
    head_558 =
      (ErlangTuple
         [(ErlangAtom "LT"), (ErlangInt (DBI.fromInt 30)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "lt"), tup_el_573, (ErlangAtom "boolean"),
          tup_el_577])
  in let
    tup_el_594 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_598 = (make_string "Arg0 := Arg1  > Arg2.")
  in let
    head_579 =
      (ErlangTuple
         [(ErlangAtom "GT"), (ErlangInt (DBI.fromInt 31)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "gt"), tup_el_594, (ErlangAtom "boolean"),
          tup_el_598])
  in let
    tup_el_615 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_619 = (make_string "Arg0 := Arg1  = Arg2.")
  in let
    head_600 =
      (ErlangTuple
         [(ErlangAtom "EQ"), (ErlangInt (DBI.fromInt 32)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "eq"), tup_el_615, (ErlangAtom "boolean"),
          tup_el_619])
  in let
    tup_el_636 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_640 = (make_string "Arg0 := Arg1 =< Arg2.")
  in let
    head_621 =
      (ErlangTuple
         [(ErlangAtom "ELT"), (ErlangInt (DBI.fromInt 33)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "elt"), tup_el_636, (ErlangAtom "boolean"),
          tup_el_640])
  in let
    tup_el_657 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_661 = (make_string "Arg0 := Arg1 >= Arg2.")
  in let
    head_642 =
      (ErlangTuple
         [(ErlangAtom "EGT"), (ErlangInt (DBI.fromInt 34)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "egt"), tup_el_657, (ErlangAtom "boolean"),
          tup_el_661])
  in let
    tup_el_678 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "integer")])
  in let tup_el_682 = (make_string "Arg0 := Arg1 /= Arg2.")
  in let
    head_663 =
      (ErlangTuple
         [(ErlangAtom "NEQ"), (ErlangInt (DBI.fromInt 35)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "neq"), tup_el_678, (ErlangAtom "boolean"),
          tup_el_682])
  in let
    tup_el_699 =
      (ErlangTuple [(ErlangAtom "boolean"), (ErlangAtom "boolean")])
  in let tup_el_703 = (make_string "Arg0 := Arg1 and Arg2.")
  in let
    head_684 =
      (ErlangTuple
         [(ErlangAtom "AND"), (ErlangInt (DBI.fromInt 36)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "and_op"), tup_el_699, (ErlangAtom "boolean"),
          tup_el_703])
  in let
    tup_el_720 =
      (ErlangTuple [(ErlangAtom "boolean"), (ErlangAtom "boolean")])
  in let tup_el_724 = (make_string "Arg0 := Arg1  or Arg2.")
  in let
    head_705 =
      (ErlangTuple
         [(ErlangAtom "OR"), (ErlangInt (DBI.fromInt 37)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "or_op"), tup_el_720, (ErlangAtom "boolean"),
          tup_el_724])
  in let tup_el_739 = (ErlangTuple [(ErlangAtom "boolean")])
  in let tup_el_742 = (make_string "Arg0 := not Arg1.")
  in let
    head_726 =
      (ErlangTuple
         [(ErlangAtom "NOT"), (ErlangInt (DBI.fromInt 38)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "not_op"), tup_el_739, (ErlangAtom "boolean"),
          tup_el_742])
  in let tup_el_757 = (ErlangTuple [(ErlangAtom "integer")])
  in let
    tup_el_760 =
      (make_string "Arg0 := tuple of size = Arg1. Elements on stack.")
  in let
    head_744 =
      (ErlangTuple
         [(ErlangAtom "TUPLE"), (ErlangInt (DBI.fromInt 39)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "ii") ErlangEmptyList)),
          (ErlangAtom "tuple"), tup_el_757, (ErlangAtom "tuple"),
          tup_el_760])
  in let
    tup_el_777 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "tuple")])
  in let tup_el_781 = (make_string "Arg1 := element(Arg2, Arg3).")
  in let
    head_762 =
      (ErlangTuple
         [(ErlangAtom "ELEMENT"), (ErlangInt (DBI.fromInt 40)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "element_op"), tup_el_777, (ErlangAtom "any"),
          tup_el_781])
  in let
    tup_el_800 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangAtom "tuple"),
          (ErlangAtom "any")])
  in let
    tup_el_805 =
      (make_string
         "Arg0 := a new tuple similar to Arg2, but with element number Arg1 replaced by Arg3.")
  in let
    head_783 =
      (ErlangTuple
         [(ErlangAtom "SETELEMENT"), (ErlangInt (DBI.fromInt 41)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "setelement"), tup_el_800, (ErlangAtom "tuple"),
          tup_el_805])
  in let tup_el_818 = (ErlangTuple [])
  in let tup_el_820 = (make_string "Arg0 := #{}.")
  in let
    head_807 =
      (ErlangTuple
         [(ErlangAtom "MAP_EMPTY"), (ErlangInt (DBI.fromInt 42)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "map_empty"), tup_el_818, (ErlangAtom "map"),
          tup_el_820])
  in let
    tup_el_837 =
      (ErlangTuple [(ErlangAtom "map"), (ErlangAtom "any")])
  in let
    tup_el_841 = (make_string "Arg0 := lookup key Arg2 in map Arg1.")
  in let
    head_822 =
      (ErlangTuple
         [(ErlangAtom "MAP_LOOKUP"), (ErlangInt (DBI.fromInt 43)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "map_lookup"), tup_el_837, (ErlangAtom "any"),
          tup_el_841])
  in let
    tup_el_860 =
      (ErlangTuple
         [(ErlangAtom "map"), (ErlangAtom "any"), (ErlangAtom "any")])
  in let
    tup_el_865 =
      (make_string
         "Arg0 := lookup key Arg2 in map Arg1 if key exists in map otherwise Arg0 := Arg3.")
  in let
    head_843 =
      (ErlangTuple
         [(ErlangAtom "MAP_LOOKUPD"), (ErlangInt (DBI.fromInt 44)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "map_lookup"), tup_el_860, (ErlangAtom "any"),
          tup_el_865])
  in let
    tup_el_884 =
      (ErlangTuple
         [(ErlangAtom "map"), (ErlangAtom "any"), (ErlangAtom "any")])
  in let
    tup_el_889 =
      (make_string
         "Arg0 := update key Arg2 in map Arg1 with value Arg3.")
  in let
    head_867 =
      (ErlangTuple
         [(ErlangAtom "MAP_UPDATE"), (ErlangInt (DBI.fromInt 45)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "map_update"), tup_el_884, (ErlangAtom "map"),
          tup_el_889])
  in let
    tup_el_906 =
      (ErlangTuple [(ErlangAtom "map"), (ErlangAtom "any")])
  in let
    tup_el_910 =
      (make_string "Arg0 := delete key Arg2 from map Arg1.")
  in let
    head_891 =
      (ErlangTuple
         [(ErlangAtom "MAP_DELETE"), (ErlangInt (DBI.fromInt 46)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "map_delete"), tup_el_906, (ErlangAtom "map"),
          tup_el_910])
  in let
    tup_el_927 =
      (ErlangTuple [(ErlangAtom "map"), (ErlangAtom "any")])
  in let
    tup_el_931 =
      (make_string "Arg0 := true if key Arg2 is in map Arg1.")
  in let
    head_912 =
      (ErlangTuple
         [(ErlangAtom "MAP_MEMBER"), (ErlangInt (DBI.fromInt 47)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "map_member"), tup_el_927, (ErlangAtom "boolean"),
          tup_el_931])
  in let
    tup_el_949 =
      (ErlangTuple
         [(ErlangAtom "tuple"),
          (ErlangCons (ErlangAtom "any")
             (ErlangCons (ErlangAtom "any") ErlangEmptyList))])
  in let
    tup_el_947 = (ErlangTuple [(ErlangAtom "list"), tup_el_949])
  in let tup_el_946 = (ErlangTuple [tup_el_947])
  in let
    tup_el_957 =
      (make_string
         "Arg0 := make a map from (key, value) list in Arg1.")
  in let
    head_933 =
      (ErlangTuple
         [(ErlangAtom "MAP_FROM_LIST"), (ErlangInt (DBI.fromInt 48)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "map_from_list"), tup_el_946, (ErlangAtom "map"),
          tup_el_957])
  in let tup_el_972 = (ErlangTuple [(ErlangAtom "map")])
  in let
    tup_el_975 = (make_string "Arg0 := The size of the map Arg1.")
  in let
    head_959 =
      (ErlangTuple
         [(ErlangAtom "MAP_SIZE"), (ErlangInt (DBI.fromInt 49)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "map_size_"), tup_el_972, (ErlangAtom "integer"),
          tup_el_975])
  in let tup_el_990 = (ErlangTuple [(ErlangAtom "map")])
  in let
    tup_el_993 =
      (make_string
         "Arg0 := The tuple list representation of the map Arg1.")
  in let
    head_977 =
      (ErlangTuple
         [(ErlangAtom "MAP_TO_LIST"), (ErlangInt (DBI.fromInt 50)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "map_to_list"), tup_el_990, (ErlangAtom "list"),
          tup_el_993])
  in let tup_el_1008 = (ErlangTuple [(ErlangAtom "list")])
  in let tup_el_1011 = (make_string "Arg0 := true if Arg1 == [].")
  in let
    head_995 =
      (ErlangTuple
         [(ErlangAtom "IS_NIL"), (ErlangInt (DBI.fromInt 51)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "is_nil"), tup_el_1008, (ErlangAtom "boolean"),
          tup_el_1011])
  in let
    tup_el_1028 =
      (ErlangTuple [(ErlangAtom "any"), (ErlangAtom "list")])
  in let tup_el_1032 = (make_string "Arg0 := [Arg1|Arg2].")
  in let
    head_1013 =
      (ErlangTuple
         [(ErlangAtom "CONS"), (ErlangInt (DBI.fromInt 52)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "cons"), tup_el_1028, (ErlangAtom "list"),
          tup_el_1032])
  in let tup_el_1047 = (ErlangTuple [(ErlangAtom "list")])
  in let tup_el_1050 = (make_string "Arg0 := head of list Arg1.")
  in let
    head_1034 =
      (ErlangTuple
         [(ErlangAtom "HD"), (ErlangInt (DBI.fromInt 53)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "hd"), tup_el_1047, (ErlangAtom "any"), tup_el_1050])
  in let tup_el_1065 = (ErlangTuple [(ErlangAtom "list")])
  in let tup_el_1068 = (make_string "Arg0 := tail of list Arg1.")
  in let
    head_1052 =
      (ErlangTuple
         [(ErlangAtom "TL"), (ErlangInt (DBI.fromInt 54)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "tl"), tup_el_1065, (ErlangAtom "list"),
          tup_el_1068])
  in let tup_el_1083 = (ErlangTuple [(ErlangAtom "list")])
  in let tup_el_1086 = (make_string "Arg0 := length of list Arg1.")
  in let
    head_1070 =
      (ErlangTuple
         [(ErlangAtom "LENGTH"), (ErlangInt (DBI.fromInt 55)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "length"), tup_el_1083, (ErlangAtom "integer"),
          tup_el_1086])
  in let tup_el_1099 = (ErlangTuple [])
  in let tup_el_1101 = (make_string "Arg0 := [].")
  in let
    head_1088 =
      (ErlangTuple
         [(ErlangAtom "NIL"), (ErlangInt (DBI.fromInt 56)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "nil"), tup_el_1099, (ErlangAtom "list"),
          tup_el_1101])
  in let
    tup_el_1118 =
      (ErlangTuple [(ErlangAtom "list"), (ErlangAtom "list")])
  in let tup_el_1122 = (make_string "Arg0 := Arg1 ++ Arg2.")
  in let
    head_1103 =
      (ErlangTuple
         [(ErlangAtom "APPEND"), (ErlangInt (DBI.fromInt 57)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "append"), tup_el_1118, (ErlangAtom "list"),
          tup_el_1122])
  in let
    tup_el_1139 =
      (ErlangTuple [(ErlangAtom "string"), (ErlangAtom "string")])
  in let
    tup_el_1143 =
      (make_string "Arg0 := string Arg1 followed by string Arg2.")
  in let
    head_1124 =
      (ErlangTuple
         [(ErlangAtom "STR_JOIN"), (ErlangInt (DBI.fromInt 58)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "str_join"), tup_el_1139, (ErlangAtom "string"),
          tup_el_1143])
  in let tup_el_1158 = (ErlangTuple [(ErlangAtom "integer")])
  in let
    tup_el_1161 =
      (make_string "Arg0 := turn integer Arg1 into a string.")
  in let
    head_1145 =
      (ErlangTuple
         [(ErlangAtom "INT_TO_STR"), (ErlangInt (DBI.fromInt 59)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "int_to_str"), tup_el_1158, (ErlangAtom "string"),
          tup_el_1161])
  in let tup_el_1176 = (ErlangTuple [(ErlangAtom "address")])
  in let
    tup_el_1179 =
      (make_string "Arg0 := turn address Arg1 into a string.")
  in let
    head_1163 =
      (ErlangTuple
         [(ErlangAtom "ADDR_TO_STR"), (ErlangInt (DBI.fromInt 60)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "addr_to_str"), tup_el_1176, (ErlangAtom "string"),
          tup_el_1179])
  in let tup_el_1194 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_1197 = (make_string "Arg0 := the reverse of string Arg1.")
  in let
    head_1181 =
      (ErlangTuple
         [(ErlangAtom "STR_REVERSE"), (ErlangInt (DBI.fromInt 61)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "str_reverse"), tup_el_1194, (ErlangAtom "string"),
          tup_el_1197])
  in let tup_el_1212 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_1215 =
      (make_string "Arg0 := The length of the string Arg1.")
  in let
    head_1199 =
      (ErlangTuple
         [(ErlangAtom "STR_LENGTH"), (ErlangInt (DBI.fromInt 62)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "str_length"), tup_el_1212, (ErlangAtom "integer"),
          tup_el_1215])
  in let tup_el_1230 = (ErlangTuple [(ErlangAtom "bytes")])
  in let tup_el_1233 = (make_string "Arg0 := bytes_to_int(Arg1)")
  in let
    head_1217 =
      (ErlangTuple
         [(ErlangAtom "BYTES_TO_INT"), (ErlangInt (DBI.fromInt 63)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bytes_to_int"), tup_el_1230, (ErlangAtom "integer"),
          tup_el_1233])
  in let tup_el_1248 = (ErlangTuple [(ErlangAtom "bytes")])
  in let tup_el_1251 = (make_string "Arg0 := bytes_to_str(Arg1)")
  in let
    head_1235 =
      (ErlangTuple
         [(ErlangAtom "BYTES_TO_STR"), (ErlangInt (DBI.fromInt 64)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bytes_to_str"), tup_el_1248, (ErlangAtom "string"),
          tup_el_1251])
  in let
    tup_el_1268 =
      (ErlangTuple [(ErlangAtom "bytes"), (ErlangAtom "bytes")])
  in let
    tup_el_1272 = (make_string "Arg0 := bytes_concat(Arg1, Arg2)")
  in let
    head_1253 =
      (ErlangTuple
         [(ErlangAtom "BYTES_CONCAT"), (ErlangInt (DBI.fromInt 65)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bytes_concat"), tup_el_1268, (ErlangAtom "bytes"),
          tup_el_1272])
  in let
    tup_el_1289 =
      (ErlangTuple [(ErlangAtom "bytes"), (ErlangAtom "integer")])
  in let
    tup_el_1293 =
      (make_string
         "Arg0 := bytes_split(Arg2, Arg1), where Arg2 is the length of the first chunk.")
  in let
    head_1274 =
      (ErlangTuple
         [(ErlangAtom "BYTES_SPLIT"), (ErlangInt (DBI.fromInt 66)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bytes_split"), tup_el_1289, (ErlangAtom "bytes"),
          tup_el_1293])
  in let tup_el_1308 = (ErlangTuple [(ErlangAtom "integer")])
  in let
    tup_el_1311 =
      (make_string "Arg0 := turn integer Arg1 into an address.")
  in let
    head_1295 =
      (ErlangTuple
         [(ErlangAtom "INT_TO_ADDR"), (ErlangInt (DBI.fromInt 67)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "int_to_addr"), tup_el_1308, (ErlangAtom "address"),
          tup_el_1311])
  in let
    tup_el_1330 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangAtom "integer"),
          (ErlangAtom "integer")])
  in let
    tup_el_1335 =
      (make_string
         "Arg0 := create a variant of size Arg1 with the tag Arg2 (Arg2 < Arg1) and take Arg3 elements from the stack.")
  in let
    head_1313 =
      (ErlangTuple
         [(ErlangAtom "VARIANT"), (ErlangInt (DBI.fromInt 68)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "variant"), tup_el_1330, (ErlangAtom "variant"),
          tup_el_1335])
  in let
    tup_el_1352 =
      (ErlangTuple [(ErlangAtom "variant"), (ErlangAtom "integer")])
  in let
    tup_el_1356 =
      (make_string "Arg0 := true if variant Arg1 has the tag Arg2.")
  in let
    head_1337 =
      (ErlangTuple
         [(ErlangAtom "VARIANT_TEST"), (ErlangInt (DBI.fromInt 69)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "variant_test"), tup_el_1352, (ErlangAtom "boolean"),
          tup_el_1356])
  in let
    tup_el_1373 =
      (ErlangTuple [(ErlangAtom "variant"), (ErlangAtom "integer")])
  in let
    tup_el_1377 =
      (make_string "Arg0 := element number Arg2 from variant Arg1.")
  in let
    head_1358 =
      (ErlangTuple
         [(ErlangAtom "VARIANT_ELEMENT"), (ErlangInt (DBI.fromInt 70)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "variant_element"), tup_el_1373, (ErlangAtom "any"),
          tup_el_1377])
  in let tup_el_1388 = (ErlangTuple [])
  in let
    tup_el_1390 = (make_string "push an empty bitmap on the stack.")
  in let
    head_1379 =
      (ErlangTuple
         [(ErlangAtom "BITS_NONEA"), (ErlangInt (DBI.fromInt 71)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "bits_none"), tup_el_1388, (ErlangAtom "bits"),
          tup_el_1390])
  in let tup_el_1403 = (ErlangTuple [])
  in let tup_el_1405 = (make_string "Arg0 := empty bitmap.")
  in let
    head_1392 =
      (ErlangTuple
         [(ErlangAtom "BITS_NONE"), (ErlangInt (DBI.fromInt 72)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "bits_none"), tup_el_1403, (ErlangAtom "bits"),
          tup_el_1405])
  in let tup_el_1416 = (ErlangTuple [])
  in let
    tup_el_1418 = (make_string "push a full bitmap on the stack.")
  in let
    head_1407 =
      (ErlangTuple
         [(ErlangAtom "BITS_ALLA"), (ErlangInt (DBI.fromInt 73)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "bits_all"), tup_el_1416, (ErlangAtom "bits"),
          tup_el_1418])
  in let tup_el_1431 = (ErlangTuple [])
  in let tup_el_1433 = (make_string "Arg0 := full bitmap.")
  in let
    head_1420 =
      (ErlangTuple
         [(ErlangAtom "BITS_ALL"), (ErlangInt (DBI.fromInt 74)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "bits_all"), tup_el_1431, (ErlangAtom "bits"),
          tup_el_1433])
  in let tup_el_1448 = (ErlangTuple [(ErlangAtom "integer")])
  in let
    tup_el_1451 = (make_string "Arg0 := bitmap with Arg1 bits set.")
  in let
    head_1435 =
      (ErlangTuple
         [(ErlangAtom "BITS_ALL_N"), (ErlangInt (DBI.fromInt 75)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bits_all_n"), tup_el_1448, (ErlangAtom "bits"),
          tup_el_1451])
  in let
    tup_el_1468 =
      (ErlangTuple [(ErlangAtom "bits"), (ErlangAtom "integer")])
  in let
    tup_el_1472 =
      (make_string "Arg0 := set bit Arg2 of bitmap Arg1.")
  in let
    head_1453 =
      (ErlangTuple
         [(ErlangAtom "BITS_SET"), (ErlangInt (DBI.fromInt 76)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bits_set"), tup_el_1468, (ErlangAtom "bits"),
          tup_el_1472])
  in let
    tup_el_1489 =
      (ErlangTuple [(ErlangAtom "bits"), (ErlangAtom "integer")])
  in let
    tup_el_1493 =
      (make_string "Arg0 := clear bit Arg2 of bitmap Arg1.")
  in let
    head_1474 =
      (ErlangTuple
         [(ErlangAtom "BITS_CLEAR"), (ErlangInt (DBI.fromInt 77)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bits_clear"), tup_el_1489, (ErlangAtom "bits"),
          tup_el_1493])
  in let
    tup_el_1510 =
      (ErlangTuple [(ErlangAtom "bits"), (ErlangAtom "integer")])
  in let
    tup_el_1514 =
      (make_string "Arg0 := true if bit Arg2 of bitmap Arg1 is set.")
  in let
    head_1495 =
      (ErlangTuple
         [(ErlangAtom "BITS_TEST"), (ErlangInt (DBI.fromInt 78)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bits_test"), tup_el_1510, (ErlangAtom "boolean"),
          tup_el_1514])
  in let tup_el_1529 = (ErlangTuple [(ErlangAtom "bits")])
  in let
    tup_el_1532 =
      (make_string
         "Arg0 := sum of set bits in bitmap Arg1. Exception if infinit bitmap.")
  in let
    head_1516 =
      (ErlangTuple
         [(ErlangAtom "BITS_SUM"), (ErlangInt (DBI.fromInt 79)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bits_sum"), tup_el_1529, (ErlangAtom "integer"),
          tup_el_1532])
  in let
    tup_el_1549 =
      (ErlangTuple [(ErlangAtom "bits"), (ErlangAtom "bits")])
  in let tup_el_1553 = (make_string "Arg0 := Arg1 v Arg2.")
  in let
    head_1534 =
      (ErlangTuple
         [(ErlangAtom "BITS_OR"), (ErlangInt (DBI.fromInt 80)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bits_or"), tup_el_1549, (ErlangAtom "bits"),
          tup_el_1553])
  in let
    tup_el_1570 =
      (ErlangTuple [(ErlangAtom "bits"), (ErlangAtom "bits")])
  in let tup_el_1574 = (make_string "Arg0 := Arg1 ^ Arg2.")
  in let
    head_1555 =
      (ErlangTuple
         [(ErlangAtom "BITS_AND"), (ErlangInt (DBI.fromInt 81)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bits_and"), tup_el_1570, (ErlangAtom "bits"),
          tup_el_1574])
  in let
    tup_el_1591 =
      (ErlangTuple [(ErlangAtom "bits"), (ErlangAtom "bits")])
  in let tup_el_1595 = (make_string "Arg0 := Arg1 - Arg2.")
  in let
    head_1576 =
      (ErlangTuple
         [(ErlangAtom "BITS_DIFF"), (ErlangInt (DBI.fromInt 82)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bits_diff"), tup_el_1591, (ErlangAtom "bits"),
          tup_el_1595])
  in let tup_el_1608 = (ErlangTuple [])
  in let
    tup_el_1610 =
      (make_string "Arg0 := The current contract balance.")
  in let
    head_1597 =
      (ErlangTuple
         [(ErlangAtom "BALANCE"), (ErlangInt (DBI.fromInt 83)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "balance"), tup_el_1608, (ErlangAtom "integer"),
          tup_el_1610])
  in let tup_el_1623 = (ErlangTuple [])
  in let
    tup_el_1625 =
      (make_string
         "Arg0 := Address of contract called by the call transaction.")
  in let
    head_1612 =
      (ErlangTuple
         [(ErlangAtom "ORIGIN"), (ErlangInt (DBI.fromInt 84)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "origin"), tup_el_1623, (ErlangAtom "address"),
          tup_el_1625])
  in let tup_el_1638 = (ErlangTuple [])
  in let
    tup_el_1640 =
      (make_string
         "Arg0 := The address that signed the call transaction.")
  in let
    head_1627 =
      (ErlangTuple
         [(ErlangAtom "CALLER"), (ErlangInt (DBI.fromInt 85)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "caller"), tup_el_1638, (ErlangAtom "address"),
          tup_el_1640])
  in let tup_el_1655 = (ErlangTuple [(ErlangAtom "integer")])
  in let
    tup_el_1658 = (make_string "Arg0 := The blockhash at height.")
  in let
    head_1642 =
      (ErlangTuple
         [(ErlangAtom "BLOCKHASH"), (ErlangInt (DBI.fromInt 86)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "blockhash"), tup_el_1655, (ErlangAtom "hash"),
          tup_el_1658])
  in let tup_el_1671 = (ErlangTuple [])
  in let
    tup_el_1673 =
      (make_string "Arg0 := The address of the current beneficiary.")
  in let
    head_1660 =
      (ErlangTuple
         [(ErlangAtom "BENEFICIARY"), (ErlangInt (DBI.fromInt 87)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "beneficiary"), tup_el_1671, (ErlangAtom "address"),
          tup_el_1673])
  in let tup_el_1686 = (ErlangTuple [])
  in let
    tup_el_1688 =
      (make_string
         "Arg0 := The current timestamp. Unrelaiable, don\'t use for anything.")
  in let
    head_1675 =
      (ErlangTuple
         [(ErlangAtom "TIMESTAMP"), (ErlangInt (DBI.fromInt 88)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "timestamp"), tup_el_1686, (ErlangAtom "integer"),
          tup_el_1688])
  in let tup_el_1701 = (ErlangTuple [])
  in let
    tup_el_1703 =
      (make_string
         "Arg0 := The block height of the cureent generation.")
  in let
    head_1690 =
      (ErlangTuple
         [(ErlangAtom "GENERATION"), (ErlangInt (DBI.fromInt 89)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "generation"), tup_el_1701, (ErlangAtom "integer"),
          tup_el_1703])
  in let tup_el_1716 = (ErlangTuple [])
  in let
    tup_el_1718 =
      (make_string "Arg0 := The current micro block number.")
  in let
    head_1705 =
      (ErlangTuple
         [(ErlangAtom "MICROBLOCK"), (ErlangInt (DBI.fromInt 90)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "microblock"), tup_el_1716, (ErlangAtom "integer"),
          tup_el_1718])
  in let tup_el_1731 = (ErlangTuple [])
  in let
    tup_el_1733 = (make_string "Arg0 := The current difficulty.")
  in let
    head_1720 =
      (ErlangTuple
         [(ErlangAtom "DIFFICULTY"), (ErlangInt (DBI.fromInt 91)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "difficulty"), tup_el_1731, (ErlangAtom "integer"),
          tup_el_1733])
  in let tup_el_1746 = (ErlangTuple [])
  in let
    tup_el_1748 = (make_string "Arg0 := The current gaslimit.")
  in let
    head_1735 =
      (ErlangTuple
         [(ErlangAtom "GASLIMIT"), (ErlangInt (DBI.fromInt 92)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "gaslimit"), tup_el_1746, (ErlangAtom "integer"),
          tup_el_1748])
  in let tup_el_1761 = (ErlangTuple [])
  in let
    tup_el_1763 = (make_string "Arg0 := The amount of gas left.")
  in let
    head_1750 =
      (ErlangTuple
         [(ErlangAtom "GAS"), (ErlangInt (DBI.fromInt 93)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "gas"), tup_el_1761, (ErlangAtom "integer"),
          tup_el_1763])
  in let tup_el_1776 = (ErlangTuple [])
  in let
    tup_el_1778 =
      (make_string "Arg0 := The current contract address.")
  in let
    head_1765 =
      (ErlangTuple
         [(ErlangAtom "ADDRESS"), (ErlangInt (DBI.fromInt 94)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "address"), tup_el_1776, (ErlangAtom "address"),
          tup_el_1778])
  in let tup_el_1791 = (ErlangTuple [])
  in let
    tup_el_1793 = (make_string "Arg0 := The current gas price.")
  in let
    head_1780 =
      (ErlangTuple
         [(ErlangAtom "GASPRICE"), (ErlangInt (DBI.fromInt 95)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "gasprice"), tup_el_1791, (ErlangAtom "integer"),
          tup_el_1793])
  in let tup_el_1806 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_1809 =
      (make_string "Create a log message in the call object.")
  in let
    head_1795 =
      (ErlangTuple
         [(ErlangAtom "LOG0"), (ErlangInt (DBI.fromInt 96)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1000)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "log"), tup_el_1806, (ErlangAtom "none"),
          tup_el_1809])
  in let
    tup_el_1824 =
      (ErlangTuple [(ErlangAtom "integer"), (ErlangAtom "string")])
  in let
    tup_el_1828 =
      (make_string
         "Create a log message with one topic in the call object.")
  in let
    head_1811 =
      (ErlangTuple
         [(ErlangAtom "LOG1"), (ErlangInt (DBI.fromInt 97)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "log"), tup_el_1824, (ErlangAtom "none"),
          tup_el_1828])
  in let
    tup_el_1845 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangAtom "integer"),
          (ErlangAtom "string")])
  in let
    tup_el_1850 =
      (make_string
         "Create a log message with two topics in the call object.")
  in let
    head_1830 =
      (ErlangTuple
         [(ErlangAtom "LOG2"), (ErlangInt (DBI.fromInt 98)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1200)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "log"), tup_el_1845, (ErlangAtom "none"),
          tup_el_1850])
  in let
    tup_el_1869 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangAtom "integer"),
          (ErlangAtom "integer"), (ErlangAtom "string")])
  in let
    tup_el_1875 =
      (make_string
         "Create a log message with three topics in the call object.")
  in let
    head_1852 =
      (ErlangTuple
         [(ErlangAtom "LOG3"), (ErlangInt (DBI.fromInt 99)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1300)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "log"), tup_el_1869, (ErlangAtom "none"),
          tup_el_1875])
  in let
    tup_el_1896 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangAtom "integer"),
          (ErlangAtom "integer"), (ErlangAtom "integer"),
          (ErlangAtom "string")])
  in let
    tup_el_1903 =
      (make_string
         "Create a log message with four topics in the call object.")
  in let
    head_1877 =
      (ErlangTuple
         [(ErlangAtom "LOG4"), (ErlangInt (DBI.fromInt 100)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1400)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
          (ErlangAtom "log"), tup_el_1896, (ErlangAtom "none"),
          tup_el_1903])
  in let
    tup_el_1918 =
      (ErlangTuple [(ErlangAtom "address"), (ErlangAtom "integer")])
  in let
    tup_el_1922 =
      (make_string
         "Transfer Arg1 tokens to account Arg0. (If the contract account has at least that many tokens.")
  in let
    head_1905 =
      (ErlangTuple
         [(ErlangAtom "SPEND"), (ErlangInt (DBI.fromInt 101)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "spend"), tup_el_1918, (ErlangAtom "none"),
          tup_el_1922])
  in let
    tup_el_1947 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "address"),
          (ErlangAtom "integer"), (ErlangAtom "variant"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep")])
  in let
    tup_el_1955 =
      (make_string
         "Arg0 := New oracle with address Arg2, query fee Arg3, TTL Arg4, query type Arg5 and response type Arg6. Arg0 contains delegation signature.")
  in let
    head_1924 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_REGISTER"), (ErlangInt (DBI.fromInt 102)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a")
                         (ErlangCons (ErlangAtom "a")
                            (ErlangCons (ErlangAtom "a") ErlangEmptyList))))))),
          (ErlangAtom "oracle_register"), tup_el_1947,
          (ErlangAtom "oracle"), tup_el_1955])
  in let
    tup_el_1982 =
      (ErlangTuple
         [(ErlangAtom "oracle"), (ErlangAtom "any"),
          (ErlangAtom "integer"), (ErlangAtom "variant"),
          (ErlangAtom "variant"), (ErlangAtom "typerep"),
          (ErlangAtom "typerep")])
  in let
    tup_el_1991 =
      (make_string
         "Arg0 := New oracle query for oracle Arg1, question in Arg2, query fee in Arg3, query TTL in Arg4, response TTL in Arg5. Typereps for checking oracle type is in Arg6 and Arg7.")
  in let
    head_1957 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_QUERY"), (ErlangInt (DBI.fromInt 103)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a")
                         (ErlangCons (ErlangAtom "a")
                            (ErlangCons (ErlangAtom "a")
                               (ErlangCons (ErlangAtom "a")
                                  ErlangEmptyList)))))))),
          (ErlangAtom "oracle_query"), tup_el_1982,
          (ErlangAtom "oracle_query"), tup_el_1991])
  in let
    tup_el_2014 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "oracle"),
          (ErlangAtom "oracle_query"), (ErlangAtom "any"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep")])
  in let
    tup_el_2022 =
      (make_string
         "Respond as oracle Arg1 to query in Arg2 with response Arg3. Arg0 contains delegation signature. Typereps for checking oracle type is in Arg4 and Arg5.")
  in let
    head_1993 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_RESPOND"), (ErlangInt (DBI.fromInt 104)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a")
                         (ErlangCons (ErlangAtom "a") ErlangEmptyList)))))),
          (ErlangAtom "oracle_respond"), tup_el_2014, (ErlangAtom "none"),
          tup_el_2022])
  in let
    tup_el_2039 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "oracle"),
          (ErlangAtom "variant")])
  in let
    tup_el_2044 =
      (make_string
         "Extend oracle in Arg1 with TTL in Arg2. Arg0 contains delegation signature.")
  in let
    head_2024 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_EXTEND"), (ErlangInt (DBI.fromInt 105)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "oracle_extend"), tup_el_2039, (ErlangAtom "none"),
          tup_el_2044])
  in let
    tup_el_2065 =
      (ErlangTuple
         [(ErlangAtom "oracle"), (ErlangAtom "oracle_query"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep")])
  in let
    tup_el_2071 =
      (make_string
         "Arg0 := option variant with answer (if any) from oracle query in Arg1 given by oracle Arg0. Typereps for checking oracle type is in Arg3 and Arg4.")
  in let
    head_2046 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_GET_ANSWER"), (ErlangInt (DBI.fromInt 106)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
          (ErlangAtom "oracle_get_answer"), tup_el_2065,
          (ErlangAtom "any"), tup_el_2071])
  in let
    tup_el_2092 =
      (ErlangTuple
         [(ErlangAtom "oracle"), (ErlangAtom "oracle_query"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep")])
  in let
    tup_el_2098 =
      (make_string
         "Arg0 := question in oracle query Arg2 given to oracle Arg1. Typereps for checking oracle type is in Arg3 and Arg4.")
  in let
    head_2073 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_GET_QUESTION"),
          (ErlangInt (DBI.fromInt 107)), (ErlangAtom "false"),
          (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
          (ErlangAtom "oracle_get_question"), tup_el_2092,
          (ErlangAtom "any"), tup_el_2098])
  in let tup_el_2113 = (ErlangTuple [(ErlangAtom "oracle")])
  in let
    tup_el_2116 = (make_string "Arg0 := query fee for oracle Arg1")
  in let
    head_2100 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_QUERY_FEE"), (ErlangInt (DBI.fromInt 108)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "oracle_query_fee"), tup_el_2113,
          (ErlangAtom "integer"), tup_el_2116])
  in let
    tup_el_2135 =
      (ErlangTuple
         [(ErlangAtom "string"), (ErlangAtom "string"),
          (ErlangAtom "typerep")])
  in let
    tup_el_2140 =
      (make_string
         "Resolve name in Arg0 with tag Arg1. Arg2 describes the type parameter of the resolved name.")
  in let
    head_2118 =
      (ErlangTuple
         [(ErlangAtom "AENS_RESOLVE"), (ErlangInt (DBI.fromInt 109)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "aens_resolve"), tup_el_2135, (ErlangAtom "variant"),
          tup_el_2140])
  in let
    tup_el_2157 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "address"),
          (ErlangAtom "hash")])
  in let
    tup_el_2162 =
      (make_string
         "Preclaim the hash in Arg2 for address in Arg1. Arg0 contains delegation signature.")
  in let
    head_2142 =
      (ErlangTuple
         [(ErlangAtom "AENS_PRECLAIM"), (ErlangInt (DBI.fromInt 110)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "aens_preclaim"), tup_el_2157, (ErlangAtom "none"),
          tup_el_2162])
  in let
    tup_el_2183 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "address"),
          (ErlangAtom "string"), (ErlangAtom "integer"),
          (ErlangAtom "integer")])
  in let
    tup_el_2190 =
      (make_string
         "Attempt to claim the name in Arg2 for address in Arg1 at a price in Arg4. Arg3 contains the salt used to hash the preclaim. Arg0 contains delegation signature.")
  in let
    head_2164 =
      (ErlangTuple
         [(ErlangAtom "AENS_CLAIM"), (ErlangInt (DBI.fromInt 111)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
          (ErlangAtom "aens_claim"), tup_el_2183, (ErlangAtom "none"),
          tup_el_2190])
  in let
    tup_el_2213 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "address"),
          (ErlangAtom "string"), (ErlangAtom "variant"),
          (ErlangAtom "variant"), (ErlangAtom "variant")])
  in let
    tup_el_2221 =
      (make_string
         "Updates name in Arg2 for address in Arg1. Arg3 contains optional ttl (of type Chain.ttl), Arg4 contains optional client_ttl (of type int), Arg5 contains optional pointers (of type map(string, pointee))")
  in let
    head_2192 =
      (ErlangTuple
         [(ErlangAtom "AENS_UPDATE"), (ErlangInt (DBI.fromInt 112)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a")
                         (ErlangCons (ErlangAtom "a") ErlangEmptyList)))))),
          (ErlangAtom "aens_update"), tup_el_2213, (ErlangAtom "none"),
          tup_el_2221])
  in let
    tup_el_2240 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "address"),
          (ErlangAtom "address"), (ErlangAtom "string")])
  in let
    tup_el_2246 =
      (make_string
         "Transfer ownership of name Arg3 from account Arg1 to Arg2. Arg0 contains delegation signature.")
  in let
    head_2223 =
      (ErlangTuple
         [(ErlangAtom "AENS_TRANSFER"), (ErlangInt (DBI.fromInt 113)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "aens_transfer"), tup_el_2240, (ErlangAtom "none"),
          tup_el_2246])
  in let
    tup_el_2263 =
      (ErlangTuple
         [(ErlangAtom "signature"), (ErlangAtom "address"),
          (ErlangAtom "string")])
  in let
    tup_el_2268 =
      (make_string
         "Revoke the name in Arg2 from owner Arg1. Arg0 contains delegation signature.")
  in let
    head_2248 =
      (ErlangTuple
         [(ErlangAtom "AENS_REVOKE"), (ErlangInt (DBI.fromInt 114)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "false"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "aens_revoke"), tup_el_2263, (ErlangAtom "none"),
          tup_el_2268])
  in let tup_el_2283 = (ErlangTuple [(ErlangAtom "address")])
  in let
    tup_el_2286 =
      (make_string "Arg0 := The balance of address Arg1.")
  in let
    head_2270 =
      (ErlangTuple
         [(ErlangAtom "BALANCE_OTHER"), (ErlangInt (DBI.fromInt 115)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 50)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "balance_other"), tup_el_2283,
          (ErlangAtom "integer"), tup_el_2286])
  in let
    tup_el_2305 =
      (ErlangTuple
         [(ErlangAtom "bytes"), (ErlangAtom "address"),
          (ErlangAtom "bytes")])
  in let
    tup_el_2310 =
      (make_string "Arg0 := verify_sig(Hash, PubKey, Signature)")
  in let
    head_2288 =
      (ErlangTuple
         [(ErlangAtom "VERIFY_SIG"), (ErlangInt (DBI.fromInt 116)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1300)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "verify_sig"), tup_el_2305, (ErlangAtom "boolean"),
          tup_el_2310])
  in let
    tup_el_2329 =
      (ErlangTuple
         [(ErlangAtom "bytes"), (ErlangAtom "bytes"),
          (ErlangAtom "bytes")])
  in let
    tup_el_2334 =
      (make_string
         "Arg0 := verify_sig_secp256k1(Hash, PubKey, Signature)")
  in let
    head_2312 =
      (ErlangTuple
         [(ErlangAtom "VERIFY_SIG_SECP256K1"),
          (ErlangInt (DBI.fromInt 117)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1300)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "verify_sig_secp256k1"), tup_el_2329,
          (ErlangAtom "boolean"), tup_el_2334])
  in let tup_el_2349 = (ErlangTuple [(ErlangAtom "contract")])
  in let
    tup_el_2352 =
      (make_string "Arg0 := Arg1 - A no-op type conversion")
  in let
    head_2336 =
      (ErlangTuple
         [(ErlangAtom "CONTRACT_TO_ADDRESS"),
          (ErlangInt (DBI.fromInt 118)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "contract_to_address"), tup_el_2349,
          (ErlangAtom "address"), tup_el_2352])
  in let tup_el_2365 = (ErlangTuple [])
  in let
    tup_el_2367 =
      (make_string
         "If in GA authentication context return Some(TxHash) otherwise None.")
  in let
    head_2354 =
      (ErlangTuple
         [(ErlangAtom "AUTH_TX_HASH"), (ErlangInt (DBI.fromInt 119)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "auth_tx_hash"), tup_el_2365, (ErlangAtom "variant"),
          tup_el_2367])
  in let
    tup_el_2386 =
      (ErlangTuple
         [(ErlangAtom "oracle"), (ErlangAtom "typerep"),
          (ErlangAtom "typerep")])
  in let
    tup_el_2391 =
      (make_string
         "Arg0 := is Arg1 an oracle with the given query (Arg2) and response (Arg3) types")
  in let
    head_2369 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_CHECK"), (ErlangInt (DBI.fromInt 120)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "oracle_check"), tup_el_2386, (ErlangAtom "bool"),
          tup_el_2391])
  in let
    tup_el_2412 =
      (ErlangTuple
         [(ErlangAtom "oracle"), (ErlangAtom "oracle_query"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep")])
  in let
    tup_el_2418 =
      (make_string
         "Arg0 := is Arg2 a query for the oracle Arg1 with the given types (Arg3, Arg4)")
  in let
    head_2393 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_CHECK_QUERY"),
          (ErlangInt (DBI.fromInt 121)), (ErlangAtom "false"),
          (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a") ErlangEmptyList))))),
          (ErlangAtom "oracle_check_query"), tup_el_2412,
          (ErlangAtom "bool"), tup_el_2418])
  in let tup_el_2433 = (ErlangTuple [(ErlangAtom "address")])
  in let tup_el_2436 = (make_string "Arg0 := is Arg1 an oracle")
  in let
    head_2420 =
      (ErlangTuple
         [(ErlangAtom "IS_ORACLE"), (ErlangInt (DBI.fromInt 122)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "is_oracle"), tup_el_2433, (ErlangAtom "bool"),
          tup_el_2436])
  in let tup_el_2451 = (ErlangTuple [(ErlangAtom "address")])
  in let tup_el_2454 = (make_string "Arg0 := is Arg1 a contract")
  in let
    head_2438 =
      (ErlangTuple
         [(ErlangAtom "IS_CONTRACT"), (ErlangInt (DBI.fromInt 123)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "is_contract"), tup_el_2451, (ErlangAtom "bool"),
          tup_el_2454])
  in let tup_el_2469 = (ErlangTuple [(ErlangAtom "address")])
  in let
    tup_el_2472 = (make_string "Arg0 := is Arg1 a payable address")
  in let
    head_2456 =
      (ErlangTuple
         [(ErlangAtom "IS_PAYABLE"), (ErlangInt (DBI.fromInt 124)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "is_payable"), tup_el_2469, (ErlangAtom "bool"),
          tup_el_2472])
  in let tup_el_2485 = (ErlangTuple [])
  in let tup_el_2487 = (make_string "Arg0 := contract creator")
  in let
    head_2474 =
      (ErlangTuple
         [(ErlangAtom "CREATOR"), (ErlangInt (DBI.fromInt 125)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "contract_creator"), tup_el_2485,
          (ErlangAtom "address"), tup_el_2487])
  in let
    tup_el_2506 =
      (ErlangTuple
         [(ErlangAtom "bytes"), (ErlangAtom "bytes"),
          (ErlangAtom "bytes")])
  in let
    tup_el_2511 =
      (make_string "Arg0 := ecverify_secp256k1(Hash, Addr, Signature)")
  in let
    head_2489 =
      (ErlangTuple
         [(ErlangAtom "ECVERIFY_SECP256K1"),
          (ErlangInt (DBI.fromInt 126)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1300)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a") ErlangEmptyList)))),
          (ErlangAtom "ecverify_secp256k1"), tup_el_2506,
          (ErlangAtom "bytes"), tup_el_2511])
  in let
    tup_el_2528 =
      (ErlangTuple [(ErlangAtom "bytes"), (ErlangAtom "bytes")])
  in let
    tup_el_2532 =
      (make_string "Arg0 := ecrecover_secp256k1(Hash, Signature)")
  in let
    head_2513 =
      (ErlangTuple
         [(ErlangAtom "ECRECOVER_SECP256K1"),
          (ErlangInt (DBI.fromInt 127)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1300)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "ecrecover_secp256k1"), tup_el_2528,
          (ErlangAtom "bytes"), tup_el_2532])
  in let tup_el_2547 = (ErlangTuple [(ErlangAtom "address")])
  in let
    tup_el_2550 =
      (make_string "Arg0 := Arg1 - A no-op type conversion")
  in let
    head_2534 =
      (ErlangTuple
         [(ErlangAtom "ADDRESS_TO_CONTRACT"),
          (ErlangInt (DBI.fromInt 128)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "address_to_contract"), tup_el_2547,
          (ErlangAtom "contract"), tup_el_2550])
  in let tup_el_2565 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2568 =
      (make_string
         "Arg0 := BLS12_381.g1_neg(Arg1) - Negate a G1-value")
  in let
    head_2552 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G1_NEG"), (ErlangInt (DBI.fromInt 129)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g1_neg"), tup_el_2565,
          (ErlangAtom "tuple"), tup_el_2568])
  in let tup_el_2583 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2586 =
      (make_string
         "Arg0 := BLS12_381.g1_normalize(Arg1) - Normalize a G1-value")
  in let
    head_2570 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G1_NORM"), (ErlangInt (DBI.fromInt 130)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g1_norm"), tup_el_2583,
          (ErlangAtom "tuple"), tup_el_2586])
  in let tup_el_2601 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2604 =
      (make_string
         "Arg0 := BLS12_381.g1_valid(Arg1) - Check if G1-value is a valid group member")
  in let
    head_2588 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G1_VALID"),
          (ErlangInt (DBI.fromInt 131)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 2000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g1_valid"), tup_el_2601,
          (ErlangAtom "bool"), tup_el_2604])
  in let tup_el_2619 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2622 =
      (make_string
         "Arg0 := BLS12_381.g1_is_zero(Arg1) - Check if G1-value is zero")
  in let
    head_2606 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G1_IS_ZERO"),
          (ErlangInt (DBI.fromInt 132)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g1_is_zero"), tup_el_2619,
          (ErlangAtom "bool"), tup_el_2622])
  in let
    tup_el_2639 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2643 =
      (make_string
         "Arg0 := BLS12_381.g1_add(Arg1, Arg2) - Add two G1-values")
  in let
    head_2624 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G1_ADD"), (ErlangInt (DBI.fromInt 133)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_g1_add"), tup_el_2639,
          (ErlangAtom "tuple"), tup_el_2643])
  in let
    tup_el_2660 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2664 =
      (make_string
         "Arg0 := BLS12_381.g1_mul(Arg1, Arg2) - Scalar multiplication for a G1-value (Arg1), and an Fr-value")
  in let
    head_2645 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G1_MUL"), (ErlangInt (DBI.fromInt 134)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_g1_mul"), tup_el_2660,
          (ErlangAtom "tuple"), tup_el_2664])
  in let tup_el_2679 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2682 =
      (make_string
         "Arg0 := BLS12_381.g2_neg(Arg1) - Negate a G2-value")
  in let
    head_2666 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G2_NEG"), (ErlangInt (DBI.fromInt 135)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g2_neg"), tup_el_2679,
          (ErlangAtom "tuple"), tup_el_2682])
  in let tup_el_2697 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2700 =
      (make_string
         "Arg0 := BLS12_381.g2_normalize(Arg1) - Normalize a G2-value")
  in let
    head_2684 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G2_NORM"), (ErlangInt (DBI.fromInt 136)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g2_norm"), tup_el_2697,
          (ErlangAtom "tuple"), tup_el_2700])
  in let tup_el_2715 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2718 =
      (make_string
         "Arg0 := BLS12_381.g2_valid(Arg1) - Check if G2-value is a valid group member")
  in let
    head_2702 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G2_VALID"),
          (ErlangInt (DBI.fromInt 137)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 2000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g2_valid"), tup_el_2715,
          (ErlangAtom "bool"), tup_el_2718])
  in let tup_el_2733 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2736 =
      (make_string
         "Arg0 := BLS12_381.g2_is_zero(Arg1) - Check if G2-value is zero")
  in let
    head_2720 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G2_IS_ZERO"),
          (ErlangInt (DBI.fromInt 138)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_g2_is_zero"), tup_el_2733,
          (ErlangAtom "bool"), tup_el_2736])
  in let
    tup_el_2753 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2757 =
      (make_string
         "Arg0 := BLS12_381.g2_add(Arg1, Arg2) - Add two G2-values")
  in let
    head_2738 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G2_ADD"), (ErlangInt (DBI.fromInt 139)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_g2_add"), tup_el_2753,
          (ErlangAtom "tuple"), tup_el_2757])
  in let
    tup_el_2774 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2778 =
      (make_string
         "Arg0 := BLS12_381.g2_mul(Arg1, Arg2) - Scalar multiplication for a G2-value (Arg2), and an Fr-value")
  in let
    head_2759 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_G2_MUL"), (ErlangInt (DBI.fromInt 140)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_g2_mul"), tup_el_2774,
          (ErlangAtom "tuple"), tup_el_2778])
  in let tup_el_2793 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2796 =
      (make_string
         "Arg0 := BLS12_381.gt_inv(Arg1) - Invert a GT-value")
  in let
    head_2780 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_GT_INV"), (ErlangInt (DBI.fromInt 141)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_gt_inv"), tup_el_2793,
          (ErlangAtom "tuple"), tup_el_2796])
  in let
    tup_el_2813 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2817 =
      (make_string
         "Arg0 := BLS12_381.gt_add(Arg1, Arg2) - Add two GT-values")
  in let
    head_2798 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_GT_ADD"), (ErlangInt (DBI.fromInt 142)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_gt_add"), tup_el_2813,
          (ErlangAtom "tuple"), tup_el_2817])
  in let
    tup_el_2834 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2838 =
      (make_string
         "Arg0 := BLS12_381.gt_mul(Arg1, Arg2) - Multiply two GT-values")
  in let
    head_2819 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_GT_MUL"), (ErlangInt (DBI.fromInt 143)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_gt_mul"), tup_el_2834,
          (ErlangAtom "tuple"), tup_el_2838])
  in let
    tup_el_2855 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2859 =
      (make_string
         "Arg0 := BLS12_381.gt_pow(Arg1, Arg2) - Scalar exponentiation for a GT-value (Arg2), and an Fr-value")
  in let
    head_2840 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_GT_POW"), (ErlangInt (DBI.fromInt 144)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 2000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_gt_pow"), tup_el_2855,
          (ErlangAtom "tuple"), tup_el_2859])
  in let tup_el_2874 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2877 =
      (make_string
         "Arg0 := BLS12_381.gt_is_one(Arg1) - Check if a GT value is \"one\"")
  in let
    head_2861 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_GT_IS_ONE"),
          (ErlangInt (DBI.fromInt 145)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_gt_is_one"), tup_el_2874,
          (ErlangAtom "bool"), tup_el_2877])
  in let
    tup_el_2894 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2898 =
      (make_string
         "Arg0 := BLS12_381.pairing(Arg1, Arg2) - Find the pairing of a G1-value (Arg1) and a G2-value (Arg2)")
  in let
    head_2879 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_PAIRING"), (ErlangInt (DBI.fromInt 146)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 12000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_pairing"), tup_el_2894,
          (ErlangAtom "tuple"), tup_el_2898])
  in let
    tup_el_2915 =
      (ErlangTuple [(ErlangAtom "tuple"), (ErlangAtom "tuple")])
  in let
    tup_el_2919 =
      (make_string
         "Arg0 := BLS12_381.miller_loop(Arg1, Arg2) - Do the Miller-loop step of pairing for a G1-value (Arg1) and a G2-value (Arg2)")
  in let
    head_2900 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_MILLER_LOOP"),
          (ErlangInt (DBI.fromInt 147)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 5000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a")
                (ErlangCons (ErlangAtom "a") ErlangEmptyList))),
          (ErlangAtom "bls12_381_miller_loop"), tup_el_2915,
          (ErlangAtom "tuple"), tup_el_2919])
  in let tup_el_2934 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2937 =
      (make_string
         "Arg0 := BLS12_381.final_exp(Arg1) - Do the final exponentiation in pairing")
  in let
    head_2921 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_FINAL_EXP"),
          (ErlangInt (DBI.fromInt 148)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 7000)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_final_exp"), tup_el_2934,
          (ErlangAtom "tuple"), tup_el_2937])
  in let tup_el_2952 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2955 =
      (make_string
         "Arg0 := to_montgomery(Arg1) - Convert (Big)integer to montgomery representation (32 bytes)")
  in let
    head_2939 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_INT_TO_FR"),
          (ErlangInt (DBI.fromInt 149)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_int_to_fr"), tup_el_2952,
          (ErlangAtom "tuple"), tup_el_2955])
  in let tup_el_2970 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2973 =
      (make_string
         "Arg0 := to_montgomery(Arg1) - Convert (Big)integer to montgomery representation (48 bytes)")
  in let
    head_2957 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_INT_TO_FP"),
          (ErlangInt (DBI.fromInt 150)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_int_to_fp"), tup_el_2970,
          (ErlangAtom "tuple"), tup_el_2973])
  in let tup_el_2988 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_2991 =
      (make_string
         "Arg0 := from_montgomery(Arg1) - Convert montgomery representation (32 bytes) to integer")
  in let
    head_2975 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_FR_TO_INT"),
          (ErlangInt (DBI.fromInt 151)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_fr_to_int"), tup_el_2988,
          (ErlangAtom "tuple"), tup_el_2991])
  in let tup_el_3006 = (ErlangTuple [(ErlangAtom "tuple")])
  in let
    tup_el_3009 =
      (make_string
         "Arg0 := from_montgomery(Arg1) - Convert montgomery representation (48 bytes) to integer")
  in let
    head_2993 =
      (ErlangTuple
         [(ErlangAtom "BLS12_381_FP_TO_INT"),
          (ErlangInt (DBI.fromInt 152)), (ErlangAtom "false"),
          (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 30)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "bls12_381_fp_to_int"), tup_el_3006,
          (ErlangAtom "tuple"), tup_el_3009])
  in let tup_el_3024 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_3027 =
      (make_string
         "Lookup the name of Arg0. Returns option(AENS.name)")
  in let
    head_3011 =
      (ErlangTuple
         [(ErlangAtom "AENS_LOOKUP"), (ErlangInt (DBI.fromInt 153)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "aens_lookup"), tup_el_3024, (ErlangAtom "variant"),
          tup_el_3027])
  in let tup_el_3042 = (ErlangTuple [(ErlangAtom "oracle")])
  in let
    tup_el_3045 =
      (make_string "Arg0 := expiry block for oracle Arg1")
  in let
    head_3029 =
      (ErlangTuple
         [(ErlangAtom "ORACLE_EXPIRY"), (ErlangInt (DBI.fromInt 154)),
          (ErlangAtom "false"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "oracle_expiry"), tup_el_3042, (ErlangAtom "int"),
          tup_el_3045])
  in let tup_el_3058 = (ErlangTuple [])
  in let
    tup_el_3060 =
      (make_string
         "If in GA authentication context return Some(Tx) otherwise None.")
  in let
    head_3047 =
      (ErlangTuple
         [(ErlangAtom "AUTH_TX"), (ErlangInt (DBI.fromInt 155)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "auth_tx"), tup_el_3058, (ErlangAtom "variant"),
          tup_el_3060])
  in let tup_el_3075 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_3078 =
      (make_string "Arg0 := string converted to list of characters")
  in let
    head_3062 =
      (ErlangTuple
         [(ErlangAtom "STR_TO_LIST"), (ErlangInt (DBI.fromInt 156)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "str_to_list"), tup_el_3075, (ErlangAtom "list"),
          tup_el_3078])
  in let tup_el_3093 = (ErlangTuple [(ErlangAtom "list")])
  in let
    tup_el_3096 =
      (make_string "Arg0 := string converted from list of characters")
  in let
    head_3080 =
      (ErlangTuple
         [(ErlangAtom "STR_FROM_LIST"), (ErlangInt (DBI.fromInt 157)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "str_from_list"), tup_el_3093, (ErlangAtom "string"),
          tup_el_3096])
  in let tup_el_3111 = (ErlangTuple [(ErlangAtom "string")])
  in let tup_el_3114 = (make_string "Arg0 := to_upper(string)")
  in let
    head_3098 =
      (ErlangTuple
         [(ErlangAtom "STR_TO_UPPER"), (ErlangInt (DBI.fromInt 158)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "str_to_upper"), tup_el_3111, (ErlangAtom "string"),
          tup_el_3114])
  in let tup_el_3129 = (ErlangTuple [(ErlangAtom "string")])
  in let tup_el_3132 = (make_string "Arg0 := to_lower(string)")
  in let
    head_3116 =
      (ErlangTuple
         [(ErlangAtom "STR_TO_LOWER"), (ErlangInt (DBI.fromInt 159)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "str_to_lower"), tup_el_3129, (ErlangAtom "string"),
          tup_el_3132])
  in let tup_el_3147 = (ErlangTuple [(ErlangAtom "char")])
  in let
    tup_el_3150 =
      (make_string "Arg0 := integer representation of UTF-8 character")
  in let
    head_3134 =
      (ErlangTuple
         [(ErlangAtom "CHAR_TO_INT"), (ErlangInt (DBI.fromInt 160)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "char_to_int"), tup_el_3147, (ErlangAtom "int"),
          tup_el_3150])
  in let tup_el_3165 = (ErlangTuple [(ErlangAtom "int")])
  in let
    tup_el_3168 =
      (make_string
         "Arg0 := Some(UTF-8 character) from integer if valid, None if not valid.")
  in let
    head_3152 =
      (ErlangTuple
         [(ErlangAtom "CHAR_FROM_INT"), (ErlangInt (DBI.fromInt 161)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "a") ErlangEmptyList)),
          (ErlangAtom "char_from_int"), tup_el_3165,
          (ErlangAtom "variant"), tup_el_3168])
  in let
    tup_el_3193 =
      (ErlangTuple
         [(ErlangAtom "contract"), (ErlangAtom "string"),
          (ErlangAtom "typerep"), (ErlangAtom "typerep"),
          (ErlangAtom "integer"), (ErlangAtom "integer"),
          (ErlangAtom "bool")])
  in let
    tup_el_3202 =
      (make_string
         "Potentially protected remote call. Arg5 is protected flag, otherwise as CALL_GR.")
  in let
    head_3170 =
      (ErlangTuple
         [(ErlangAtom "CALL_PGR"), (ErlangInt (DBI.fromInt 162)),
          (ErlangAtom "true"), (ErlangAtom "false"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 100)),
          (ErlangCons (ErlangAtom "a")
             (ErlangCons (ErlangAtom "is")
                (ErlangCons (ErlangAtom "a")
                   (ErlangCons (ErlangAtom "a")
                      (ErlangCons (ErlangAtom "a")
                         (ErlangCons (ErlangAtom "a")
                            (ErlangCons (ErlangAtom "a") ErlangEmptyList))))))),
          (ErlangAtom "call_pgr"), tup_el_3193, (ErlangAtom "variant"),
          tup_el_3202])
  in let tup_el_3213 = (ErlangTuple [])
  in let
    tup_el_3215 =
      (make_string "Mark the current contract for deactivation.")
  in let
    head_3204 =
      (ErlangTuple
         [(ErlangAtom "DEACTIVATE"), (ErlangInt (DBI.fromInt 250)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)), ErlangEmptyList,
          (ErlangAtom "deactivate"), tup_el_3213, (ErlangAtom "none"),
          tup_el_3215])
  in let tup_el_3228 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_3231 =
      (make_string
         "Abort execution (dont use all gas) with error message in Arg0.")
  in let
    head_3217 =
      (ErlangTuple
         [(ErlangAtom "ABORT"), (ErlangInt (DBI.fromInt 251)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "abort"), tup_el_3228, (ErlangAtom "none"),
          tup_el_3231])
  in let tup_el_3244 = (ErlangTuple [(ErlangAtom "string")])
  in let
    tup_el_3247 =
      (make_string
         "Abort execution (use upp all gas) with error message in Arg0.")
  in let
    head_3233 =
      (ErlangTuple
         [(ErlangAtom "EXIT"), (ErlangInt (DBI.fromInt 252)),
          (ErlangAtom "true"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 10)),
          (ErlangCons (ErlangAtom "a") ErlangEmptyList),
          (ErlangAtom "exit"), tup_el_3244, (ErlangAtom "none"),
          tup_el_3247])
  in let tup_el_3258 = (ErlangTuple [])
  in let tup_el_3260 = (make_string "The no op. does nothing.")
  in let
    head_3249 =
      (ErlangTuple
         [(ErlangAtom "NOP"), (ErlangInt (DBI.fromInt 253)),
          (ErlangAtom "false"), (ErlangAtom "true"), (ErlangAtom "true"),
          (ErlangInt (DBI.fromInt 1)), ErlangEmptyList, (ErlangAtom "nop"),
          tup_el_3258, (ErlangAtom "none"), tup_el_3260])
  in
    (ErlangCons head_0
       (ErlangCons head_13
          (ErlangCons head_29
             (ErlangCons head_45
                (ErlangCons head_73
                   (ErlangCons head_89
                      (ErlangCons head_120
                         (ErlangCons head_136
                            (ErlangCons head_155
                               (ErlangCons head_177
                                  (ErlangCons head_202
                                     (ErlangCons head_223
                                        (ErlangCons head_238
                                           (ErlangCons head_254
                                              (ErlangCons head_268
                                                 (ErlangCons head_284
                                                    (ErlangCons head_300
                                                       (ErlangCons head_314
                                                          (ErlangCons head_330
                                                             (ErlangCons
                                                                head_344
                                                                (ErlangCons
                                                                   head_360
                                                                   (ErlangCons
                                                                      head_381
                                                                      (ErlangCons
                                                                         head_402
                                                                         (ErlangCons
                                                                            head_423
                                                                            (ErlangCons
                                                                               head_444
                                                                               (ErlangCons
                                                                                  head_465
                                                                                  (ErlangCons
                                                                                     head_486
                                                                                     (ErlangCons
                                                                                        head_504
                                                                                        (ErlangCons
                                                                                           head_522
                                                                                           (ErlangCons
                                                                                              head_540
                                                                                              (ErlangCons
                                                                                                 head_558
                                                                                                 (ErlangCons
                                                                                                    head_579
                                                                                                    (ErlangCons
                                                                                                       head_600
                                                                                                       (ErlangCons
                                                                                                          head_621
                                                                                                          (ErlangCons
                                                                                                             head_642
                                                                                                             (ErlangCons
                                                                                                                head_663
                                                                                                                (ErlangCons
                                                                                                                   head_684
                                                                                                                   (ErlangCons
                                                                                                                      head_705
                                                                                                                      (ErlangCons
                                                                                                                         head_726
                                                                                                                         (ErlangCons
                                                                                                                            head_744
                                                                                                                            (ErlangCons
                                                                                                                               head_762
                                                                                                                               (ErlangCons
                                                                                                                                  head_783
                                                                                                                                  (ErlangCons
                                                                                                                                     head_807
                                                                                                                                     (ErlangCons
                                                                                                                                        head_822
                                                                                                                                        (ErlangCons
                                                                                                                                           head_843
                                                                                                                                           (ErlangCons
                                                                                                                                              head_867
                                                                                                                                              (ErlangCons
                                                                                                                                                 head_891
                                                                                                                                                 (ErlangCons
                                                                                                                                                    head_912
                                                                                                                                                    (ErlangCons
                                                                                                                                                       head_933
                                                                                                                                                       (ErlangCons
                                                                                                                                                          head_959
                                                                                                                                                          (ErlangCons
                                                                                                                                                             head_977
                                                                                                                                                             (ErlangCons
                                                                                                                                                                head_995
                                                                                                                                                                (ErlangCons
                                                                                                                                                                   head_1013
                                                                                                                                                                   (ErlangCons
                                                                                                                                                                      head_1034
                                                                                                                                                                      (ErlangCons
                                                                                                                                                                         head_1052
                                                                                                                                                                         (ErlangCons
                                                                                                                                                                            head_1070
                                                                                                                                                                            (ErlangCons
                                                                                                                                                                               head_1088
                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                  head_1103
                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                     head_1124
                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                        head_1145
                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                           head_1163
                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                              head_1181
                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                 head_1199
                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                    head_1217
                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                       head_1235
                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                          head_1253
                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                             head_1274
                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                head_1295
                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                   head_1313
                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                      head_1337
                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                         head_1358
                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                            head_1379
                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                               head_1392
                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                  head_1407
                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                     head_1420
                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                        head_1435
                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                           head_1453
                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                              head_1474
                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                 head_1495
                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                    head_1516
                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                       head_1534
                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                          head_1555
                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                             head_1576
                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                head_1597
                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                   head_1612
                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                      head_1627
                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                         head_1642
                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                            head_1660
                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                               head_1675
                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                  head_1690
                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                     head_1705
                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                        head_1720
                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                           head_1735
                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                              head_1750
                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                 head_1765
                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                    head_1780
                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                       head_1795
                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                          head_1811
                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                             head_1830
                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                head_1852
                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                   head_1877
                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                      head_1905
                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                         head_1924
                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                            head_1957
                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                               head_1993
                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                  head_2024
                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                     head_2046
                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                        head_2073
                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                           head_2100
                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                              head_2118
                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                 head_2142
                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                    head_2164
                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                       head_2192
                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                          head_2223
                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                             head_2248
                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                head_2270
                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                   head_2288
                                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                      head_2312
                                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                         head_2336
                                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                            head_2354
                                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                               head_2369
                                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                  head_2393
                                                                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                     head_2420
                                                                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                        head_2438
                                                                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                           head_2456
                                                                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                              head_2474
                                                                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                 head_2489
                                                                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                    head_2513
                                                                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                       head_2534
                                                                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                          head_2552
                                                                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                             head_2570
                                                                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                head_2588
                                                                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                   head_2606
                                                                                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                      head_2624
                                                                                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                         head_2645
                                                                                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                            head_2666
                                                                                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                               head_2684
                                                                                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                  head_2702
                                                                                                                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                     head_2720
                                                                                                                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                        head_2738
                                                                                                                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                           head_2759
                                                                                                                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                              head_2780
                                                                                                                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                 head_2798
                                                                                                                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                    head_2819
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                       head_2840
                                                                                                                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                          head_2861
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                             head_2879
                                                                                                                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                head_2900
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   head_2921
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      head_2939
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         head_2957
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            head_2975
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               head_2993
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  head_3011
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     head_3029
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        head_3047
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           head_3062
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              head_3080
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 head_3098
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    head_3116
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       head_3134
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          head_3152
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             head_3170
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                head_3204
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (ErlangCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   head_3217
rlangCons
head_3233
rlangCons
head_3249
rlangEmptyList)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
erlps__ops_defs__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate_header_file__2 :: ErlangFun
erlps__generate_header_file__2 [filename_0, ops_1] =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [filename_0, (ErlangCons (ErlangAtom "write") ErlangEmptyList)])
  in
    case match_expr_7 of
      (ErlangTuple [(ErlangAtom "ok"), file_6]) ->
        let   
          arg_8 =
            (flmap
               (\ lc_11 ->
                  case lc_11 of
                    op_10 ->
                      let lc_ret_12 = (erlps__gen_defines__1 [op_10])
                      in (ErlangCons lc_ret_12 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_1)
        in let
          defines_14 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_8])
        in let arg_16 = (make_string "~s")
        in let arg_19 = (make_string "Provides opcode defines.\n")
        in let head_18 = (erlps__prelude__1 [arg_19])
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_6, arg_16, (ErlangCons head_18 ErlangEmptyList)])
        in let arg_22 = (make_string "%% FATE opcodes\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_6, arg_22, (ErlangCons defines_14 ErlangEmptyList)])
        in let arg_27 = (make_string "~s")
        in let
          head_29 =
            (make_string
               "-define(\'FUNCTION\'                , 16#fe).\n-define(\'EXTEND\'                  , 16#ff).\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_6, arg_27, (ErlangCons head_29 ErlangEmptyList)])
        in (BIF.do_remote_fun_call "File" "erlps__close__1" [file_6])
      _ -> (EXC.badmatch match_expr_7)
erlps__generate_header_file__2 [arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__generate_header_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate_opcodes_ops__4 :: ErlangFun
erlps__generate_opcodes_ops__4 [modulename_0, hrlfile_1,
                                srcdir_2, ops_3]
  =
  let    lop_6 = (BIF.erlang__atom_to_list__1 [modulename_0])
  in let rop_8 = (make_string ".erl")
  in let rop_5 = (BIF.erlang__op_append [lop_6, rop_8])
  in let filename_9 = (BIF.erlang__op_append [srcdir_2, rop_5])
  in let
    match_expr_15 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [filename_9, (ErlangCons (ErlangAtom "write") ErlangEmptyList)])
  in
    case match_expr_15 of
      (ErlangTuple [(ErlangAtom "ok"), file_14]) ->
        let   
          arg_16 =
            (flmap
               (\ lc_19 ->
                  case lc_19 of
                    op_18 ->
                      let lc_ret_20 = (erlps__gen_mnemonic__1 [op_18])
                      in (ErlangCons lc_ret_20 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          mnemonic_22 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_16])
        in let
          arg_23 =
            (flmap
               (\ lc_26 ->
                  case lc_26 of
                    op_25 ->
                      let lc_ret_27 = (erlps__gen_m_to_op__1 [op_25])
                      in (ErlangCons lc_ret_27 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          toop_29 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_23])
        in let
          arg_30 =
            (flmap
               (\ lc_33 ->
                  case lc_33 of
                    op_32 ->
                      let lc_ret_34 = (erlps__gen_args__1 [op_32])
                      in (ErlangCons lc_ret_34 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          args_36 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_30])
        in let
          arg_37 =
            (flmap
               (\ lc_40 ->
                  case lc_40 of
                    op_39 ->
                      let lc_ret_41 = (erlps__gen_bb__1 [op_39])
                      in (ErlangCons lc_ret_41 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          endbb_43 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_37])
        in let
          arg_44 =
            (flmap
               (\ lc_47 ->
                  case lc_47 of
                    op_46 ->
                      let lc_ret_48 = (erlps__gen_in_auth__1 [op_46])
                      in (ErlangCons lc_ret_48 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          inauth_50 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_44])
        in let
          arg_51 =
            (flmap
               (\ lc_54 ->
                  case lc_54 of
                    op_53 ->
                      let lc_ret_55 = (erlps__gen_allowed_offchain__1 [op_53])
                      in (ErlangCons lc_ret_55 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          offchain_57 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_51])
        in let
          arg_58 =
            (flmap
               (\ lc_61 ->
                  case lc_61 of
                    op_60 ->
                      let lc_ret_62 = (erlps__gen_gas_cost__1 [op_60])
                      in (ErlangCons lc_ret_62 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          gascost_64 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_58])
        in let arg_66 = (make_string "~s")
        in let arg_69 = (make_string "Provides opcode primitives.\n")
        in let head_68 = (erlps__prelude__1 [arg_69])
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_66, (ErlangCons head_68 ErlangEmptyList)])
        in let arg_72 = (make_string "~s")
        in let
          head_78 =
            (make_string
               "args/1\n        , end_bb/1\n        , in_auth/1\n        , allowed_offchain/1\n        , mnemonic/1\n        , m_to_op/1\n        , gas_cost/1\n")
        in let
          head_74 =
            (erlps__ops_exports__3
               [modulename_0, hrlfile_1, (ErlangCons head_78 ErlangEmptyList)])
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_72, (ErlangCons head_74 ErlangEmptyList)])
        in let arg_82 = (make_string "%% FATE mnemonics\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_82, (ErlangCons mnemonic_22 ErlangEmptyList)])
        in let
          arg_87 =
            (make_string "mnemonic(Op) -> exit({bad_opcode, Op}).\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_87, ErlangEmptyList])
        in let arg_90 = (make_string "%% FATE opcodes\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_90, (ErlangCons toop_29 ErlangEmptyList)])
        in let
          arg_95 =
            (make_string "m_to_op(M) -> exit({bad_mnemonic, M}).\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_95, ErlangEmptyList])
        in let
          arg_98 = (make_string "%% FATE numbers of args to op.\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_98, (ErlangCons args_36 ErlangEmptyList)])
        in let
          arg_103 = (make_string "args(Op) -> exit({bad_opcode, Op}).\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_103, ErlangEmptyList])
        in let
          arg_106 = (make_string "%% Does FATE Op end a Basic Block?\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_106, (ErlangCons endbb_43 ErlangEmptyList)])
        in let arg_111 = (make_string "end_bb(_) -> false.\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_111, ErlangEmptyList])
        in let
          arg_114 =
            (make_string
               "%% Is FATE Op allowed in GA Authentication context?\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_114, (ErlangCons inauth_50 ErlangEmptyList)])
        in let arg_119 = (make_string "in_auth(_) -> false.\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_119, ErlangEmptyList])
        in let
          arg_122 =
            (make_string
               "%% Is FATE Op allowed in a state channel offchain context?\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_122, (ErlangCons offchain_57 ErlangEmptyList)])
        in let
          arg_127 = (make_string "allowed_offchain(_) -> false.\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_127, ErlangEmptyList])
        in let arg_130 = (make_string "%% Base cost of operation\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_130, (ErlangCons gascost_64 ErlangEmptyList)])
        in let
          arg_135 =
            (make_string "gas_cost(Op) -> exit({bad_opcode, Op}).\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_14, arg_135, ErlangEmptyList])
        in (BIF.do_remote_fun_call "File" "erlps__close__1" [file_14])
      _ -> (EXC.badmatch match_expr_15)
erlps__generate_opcodes_ops__4 [arg_138, arg_139, arg_140,
                                arg_141]
  =
  (EXC.function_clause unit)
erlps__generate_opcodes_ops__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate_code_ops__3 :: ErlangFun
erlps__generate_code_ops__3 [modulename_0, srcdir_1, ops_2] =
  let    lop_5 = (BIF.erlang__atom_to_list__1 [modulename_0])
  in let rop_7 = (make_string ".erl")
  in let rop_4 = (BIF.erlang__op_append [lop_5, rop_7])
  in let filename_8 = (BIF.erlang__op_append [srcdir_1, rop_4])
  in let
    match_expr_14 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [filename_8, (ErlangCons (ErlangAtom "write") ErlangEmptyList)])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "ok"), file_13]) ->
        let   
          arg_15 =
            (flmap
               (\ lc_18 ->
                  case lc_18 of
                    op_17 ->
                      let lc_ret_19 = (erlps__gen_type__1 [op_17])
                      in (ErlangCons lc_ret_19 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_2)
        in let
          types_21 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_15])
        in let
          arg_22 =
            (flmap
               (\ lc_25 ->
                  case lc_25 of
                    op_24 ->
                      let lc_ret_26 = (erlps__gen_type_exports__1 [op_24])
                      in (ErlangCons lc_ret_26 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_2)
        in let
          typeexports_28 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_22])
        in
          case ops_2 of
            (ErlangCons (ErlangMap map_29) restofops_31) | (DM.Just firsttype_30) <-
                                                             ((Map.lookup
                                                                 (ErlangAtom
                                                                    "type_name")
                                                                 map_29)) ->
              let   
                arg_33 =
                  (flmap
                     (\ lc_36 ->
                        case lc_36 of
                          op_35 ->
                            let
                              lc_ret_37 = (erlps__gen_fate_code_type__1 [op_35])
                            in (ErlangCons lc_ret_37 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     restofops_31)
              in let
                fatetypes_39 =
                  (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_33])
              in let
                arg_40 =
                  (flmap
                     (\ lc_43 ->
                        case lc_43 of
                          op_42 ->
                            let
                              lc_ret_44 =
                                (erlps__gen_constructor_exports__1 [op_42])
                            in (ErlangCons lc_ret_44 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     ops_2)
              in let
                constructorexports_46 =
                  (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_40])
              in let
                arg_47 =
                  (flmap
                     (\ lc_50 ->
                        case lc_50 of
                          op_49 ->
                            let lc_ret_51 = (erlps__gen_constructors__1 [op_49])
                            in (ErlangCons lc_ret_51 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     ops_2)
              in let
                constructors_53 =
                  (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_47])
              in let arg_55 = (make_string "~s")
              in let
                arg_58 =
                  (make_string
                     " Provide constructor functuions for Fate instructions.\n%%% Provide types and documentation for Fate instructions.\n")
              in let head_57 = (erlps__prelude__1 [arg_58])
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_55, (ErlangCons head_57 ErlangEmptyList)])
              in let arg_61 = (make_string "-module(~w).\n\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_61,
                      (ErlangCons modulename_0 ErlangEmptyList)])
              in let
                arg_66 =
                  (make_string
                     "-include_lib(\"aebytecode/include/aeb_fate_data.hrl\").\n\n-define(i(__X__), {immediate, __X__ }).\n\n-type fate_arg_immediate(T) :: {immediate, T}.\n-type fate_arg_var()        :: {var, integer()}.\n-type fate_arg_arg()        :: {arg, integer()}.\n-type fate_arg_stack()      :: {stack, 0}.\n-type fate_arg() :: fate_arg_immediate()\n                  | fate_arg_var()\n                  | fate_arg_arg()\n                  | fate_arg_stack().\n\n-type fate_arg_immediate() :: {immediate, aeb_fate_data:fate_type()}.\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_66, ErlangEmptyList])
              in let arg_69 = (make_string "~s")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_69, (ErlangCons types_21 ErlangEmptyList)])
              in let
                arg_74 =
                  (make_string
                     "-type fate_code() :: ~s\n~s                   .\n\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_74,
                      (ErlangCons firsttype_30
                         (ErlangCons fatetypes_39 ErlangEmptyList))])
              in let
                arg_81 =
                  (make_string
                     "-export_type([ fate_code/0\n~s            ]).\n\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_81,
                      (ErlangCons typeexports_28 ErlangEmptyList)])
              in let arg_86 = (make_string "-export([ foo/0\n~s       ]).\n\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_86,
                      (ErlangCons constructorexports_46 ErlangEmptyList)])
              in let arg_91 = (make_string "~s\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_91,
                      (ErlangCons constructors_53 ErlangEmptyList)])
              in let arg_96 = (make_string "foo() -> \"A temp hack.\".\n")
              in let
                _ =
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
                     [file_13, arg_96, ErlangEmptyList])
              in (BIF.do_remote_fun_call "File" "erlps__close__1" [file_13])
            _ -> (EXC.badmatch ops_2)
      _ -> (EXC.badmatch match_expr_14)
erlps__generate_code_ops__3 [arg_99, arg_100, arg_101] =
  (EXC.function_clause unit)
erlps__generate_code_ops__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_type__1 :: ErlangFun
erlps__gen_type__1 [(ErlangMap map_0)]
  | (DM.Just type_2) <- ((Map.lookup (ErlangAtom "type") map_0))
  , (DM.Just typename_1) <-
      ((Map.lookup (ErlangAtom "type_name") map_0)) =
  let    arg_4 = (make_string "-type ~-29s :: ~s.\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons typename_1 (ErlangCons type_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_type__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_fate_code_type__1 :: ErlangFun
erlps__gen_fate_code_type__1 [(ErlangMap map_0)]
  | (DM.Just typename_1) <-
      ((Map.lookup (ErlangAtom "type_name") map_0)) =
  let    arg_3 = (make_string "                   | ~s\n")
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons typename_1 ErlangEmptyList)])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2])
erlps__gen_fate_code_type__1 [arg_7] = (EXC.function_clause unit)
erlps__gen_fate_code_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_type_exports__1 :: ErlangFun
erlps__gen_type_exports__1 [(ErlangMap map_0)]
  | (DM.Just typename_1) <-
      ((Map.lookup (ErlangAtom "type_name") map_0)) =
  let    arg_3 = (make_string "             , ~s/0\n")
  in let rop_7 = (make_string "()")
  in let head_5 = (BIF.erlang__op_unAppend [typename_1, rop_7])
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons head_5 ErlangEmptyList)])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2])
erlps__gen_type_exports__1 [arg_9] = (EXC.function_clause unit)
erlps__gen_type_exports__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_constructor_exports__1 :: ErlangFun
erlps__gen_constructor_exports__1 [(ErlangMap map_0)]
  | (DM.Just function_1) <-
      ((Map.lookup (ErlangAtom "constructor_type") map_0)) =
  let    arg_3 = (make_string "        , ~s\n")
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons function_1 ErlangEmptyList)])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2])
erlps__gen_constructor_exports__1 [arg_7] =
  (EXC.function_clause unit)
erlps__gen_constructor_exports__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_constructors__1 :: ErlangFun
erlps__gen_constructors__1 [(ErlangMap map_0)]
  | (DM.Just name_3) <- ((Map.lookup (ErlangAtom "opname") map_0))
  , (DM.Just type_2) <-
      ((Map.lookup (ErlangAtom "type_name") map_0))
  , (DM.Just (ErlangEmptyList)) <-
      ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just function_1) <-
      ((Map.lookup (ErlangAtom "constructor") map_0)) =
  let   
    arg_5 = (make_string "-spec ~s() -> ~s.\n~s() ->\n    ~w.\n\n")
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_5,
          (ErlangCons function_1
             (ErlangCons type_2
                (ErlangCons function_1 (ErlangCons name_3 ErlangEmptyList))))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_4])
erlps__gen_constructors__1 [(ErlangMap map_0)]
  | (DM.Just name_4) <- ((Map.lookup (ErlangAtom "opname") map_0))
  , (DM.Just type_3) <-
      ((Map.lookup (ErlangAtom "type_name") map_0))
  , (DM.Just argspec_2) <-
      ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just function_1) <-
      ((Map.lookup (ErlangAtom "constructor") map_0)) =
  let   
    argtypespecs_6 = (erlps__gen_arg_type_specs__1 [argspec_2])
  in let
    args_9 =
      (erlps__gen_arg_names__2
         [(ErlangInt (DBI.fromInt 0)), argspec_2])
  in let
    useargs_12 =
      (erlps__gen_arg_uses__2 [(ErlangInt (DBI.fromInt 0)), argspec_2])
  in let
    arg_14 =
      (make_string "-spec ~s(~s) -> ~s.\n~s(~s) ->\n    {~w, ~s}.\n\n")
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_14,
          (ErlangCons function_1
             (ErlangCons argtypespecs_6
                (ErlangCons type_3
                   (ErlangCons function_1
                      (ErlangCons args_9
                         (ErlangCons name_4
                            (ErlangCons useargs_12 ErlangEmptyList)))))))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_13])
erlps__gen_constructors__1 [arg_30] = (EXC.function_clause unit)
erlps__gen_constructors__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_arg_type_specs__1 :: ErlangFun
erlps__gen_arg_type_specs__1 [(ErlangEmptyList)] =
  ErlangEmptyList
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "a") (ErlangEmptyList))]
  =
  (make_string "fate_arg()")
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "is") (ErlangEmptyList))]
  =
  (make_string "aeb_fate_data:fate_string()")
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "ii") (ErlangEmptyList))]
  =
  (make_string "aeb_fate_data:fate_integer()")
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "li") (ErlangEmptyList))]
  =
  (make_string "[aeb_fate_data:fate_integer()]")
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "t") (ErlangEmptyList))]
  =
  (make_string "aeb_fate_data:fate_type_type()")
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "a") args_0)]
  =
  let    lop_1 = (make_string "fate_arg(), ")
  in let rop_2 = (erlps__gen_arg_type_specs__1 [args_0])
  in (BIF.erlang__op_append [lop_1, rop_2])
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "is") args_0)]
  =
  let    lop_1 = (make_string "aeb_fate_data:fate_string(), ")
  in let rop_2 = (erlps__gen_arg_type_specs__1 [args_0])
  in (BIF.erlang__op_append [lop_1, rop_2])
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "ii") args_0)]
  =
  let    lop_1 = (make_string "aeb_fate_data:fate_integer(), ")
  in let rop_2 = (erlps__gen_arg_type_specs__1 [args_0])
  in (BIF.erlang__op_append [lop_1, rop_2])
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "li") args_0)]
  =
  let    lop_1 = (make_string "[aeb_fate_data:fate_integer()], ")
  in let rop_2 = (erlps__gen_arg_type_specs__1 [args_0])
  in (BIF.erlang__op_append [lop_1, rop_2])
erlps__gen_arg_type_specs__1 [(ErlangCons (ErlangAtom "t") args_0)]
  =
  let    lop_1 = (make_string "aeb_fate_data:fate_type_type(), ")
  in let rop_2 = (erlps__gen_arg_type_specs__1 [args_0])
  in (BIF.erlang__op_append [lop_1, rop_2])
erlps__gen_arg_type_specs__1 [arg_4] = (EXC.function_clause unit)
erlps__gen_arg_type_specs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_arg_names__2 :: ErlangFun
erlps__gen_arg_names__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__gen_arg_names__2 [n_0, (ErlangCons _ (ErlangEmptyList))] =
  let arg_1 = (make_string "Arg~w")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__gen_arg_names__2 [n_0, (ErlangCons _ args_1)] =
  let    arg_3 = (make_string "Arg~w, ")
  in let
    lop_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons n_0 ErlangEmptyList)])
  in let
    arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let rop_7 = (erlps__gen_arg_names__2 [arg_8, args_1])
  in (BIF.erlang__op_append [lop_2, rop_7])
erlps__gen_arg_names__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__gen_arg_names__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_arg_uses__2 :: ErlangFun
erlps__gen_arg_uses__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "a") (ErlangEmptyList))]
  =
  let arg_1 = (make_string "Arg~w")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "is") (ErlangEmptyList))]
  =
  let arg_1 = (make_string "{immediate, Arg~w}")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "ii") (ErlangEmptyList))]
  =
  let arg_1 = (make_string "{immediate, Arg~w}")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "li") (ErlangEmptyList))]
  =
  let arg_1 = (make_string "{immediate, Arg~w}")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "t") (ErlangEmptyList))]
  =
  let arg_1 = (make_string "Arg~w")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "a") args_1)]
  =
  let    arg_3 = (make_string "Arg~w, ")
  in let
    lop_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons n_0 ErlangEmptyList)])
  in let
    arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let rop_7 = (erlps__gen_arg_uses__2 [arg_8, args_1])
  in (BIF.erlang__op_append [lop_2, rop_7])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "is") args_1)]
  =
  let    arg_3 = (make_string "{immediate, Arg~w}, ")
  in let
    lop_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons n_0 ErlangEmptyList)])
  in let
    arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let rop_7 = (erlps__gen_arg_uses__2 [arg_8, args_1])
  in (BIF.erlang__op_append [lop_2, rop_7])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "ii") args_1)]
  =
  let    arg_3 = (make_string "{immediate, Arg~w}, ")
  in let
    lop_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons n_0 ErlangEmptyList)])
  in let
    arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let rop_7 = (erlps__gen_arg_uses__2 [arg_8, args_1])
  in (BIF.erlang__op_append [lop_2, rop_7])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "li") args_1)]
  =
  let    arg_3 = (make_string "[{immediate, I} || I <- Arg~w], ")
  in let
    lop_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons n_0 ErlangEmptyList)])
  in let
    arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let rop_7 = (erlps__gen_arg_uses__2 [arg_8, args_1])
  in (BIF.erlang__op_append [lop_2, rop_7])
erlps__gen_arg_uses__2 [n_0,
                        (ErlangCons (ErlangAtom "t") args_1)]
  =
  let    arg_3 = (make_string "Arg~w, ")
  in let
    lop_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons n_0 ErlangEmptyList)])
  in let
    arg_8 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let rop_7 = (erlps__gen_arg_uses__2 [arg_8, args_1])
  in (BIF.erlang__op_append [lop_2, rop_7])
erlps__gen_arg_uses__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__gen_arg_uses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ops_exports__3 :: ErlangFun
erlps__ops_exports__3 [module_0, hrlfile_1, exports_2] =
  let   
    lop_5 =
      (make_string
         "-module(~w).\n\n-export([ ~s         ]).\n\n-include_lib(\"aebytecode/")
  in let
    rop_8 =
      (make_string
         "\").\n\n%%====================================================================\n%% API\n%%====================================================================\n")
  in let rop_6 = (BIF.erlang__op_append [hrlfile_1, rop_8])
  in let arg_4 = (BIF.erlang__op_append [lop_5, rop_6])
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons module_0 (ErlangCons exports_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__ops_exports__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__ops_exports__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_mnemonic__1 :: ErlangFun
erlps__gen_mnemonic__1 [(ErlangMap map_0)]
  | (DM.Just macro_2) <- ((Map.lookup (ErlangAtom "macro") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let    arg_4 = (make_string "mnemonic(~24s) -> ~24w ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons macro_2 (ErlangCons name_1 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_mnemonic__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_mnemonic__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_m_to_op__1 :: ErlangFun
erlps__gen_m_to_op__1 [(ErlangMap map_0)]
  | (DM.Just macro_2) <- ((Map.lookup (ErlangAtom "macro") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let    arg_4 = (make_string "m_to_op(~24w) -> ~24s ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons name_1 (ErlangCons macro_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_m_to_op__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_m_to_op__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_args__1 :: ErlangFun
erlps__gen_args__1 [(ErlangMap map_0)]
  | (DM.Just arity_2) <- ((Map.lookup (ErlangAtom "arity") map_0))
  , (DM.Just macro_1) <-
      ((Map.lookup (ErlangAtom "macro") map_0)) =
  let    arg_4 = (make_string "args(~24s) -> ~2w ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons macro_1 (ErlangCons arity_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_args__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_args__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_bb__1 :: ErlangFun
erlps__gen_bb__1 [(ErlangMap map_0)]
  | (DM.Just endbb_2) <- ((Map.lookup (ErlangAtom "end_bb") map_0))
  , (DM.Just macro_1) <-
      ((Map.lookup (ErlangAtom "macro") map_0)) =
  let    arg_4 = (make_string "end_bb(~24s) -> ~w ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons macro_1 (ErlangCons endbb_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_bb__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_bb__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_in_auth__1 :: ErlangFun
erlps__gen_in_auth__1 [(ErlangMap map_0)]
  | (DM.Just inauth_2) <-
      ((Map.lookup (ErlangAtom "in_auth") map_0))
  , (DM.Just macro_1) <-
      ((Map.lookup (ErlangAtom "macro") map_0)) =
  let    arg_4 = (make_string "in_auth(~24s) -> ~w ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons macro_1 (ErlangCons inauth_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_in_auth__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_in_auth__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_allowed_offchain__1 :: ErlangFun
erlps__gen_allowed_offchain__1 [(ErlangMap map_0)]
  | (DM.Just offchain_2) <-
      ((Map.lookup (ErlangAtom "offchain") map_0))
  , (DM.Just macro_1) <-
      ((Map.lookup (ErlangAtom "macro") map_0)) =
  let    arg_4 = (make_string "allowed_offchain(~24s) -> ~w ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons macro_1 (ErlangCons offchain_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_allowed_offchain__1 [arg_10] =
  (EXC.function_clause unit)
erlps__gen_allowed_offchain__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_gas_cost__1 :: ErlangFun
erlps__gen_gas_cost__1 [(ErlangMap map_0)]
  | (DM.Just gas_2) <- ((Map.lookup (ErlangAtom "gas") map_0))
  , (DM.Just macro_1) <-
      ((Map.lookup (ErlangAtom "macro") map_0)) =
  let    arg_4 = (make_string "gas_cost(~24s) -> ~w ;\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4, (ErlangCons macro_1 (ErlangCons gas_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_gas_cost__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_gas_cost__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prelude__1 :: ErlangFun
erlps__prelude__1 [doc_0] =
  let   
    lop_1 =
      (make_string
         "%%%-------------------------------------------------------------------\n%%% @copyright (C) 2019, Aeternity Anstalt\n%%%\n%%%   === ===  N O T E :   This file is generated do not edit. === ===\n%%%\n%%% Source is in aeb_fate_generate_ops.erl\n%%% @doc\n%%%     ")
  in let
    rop_4 =
      (make_string
         "%%% @end\n%%%-------------------------------------------------------------------\n\n")
  in let rop_2 = (BIF.erlang__op_append [doc_0, rop_4])
  in (BIF.erlang__op_append [lop_1, rop_2])
erlps__prelude__1 [arg_5] = (EXC.function_clause unit)
erlps__prelude__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_defines__1 :: ErlangFun
erlps__gen_defines__1 [(ErlangMap map_0)]
  | (DM.Just opcode_2) <-
      ((Map.lookup (ErlangAtom "opcode") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let    arg_4 = (make_string "-define(~-29w, 16#~2.16.0b).\n")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons name_1 (ErlangCons opcode_2 ErlangEmptyList))])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
erlps__gen_defines__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_defines__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen__1 :: ErlangFun
erlps__gen__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__gen__1 [(ErlangCons (ErlangTuple [opname_0, opcode_1,
                                         endbb_2, inauth_3, allowedoffchain_4,
                                         gas_5, fateformat_6, constructor_7,
                                         argtypes_8, restype_9,
                                         doc_10]) rest_11)]
  =
  let    arity_13 = (BIF.erlang__length__1 [fateformat_6])
  in let name_15 = (BIF.erlang__atom_to_list__1 [opname_0])
  in let
    lowername_17 =
      (BIF.do_remote_fun_call "String" "erlps__to_lower__1" [name_15])
  in let lop_18 = (make_string "fate_")
  in let rop_21 = (make_string "()")
  in let rop_19 = (BIF.erlang__op_append [lowername_17, rop_21])
  in let typename_22 = (BIF.erlang__op_append [lop_18, rop_19])
  in let lop_23 = (make_string "?")
  in let macro_25 = (BIF.erlang__op_append [lop_23, name_15])
  in let
    type_39 =
      case fateformat_6 of
        (ErlangEmptyList) ->
          let arg_27 = (make_string "~w")
          in
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_27, (ErlangCons opname_0 ErlangEmptyList)])
        args_31 ->
          let    arg_32 = (make_string "{~w, ~s}")
          in let head_36 = (erlps__expand_types__1 [args_31])
          in
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_32,
                (ErlangCons opname_0 (ErlangCons head_36 ErlangEmptyList))])
        something_else -> (EXC.case_clause something_else)
  in let lop_40 = (BIF.erlang__atom_to_list__1 [constructor_7])
  in let lop_43 = (make_string "/")
  in let arg_45 = (make_string "~w")
  in let
    rop_44 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_45, (ErlangCons arity_13 ErlangEmptyList)])
  in let rop_42 = (BIF.erlang__op_append [lop_43, rop_44])
  in let
    constructortype_49 = (BIF.erlang__op_append [lop_40, rop_42])
  in let
    head_50 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "opname") opname_0),
             (Tup.Tuple (ErlangAtom "opcode") opcode_1),
             (Tup.Tuple (ErlangAtom "arity") arity_13),
             (Tup.Tuple (ErlangAtom "end_bb") endbb_2),
             (Tup.Tuple (ErlangAtom "in_auth") inauth_3),
             (Tup.Tuple (ErlangAtom "offchain") allowedoffchain_4),
             (Tup.Tuple (ErlangAtom "format") fateformat_6),
             (Tup.Tuple (ErlangAtom "macro") macro_25),
             (Tup.Tuple (ErlangAtom "type_name") typename_22),
             (Tup.Tuple (ErlangAtom "doc") doc_10),
             (Tup.Tuple (ErlangAtom "gas") gas_5),
             (Tup.Tuple (ErlangAtom "type") type_39),
             (Tup.Tuple (ErlangAtom "constructor") constructor_7),
             (Tup.Tuple (ErlangAtom "constructor_type") constructortype_49),
             (Tup.Tuple (ErlangAtom "arg_types") argtypes_8),
             (Tup.Tuple (ErlangAtom "res_type") restype_9)]))
  in let tail_83 = (erlps__gen__1 [rest_11])
  in (ErlangCons head_50 tail_83)
erlps__gen__1 [arg_85] = (EXC.function_clause unit)
erlps__gen__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_types__1 :: ErlangFun
erlps__expand_types__1 [(ErlangEmptyList)] = (make_string "")
erlps__expand_types__1 [(ErlangCons t_0 (ErlangEmptyList))] =
  (erlps__expand_type__1 [t_0])
erlps__expand_types__1 [(ErlangCons t_0 ts_1)] =
  let    lop_2 = (erlps__expand_type__1 [t_0])
  in let lop_5 = (make_string ", ")
  in let rop_6 = (erlps__expand_types__1 [ts_1])
  in let rop_4 = (BIF.erlang__op_append [lop_5, rop_6])
  in (BIF.erlang__op_append [lop_2, rop_4])
erlps__expand_types__1 [arg_8] = (EXC.function_clause unit)
erlps__expand_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_type__1 :: ErlangFun
erlps__expand_type__1 [(ErlangAtom "a")] =
  (make_string "fate_arg()")
erlps__expand_type__1 [(ErlangAtom "is")] =
  (make_string "fate_arg_immediate(aeb_fate_data:fate_string())")
erlps__expand_type__1 [(ErlangAtom "ii")] =
  (make_string "fate_arg_immediate(aeb_fate_data:fate_integer())")
erlps__expand_type__1 [(ErlangAtom "li")] =
  (make_string
     "fate_arg_immediate([aeb_fate_data:fate_integer()])")
erlps__expand_type__1 [(ErlangAtom "t")] =
  (make_string "aeb_fate_data:fate_type_type()")
erlps__expand_type__1 [arg_0] = (EXC.function_clause unit)
erlps__expand_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate_scanner__4 :: ErlangFun
erlps__generate_scanner__4 [templatefile_0, outfile_1, path_2,
                            ops_3]
  =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Filename" "erlps__join__2"
         [path_2, templatefile_0])
  in let
    match_expr_8 =
      (BIF.do_remote_fun_call "File" "erlps__read_file__1" [arg_4])
  in
    case match_expr_8 of
      (ErlangTuple [(ErlangAtom "ok"), template_7]) ->
        let   
          arg_9 =
            (flmap
               (\ lc_12 ->
                  case lc_12 of
                    op_11 ->
                      let lc_ret_13 = (erlps__gen_token__1 [op_11])
                      in (ErlangCons lc_ret_13 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_3)
        in let
          tokens_15 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_9])
        in let
          newfile_18 =
            (erlps__insert_tokens_in_template__2 [template_7, tokens_15])
        in let
          arg_19 =
            (BIF.do_remote_fun_call "Filename" "erlps__join__2"
               [path_2, outfile_1])
        in
          (BIF.do_remote_fun_call "File" "erlps__write_file__2"
             [arg_19, newfile_18])
      _ -> (EXC.badmatch match_expr_8)
erlps__generate_scanner__4 [arg_23, arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__generate_scanner__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_token__1 :: ErlangFun
erlps__gen_token__1 [(ErlangMap map_0)]
  | (DM.Just opname_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let    name_3 = (BIF.erlang__atom_to_list__1 [opname_1])
  in let
    arg_4 =
      (make_string "~-28s: {token, {mnemonic, TokenLine, ~w}}.\n")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_4,
        (ErlangCons name_3 (ErlangCons opname_1 ErlangEmptyList))])
erlps__gen_token__1 [arg_10] = (EXC.function_clause unit)
erlps__gen_token__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_tokens_in_template__2 :: ErlangFun
erlps__insert_tokens_in_template__2 [(ErlangBinary bin_c_0),
                                     tokens_88]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 37)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 37)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 32)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 35)))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_15) == (ErlangInt (DBI.fromInt 35)))
  , size_16 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      ((BIN.chop_int bin_14 size_16 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_18) == (ErlangInt (DBI.fromInt 35)))
  , size_19 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      ((BIN.chop_int bin_17 size_19 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_21) == (ErlangInt (DBI.fromInt 82)))
  , size_22 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_24) bin_23) <-
      ((BIN.chop_int bin_20 size_22 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_24) == (ErlangInt (DBI.fromInt 69)))
  , size_25 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_27) bin_26) <-
      ((BIN.chop_int bin_23 size_25 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_27) == (ErlangInt (DBI.fromInt 80)))
  , size_28 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_30) bin_29) <-
      ((BIN.chop_int bin_26 size_28 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_30) == (ErlangInt (DBI.fromInt 76)))
  , size_31 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_33) bin_32) <-
      ((BIN.chop_int bin_29 size_31 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_33) == (ErlangInt (DBI.fromInt 65)))
  , size_34 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_36) bin_35) <-
      ((BIN.chop_int bin_32 size_34 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_36) == (ErlangInt (DBI.fromInt 67)))
  , size_37 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_39) bin_38) <-
      ((BIN.chop_int bin_35 size_37 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_39) == (ErlangInt (DBI.fromInt 69)))
  , size_40 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_42) bin_41) <-
      ((BIN.chop_int bin_38 size_40 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_42) == (ErlangInt (DBI.fromInt 87)))
  , size_43 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_45) bin_44) <-
      ((BIN.chop_int bin_41 size_43 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_45) == (ErlangInt (DBI.fromInt 73)))
  , size_46 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_48) bin_47) <-
      ((BIN.chop_int bin_44 size_46 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_48) == (ErlangInt (DBI.fromInt 84)))
  , size_49 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_51) bin_50) <-
      ((BIN.chop_int bin_47 size_49 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_51) == (ErlangInt (DBI.fromInt 72)))
  , size_52 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_54) bin_53) <-
      ((BIN.chop_int bin_50 size_52 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_54) == (ErlangInt (DBI.fromInt 79)))
  , size_55 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_57) bin_56) <-
      ((BIN.chop_int bin_53 size_55 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_57) == (ErlangInt (DBI.fromInt 80)))
  , size_58 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_60) bin_59) <-
      ((BIN.chop_int bin_56 size_58 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_60) == (ErlangInt (DBI.fromInt 84)))
  , size_61 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_63) bin_62) <-
      ((BIN.chop_int bin_59 size_61 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_63) == (ErlangInt (DBI.fromInt 79)))
  , size_64 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_66) bin_65) <-
      ((BIN.chop_int bin_62 size_64 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_66) == (ErlangInt (DBI.fromInt 75)))
  , size_67 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_69) bin_68) <-
      ((BIN.chop_int bin_65 size_67 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_69) == (ErlangInt (DBI.fromInt 69)))
  , size_70 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_72) bin_71) <-
      ((BIN.chop_int bin_68 size_70 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_72) == (ErlangInt (DBI.fromInt 78)))
  , size_73 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_75) bin_74) <-
      ((BIN.chop_int bin_71 size_73 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_75) == (ErlangInt (DBI.fromInt 83)))
  , size_76 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_78) bin_77) <-
      ((BIN.chop_int bin_74 size_76 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_78) == (ErlangInt (DBI.fromInt 35)))
  , size_79 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_81) bin_80) <-
      ((BIN.chop_int bin_77 size_79 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_81) == (ErlangInt (DBI.fromInt 35)))
  , size_82 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_84) bin_83) <-
      ((BIN.chop_int bin_80 size_82 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_84) == (ErlangInt (DBI.fromInt 35)))
  , (ErlangInt size_85) <- ((BIN.size bin_83))
  , (BIN.Ok rest_87 bin_86) <- ((BIN.chop_bin bin_83 size_85 8))
  , (BIN.empty bin_86) =
  (ErlangCons tokens_88 (ErlangCons rest_87 ErlangEmptyList))
erlps__insert_tokens_in_template__2 [(ErlangBinary bin_c_0),
                                     tokens_79]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 37)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 37)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 37)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 32)))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_15) == (ErlangInt (DBI.fromInt 35)))
  , size_16 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      ((BIN.chop_int bin_14 size_16 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_18) == (ErlangInt (DBI.fromInt 35)))
  , size_19 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      ((BIN.chop_int bin_17 size_19 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_21) == (ErlangInt (DBI.fromInt 35)))
  , size_22 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_24) bin_23) <-
      ((BIN.chop_int bin_20 size_22 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_24) == (ErlangInt (DBI.fromInt 82)))
  , size_25 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_27) bin_26) <-
      ((BIN.chop_int bin_23 size_25 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_27) == (ErlangInt (DBI.fromInt 69)))
  , size_28 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_30) bin_29) <-
      ((BIN.chop_int bin_26 size_28 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_30) == (ErlangInt (DBI.fromInt 80)))
  , size_31 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_33) bin_32) <-
      ((BIN.chop_int bin_29 size_31 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_33) == (ErlangInt (DBI.fromInt 76)))
  , size_34 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_36) bin_35) <-
      ((BIN.chop_int bin_32 size_34 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_36) == (ErlangInt (DBI.fromInt 65)))
  , size_37 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_39) bin_38) <-
      ((BIN.chop_int bin_35 size_37 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_39) == (ErlangInt (DBI.fromInt 67)))
  , size_40 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_42) bin_41) <-
      ((BIN.chop_int bin_38 size_40 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_42) == (ErlangInt (DBI.fromInt 69)))
  , size_43 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_45) bin_44) <-
      ((BIN.chop_int bin_41 size_43 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_45) == (ErlangInt (DBI.fromInt 87)))
  , size_46 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_48) bin_47) <-
      ((BIN.chop_int bin_44 size_46 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_48) == (ErlangInt (DBI.fromInt 73)))
  , size_49 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_51) bin_50) <-
      ((BIN.chop_int bin_47 size_49 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_51) == (ErlangInt (DBI.fromInt 84)))
  , size_52 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_54) bin_53) <-
      ((BIN.chop_int bin_50 size_52 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_54) == (ErlangInt (DBI.fromInt 72)))
  , size_55 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_57) bin_56) <-
      ((BIN.chop_int bin_53 size_55 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_57) == (ErlangInt (DBI.fromInt 78)))
  , size_58 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_60) bin_59) <-
      ((BIN.chop_int bin_56 size_58 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_60) == (ErlangInt (DBI.fromInt 79)))
  , size_61 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_63) bin_62) <-
      ((BIN.chop_int bin_59 size_61 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_63) == (ErlangInt (DBI.fromInt 84)))
  , size_64 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_66) bin_65) <-
      ((BIN.chop_int bin_62 size_64 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_66) == (ErlangInt (DBI.fromInt 69)))
  , size_67 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_69) bin_68) <-
      ((BIN.chop_int bin_65 size_67 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_69) == (ErlangInt (DBI.fromInt 35)))
  , size_70 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_72) bin_71) <-
      ((BIN.chop_int bin_68 size_70 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_72) == (ErlangInt (DBI.fromInt 35)))
  , size_73 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_75) bin_74) <-
      ((BIN.chop_int bin_71 size_73 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_75) == (ErlangInt (DBI.fromInt 35)))
  , (ErlangInt size_76) <- ((BIN.size bin_74))
  , (BIN.Ok rest_78 bin_77) <- ((BIN.chop_bin bin_74 size_76 8))
  , (BIN.empty bin_77) =
  let   
    head_80 =
      (make_string
         "%%%\n%%%   === ===  N O T E :   This file is generated do not edit. === ===\n%%%\n%%% Source is in aeb_fate_generate_ops.erl\n%%%          and aeb_fate_asm_scan.template")
  in let
    tail_81 =
      (erlps__insert_tokens_in_template__2 [rest_78, tokens_79])
  in (ErlangCons head_80 tail_81)
erlps__insert_tokens_in_template__2 [(ErlangBinary bin_c_0),
                                     tokens_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok b_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    tail_9 = (erlps__insert_tokens_in_template__2 [rest_6, tokens_7])
  in (ErlangCons b_3 tail_9)
erlps__insert_tokens_in_template__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__insert_tokens_in_template__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_asm_pp__3 :: ErlangFun
erlps__gen_asm_pp__3 [module_0, path_1, ops_2] =
  let    arg_5 = (BIF.erlang__atom_to_list__1 [module_0])
  in let
    lop_3 =
      (BIF.do_remote_fun_call "Filename" "erlps__join__2"
         [path_1, arg_5])
  in let rop_7 = (make_string ".erl")
  in let filename_8 = (BIF.erlang__op_append [lop_3, rop_7])
  in let
    match_expr_14 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [filename_8, (ErlangCons (ErlangAtom "write") ErlangEmptyList)])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "ok"), file_13]) ->
        let   
          arg_15 =
            (flmap
               (\ lc_18 ->
                  case lc_18 of
                    op_17 ->
                      let    lop_20 = (erlps__gen_format__1 [op_17])
                      in let rop_22 = (make_string "\n")
                      in let
                        lc_ret_19 = (BIF.erlang__op_append [lop_20, rop_22])
                      in (ErlangCons lc_ret_19 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               ops_2)
        in let
          formats_23 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_15])
        in let arg_25 = (make_string "~s")
        in let
          arg_28 =
            (make_string
               " Provide pretty printing functuions for Fate instructions.\n")
        in let head_27 = (erlps__prelude__1 [arg_28])
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_13, arg_25, (ErlangCons head_27 ErlangEmptyList)])
        in let arg_31 = (make_string "-module(~w).\n\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_13, arg_31, (ErlangCons module_0 ErlangEmptyList)])
        in let
          arg_36 =
            (make_string
               "-export([format_op/2]).\n\nformat_arg(li, {immediate, LI}) ->\n    aeb_fate_data:format(LI);\nformat_arg(_, {immediate, I}) ->\n    aeb_fate_data:format(I);\nformat_arg(a, {arg, N}) -> io_lib:format(\"arg~~p\", [N]);\nformat_arg(a, {var, N}) when N < 0 -> io_lib:format(\"store~~p\", [-N]);\nformat_arg(a, {var, N}) -> io_lib:format(\"var~~p\", [N]);\nformat_arg(a, {stack, 0}) -> \"a\".\n\nlookup(Name, Symbols) ->\n    maps:get(Name, Symbols, io_lib:format(\"~~p\",[Name])).\n\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_13, arg_36, (ErlangCons formats_23 ErlangEmptyList)])
        in let
          arg_41 =
            (make_string
               "format_op(Op, _Symbols) -> io_lib:format(\";; Bad Op: ~~w\\n\", [Op]).\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_13, arg_41, ErlangEmptyList])
        in (BIF.do_remote_fun_call "File" "erlps__close__1" [file_13])
      _ -> (EXC.badmatch match_expr_14)
erlps__gen_asm_pp__3 [arg_44, arg_45, arg_46] =
  (EXC.function_clause unit)
erlps__gen_asm_pp__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_format__1 :: ErlangFun
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just name_1) <- ((Map.lookup (ErlangAtom "opname") map_0))
  , ((==) name_1 (ErlangAtom "CALL_R")) =
  let   
    arg_2 =
      (make_string
         "format_op({~w, {immediate, Contract}, {immediate, Function}, ArgType, RetType, Value}, Symbols) ->\n    [\"~s \", lookup(Contract, Symbols), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value)];\nformat_op({~w, Contract, {immediate, Function}, ArgType, RetType, Value}, Symbols) ->\n[\"~s \", format_arg(a, Contract), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value)];\n")
  in let head_6 = (BIF.erlang__atom_to_list__1 [name_1])
  in let head_11 = (BIF.erlang__atom_to_list__1 [name_1])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2,
        (ErlangCons name_1
           (ErlangCons head_6
              (ErlangCons name_1 (ErlangCons head_11 ErlangEmptyList))))])
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just name_1) <- ((Map.lookup (ErlangAtom "opname") map_0))
  , ((==) name_1 (ErlangAtom "CALL_GR")) =
  let   
    arg_2 =
      (make_string
         "format_op({~w, {immediate, Contract}, {immediate, Function}, ArgType, RetType, Value, Gas}, Symbols) ->\n    [\"~s \", lookup(Contract, Symbols), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value),  \" \", format_arg(a, Gas)];\nformat_op({~w, Contract, {immediate, Function}, ArgType, RetType, Value, Gas}, Symbols) ->\n[\"~s \", format_arg(a, Contract), \".\", lookup(Function, Symbols), \" \", format_arg(a, ArgType), \" \", format_arg(a, RetType), \" \", format_arg(a, Value),  \" \", format_arg(a, Gas)];\n")
  in let head_6 = (BIF.erlang__atom_to_list__1 [name_1])
  in let head_11 = (BIF.erlang__atom_to_list__1 [name_1])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2,
        (ErlangCons name_1
           (ErlangCons head_6
              (ErlangCons name_1 (ErlangCons head_11 ErlangEmptyList))))])
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangEmptyList)) <-
      ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let    arg_2 = (make_string "format_op(~w, _) -> [\"~s\"];")
  in let head_6 = (BIF.erlang__atom_to_list__1 [name_1])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons name_1 (ErlangCons head_6 ErlangEmptyList))])
erlps__gen_format__1 [(ErlangMap map_0)]
  | (DM.Just args_2) <- ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let nameasstring_4 = (BIF.erlang__atom_to_list__1 [name_1])
  in
    case args_2 of
      (ErlangCons t0_6 (ErlangEmptyList)) ->
        let
          arg_7 =
            (make_string
               "format_op({~w, Arg0}, _) ->\n    [\"~s \", format_arg(~w, Arg0)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_7,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_6 ErlangEmptyList)))])
      (ErlangCons t0_15 (ErlangCons t1_16 (ErlangEmptyList))) ->
        let
          arg_17 =
            (make_string
               "format_op({~w, Arg0, Arg1}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_17,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_15 (ErlangCons t1_16 ErlangEmptyList))))])
      (ErlangCons t0_27 (ErlangCons t1_28 (ErlangCons t2_29 (ErlangEmptyList)))) ->
        let
          arg_30 =
            (make_string
               "format_op({~w, Arg0, Arg1, Arg2}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_30,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_27
                       (ErlangCons t1_28
                          (ErlangCons t2_29 ErlangEmptyList)))))])
      (ErlangCons t0_42 (ErlangCons t1_43 (ErlangCons t2_44 (ErlangCons t3_45 (ErlangEmptyList))))) ->
        let
          arg_46 =
            (make_string
               "format_op({~w, Arg0, Arg1, Arg2, Arg3}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_46,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_42
                       (ErlangCons t1_43
                          (ErlangCons t2_44
                             (ErlangCons t3_45 ErlangEmptyList))))))])
      (ErlangCons t0_60 (ErlangCons t1_61 (ErlangCons t2_62 (ErlangCons t3_63 (ErlangCons t4_64 (ErlangEmptyList)))))) ->
        let
          arg_65 =
            (make_string
               "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_65,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_60
                       (ErlangCons t1_61
                          (ErlangCons t2_62
                             (ErlangCons t3_63
                                (ErlangCons t4_64 ErlangEmptyList)))))))])
      (ErlangCons t0_81 (ErlangCons t1_82 (ErlangCons t2_83 (ErlangCons t3_84 (ErlangCons t4_85 (ErlangCons t5_86 (ErlangEmptyList))))))) ->
        let
          arg_87 =
            (make_string
               "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4),\" \",  format_arg(~w, Arg5)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_87,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_81
                       (ErlangCons t1_82
                          (ErlangCons t2_83
                             (ErlangCons t3_84
                                (ErlangCons t4_85
                                   (ErlangCons t5_86 ErlangEmptyList))))))))])
      (ErlangCons t0_105 (ErlangCons t1_106 (ErlangCons t2_107 (ErlangCons t3_108 (ErlangCons t4_109 (ErlangCons t5_110 (ErlangCons t6_111 (ErlangEmptyList)))))))) ->
        let
          arg_112 =
            (make_string
               "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4),\" \",  format_arg(~w, Arg5),\" \",  format_arg(~w, Arg6)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_112,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_105
                       (ErlangCons t1_106
                          (ErlangCons t2_107
                             (ErlangCons t3_108
                                (ErlangCons t4_109
                                   (ErlangCons t5_110
                                      (ErlangCons t6_111
                                         ErlangEmptyList)))))))))])
      (ErlangCons t0_132 (ErlangCons t1_133 (ErlangCons t2_134 (ErlangCons t3_135 (ErlangCons t4_136 (ErlangCons t5_137 (ErlangCons t6_138 (ErlangCons t7_139 (ErlangEmptyList))))))))) ->
        let
          arg_140 =
            (make_string
               "format_op({~w, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7}, _) ->\n    [\"~s \", format_arg(~w, Arg0), \" \",  format_arg(~w, Arg1),\" \",  format_arg(~w, Arg2),\" \",  format_arg(~w, Arg3),\" \",  format_arg(~w, Arg4),\" \",  format_arg(~w, Arg5),\" \",  format_arg(~w, Arg6),\" \",  format_arg(~w, Arg7)];")
        in
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_140,
              (ErlangCons name_1
                 (ErlangCons nameasstring_4
                    (ErlangCons t0_132
                       (ErlangCons t1_133
                          (ErlangCons t2_134
                             (ErlangCons t3_135
                                (ErlangCons t4_136
                                   (ErlangCons t5_137
                                      (ErlangCons t6_138
                                         (ErlangCons t7_139
                                            ErlangEmptyList))))))))))])
      something_else -> (EXC.case_clause something_else)
erlps__gen_format__1 [arg_162] = (EXC.function_clause unit)
erlps__gen_format__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_asm_generator__1 :: ErlangFun
erlps__test_asm_generator__1 [filename_0] =
  let
    match_expr_6 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [filename_0, (ErlangCons (ErlangAtom "write") ErlangEmptyList)])
  in
    case match_expr_6 of
      (ErlangTuple [(ErlangAtom "ok"), file_5]) ->
        let    lc_src_8 = (erlps__get_ops__0 [])
        in let
          arg_7 =
            (flmap
               (\ lc_10 ->
                  case lc_10 of
                    op_9 ->
                      let    lop_12 = (erlps__gen_instruction__1 [op_9])
                      in let rop_14 = (make_string "\n")
                      in let
                        lc_ret_11 = (BIF.erlang__op_append [lop_12, rop_14])
                      in (ErlangCons lc_ret_11 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               lc_src_8)
        in let
          instructions_15 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_7])
        in let
          arg_17 =
            (make_string
               ";; CONTRACT all_instructions\n\n;; Dont expect this contract to typecheck or run.\n;; Just used to check assembler rountrip of all instruction.\n\nFUNCTION foo () : {tuple, []}\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_5, arg_17, (ErlangCons instructions_15 ErlangEmptyList)])
        in let arg_22 = (make_string "  RETURNR ()\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_5, arg_22, ErlangEmptyList])
        in (BIF.do_remote_fun_call "File" "erlps__close__1" [file_5])
      _ -> (EXC.badmatch match_expr_6)
erlps__test_asm_generator__1 [arg_25] =
  (EXC.function_clause unit)
erlps__test_asm_generator__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_instruction__1 :: ErlangFun
erlps__gen_instruction__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangEmptyList)) <-
      ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let arg_2 = (make_string "  ~s\n")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons name_1 ErlangEmptyList)])
erlps__gen_instruction__1 [(ErlangMap map_0)]
  | (DM.Just argtypes_2) <-
      ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let    arg_4 = (make_string " ")
  in let
    arg_5 =
      (flmap
         (\ lc_8 ->
            case lc_8 of
              a_7 ->
                let lc_ret_9 = (erlps__gen_arg__1 [a_7])
                in (ErlangCons lc_ret_9 ErlangEmptyList)
              _ -> ErlangEmptyList)
         argtypes_2)
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__join__2" [arg_4, arg_5])
  in let
    args_11 =
      (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_3])
  in let arg_12 = (make_string "  ~s ~s\n")
  in let
    i_18 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_12,
          (ErlangCons name_1 (ErlangCons args_11 ErlangEmptyList))])
  in i_18
erlps__gen_instruction__1 [arg_19] = (EXC.function_clause unit)
erlps__gen_instruction__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_arg__1 :: ErlangFun
erlps__gen_arg__1 [(ErlangAtom "a")] = (erlps__any_arg__0 [])
erlps__gen_arg__1 [(ErlangAtom "is")] = (make_string "foo")
erlps__gen_arg__1 [(ErlangAtom "ii")] = (erlps__gen_int__0 [])
erlps__gen_arg__1 [(ErlangAtom "li")] = (make_string "[1, 2, 3]")
erlps__gen_arg__1 [(ErlangAtom "t")] = (make_string "integer")
erlps__gen_arg__1 [arg_0] = (EXC.function_clause unit)
erlps__gen_arg__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__any_arg__0 :: ErlangFun
erlps__any_arg__0 [] =
  let   
    arg_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 5))])
  in let tup_el_3 = (make_string "a")
  in let tup_el_4 = (erlps__stack_arg__0 [])
  in let tup_el_5 = (erlps__var_arg__0 [])
  in let tup_el_6 = (erlps__arg_arg__0 [])
  in let tup_el_7 = (erlps__imm_arg__0 [])
  in let
    arg_2 =
      (ErlangTuple [tup_el_3, tup_el_4, tup_el_5, tup_el_6, tup_el_7])
  in (BIF.erlang__element__2 [arg_0, arg_2])
erlps__any_arg__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__stack_arg__0 :: ErlangFun
erlps__stack_arg__0 [] = (make_string "a")
erlps__stack_arg__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__arg_arg__0 :: ErlangFun
erlps__arg_arg__0 [] =
  let    lop_0 = (make_string "arg")
  in let
    lop_3 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 256))])
  in let
    arg_2 =
      (BIF.erlang__op_minus [lop_3, (ErlangInt (DBI.fromInt 1))])
  in let rop_1 = (BIF.erlang__integer_to_list__1 [arg_2])
  in (BIF.erlang__op_append [lop_0, rop_1])
erlps__arg_arg__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__var_arg__0 :: ErlangFun
erlps__var_arg__0 [] =
  let    lop_0 = (make_string "var")
  in let
    lop_3 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 256))])
  in let
    arg_2 =
      (BIF.erlang__op_minus [lop_3, (ErlangInt (DBI.fromInt 1))])
  in let rop_1 = (BIF.erlang__integer_to_list__1 [arg_2])
  in (BIF.erlang__op_append [lop_0, rop_1])
erlps__var_arg__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__imm_arg__0 :: ErlangFun
erlps__imm_arg__0 [] =
  let
    case_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 15))])
  in
    case case_0 of
      (ErlangInt num_2) | ((ErlangInt num_2) ==
                             (ErlangInt (DBI.fromInt 1))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_3) | ((ErlangInt num_3) ==
                             (ErlangInt (DBI.fromInt 2))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_4) | ((ErlangInt num_4) ==
                             (ErlangInt (DBI.fromInt 3))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_5) | ((ErlangInt num_5) ==
                             (ErlangInt (DBI.fromInt 4))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_6) | ((ErlangInt num_6) ==
                             (ErlangInt (DBI.fromInt 5))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_7) | ((ErlangInt num_7) ==
                             (ErlangInt (DBI.fromInt 6))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_8) | ((ErlangInt num_8) ==
                             (ErlangInt (DBI.fromInt 7))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_9) | ((ErlangInt num_9) ==
                             (ErlangInt (DBI.fromInt 8))) ->
        (erlps__gen_address__0 [])
      (ErlangInt num_10) | ((ErlangInt num_10) ==
                              (ErlangInt (DBI.fromInt 9))) ->
        (erlps__gen_boolean__0 [])
      (ErlangInt num_11) | ((ErlangInt num_11) ==
                              (ErlangInt (DBI.fromInt 10))) ->
        (erlps__gen_string__0 [])
      (ErlangInt num_12) | ((ErlangInt num_12) ==
                              (ErlangInt (DBI.fromInt 11))) ->
        (erlps__gen_map__0 [])
      (ErlangInt num_13) | ((ErlangInt num_13) ==
                              (ErlangInt (DBI.fromInt 12))) ->
        (erlps__gen_list__0 [])
      (ErlangInt num_14) | ((ErlangInt num_14) ==
                              (ErlangInt (DBI.fromInt 13))) ->
        (erlps__gen_bits__0 [])
      (ErlangInt num_15) | ((ErlangInt num_15) ==
                              (ErlangInt (DBI.fromInt 14))) ->
        (erlps__gen_tuple__0 [])
      (ErlangInt num_16) | ((ErlangInt num_16) ==
                              (ErlangInt (DBI.fromInt 15))) ->
        (erlps__gen_variant__0 [])
      something_else -> (EXC.case_clause something_else)
erlps__imm_arg__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_key__0 :: ErlangFun
erlps__gen_key__0 [] =
  let
    case_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 15))])
  in
    case case_0 of
      (ErlangInt num_2) | ((ErlangInt num_2) ==
                             (ErlangInt (DBI.fromInt 1))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_3) | ((ErlangInt num_3) ==
                             (ErlangInt (DBI.fromInt 2))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_4) | ((ErlangInt num_4) ==
                             (ErlangInt (DBI.fromInt 3))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_5) | ((ErlangInt num_5) ==
                             (ErlangInt (DBI.fromInt 4))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_6) | ((ErlangInt num_6) ==
                             (ErlangInt (DBI.fromInt 5))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_7) | ((ErlangInt num_7) ==
                             (ErlangInt (DBI.fromInt 6))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_8) | ((ErlangInt num_8) ==
                             (ErlangInt (DBI.fromInt 7))) ->
        (erlps__gen_int__0 [])
      (ErlangInt num_9) | ((ErlangInt num_9) ==
                             (ErlangInt (DBI.fromInt 8))) ->
        (erlps__gen_address__0 [])
      (ErlangInt num_10) | ((ErlangInt num_10) ==
                              (ErlangInt (DBI.fromInt 9))) ->
        (erlps__gen_boolean__0 [])
      (ErlangInt num_11) | ((ErlangInt num_11) ==
                              (ErlangInt (DBI.fromInt 10))) ->
        (erlps__gen_string__0 [])
      (ErlangInt num_12) | ((ErlangInt num_12) ==
                              (ErlangInt (DBI.fromInt 11))) ->
        (erlps__gen_string__0 [])
      (ErlangInt num_13) | ((ErlangInt num_13) ==
                              (ErlangInt (DBI.fromInt 12))) ->
        (erlps__gen_list__0 [])
      (ErlangInt num_14) | ((ErlangInt num_14) ==
                              (ErlangInt (DBI.fromInt 13))) ->
        (erlps__gen_bits__0 [])
      (ErlangInt num_15) | ((ErlangInt num_15) ==
                              (ErlangInt (DBI.fromInt 14))) ->
        (erlps__gen_tuple__0 [])
      (ErlangInt num_16) | ((ErlangInt num_16) ==
                              (ErlangInt (DBI.fromInt 15))) ->
        (erlps__gen_variant__0 [])
      something_else -> (EXC.case_clause something_else)
erlps__gen_key__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_boolean__0 :: ErlangFun
erlps__gen_boolean__0 [] =
  let   
    arg_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 2))])
  in let tup_el_3 = (make_string "true")
  in let tup_el_4 = (make_string "false")
  in let arg_2 = (ErlangTuple [tup_el_3, tup_el_4])
  in (BIF.erlang__element__2 [arg_0, arg_2])
erlps__gen_boolean__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_int__0 :: ErlangFun
erlps__gen_int__0 [] =
  let   
    arg_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 4))])
  in let
    arg_6 =
      (BIF.math__pow__2
         [(ErlangInt (DBI.fromInt 10)), (ErlangInt (DBI.fromInt 40))])
  in let arg_5 = (BIF.erlang__round__1 [arg_6])
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_5])
  in let tup_el_3 = (BIF.erlang__integer_to_list__1 [arg_4])
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 10))])
  in let tup_el_9 = (BIF.erlang__integer_to_list__1 [arg_10])
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 100))])
  in let tup_el_12 = (BIF.erlang__integer_to_list__1 [arg_13])
  in let arg_16 = (make_string "0x~.16b")
  in let
    arg_20 =
      (BIF.math__pow__2
         [(ErlangInt (DBI.fromInt 10)), (ErlangInt (DBI.fromInt 10))])
  in let arg_19 = (BIF.erlang__round__1 [arg_20])
  in let
    head_18 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1" [arg_19])
  in let
    tup_el_15 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_16, (ErlangCons head_18 ErlangEmptyList)])
  in let
    arg_2 = (ErlangTuple [tup_el_3, tup_el_9, tup_el_12, tup_el_15])
  in (BIF.erlang__element__2 [arg_0, arg_2])
erlps__gen_int__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_address__0 :: ErlangFun
erlps__gen_address__0 [] =
  (make_string
     "#nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv")
erlps__gen_address__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_string__0 :: ErlangFun
erlps__gen_string__0 [] = (make_string "\"foo\"")
erlps__gen_string__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_map__0 :: ErlangFun
erlps__gen_map__0 [] =
  let    lop_0 = (make_string "{ ")
  in let lop_2 = (erlps__gen_key__0 [])
  in let lop_4 = (make_string " => ")
  in let lop_6 = (erlps__imm_arg__0 [])
  in let rop_7 = (make_string "}")
  in let rop_5 = (BIF.erlang__op_append [lop_6, rop_7])
  in let rop_3 = (BIF.erlang__op_append [lop_4, rop_5])
  in let rop_1 = (BIF.erlang__op_append [lop_2, rop_3])
  in (BIF.erlang__op_append [lop_0, rop_1])
erlps__gen_map__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_list__0 :: ErlangFun
erlps__gen_list__0 [] =
  let
    case_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 4))])
  in
    case case_0 of
      (ErlangInt num_2) | ((ErlangInt num_2) ==
                             (ErlangInt (DBI.fromInt 1))) ->
        (make_string "[]")
      (ErlangInt num_3) | ((ErlangInt num_3) ==
                             (ErlangInt (DBI.fromInt 2))) ->
        let    lop_4 = (make_string "[")
        in let arg_7 = (make_string ", ")
        in let arg_8 = (erlps__gen_list_elements__0 [])
        in let
          lop_6 =
            (BIF.do_remote_fun_call "Lists" "erlps__join__2" [arg_7, arg_8])
        in let rop_9 = (make_string " ]")
        in let rop_5 = (BIF.erlang__op_append [lop_6, rop_9])
        in (BIF.erlang__op_append [lop_4, rop_5])
      (ErlangInt num_10) | ((ErlangInt num_10) ==
                              (ErlangInt (DBI.fromInt 3))) ->
        let    lop_11 = (make_string "[ ")
        in let lop_13 = (erlps__imm_arg__0 [])
        in let rop_14 = (make_string " ]")
        in let rop_12 = (BIF.erlang__op_append [lop_13, rop_14])
        in (BIF.erlang__op_append [lop_11, rop_12])
      (ErlangInt num_15) | ((ErlangInt num_15) ==
                              (ErlangInt (DBI.fromInt 4))) ->
        let    lop_16 = (make_string "[ ")
        in let lop_18 = (erlps__imm_arg__0 [])
        in let lop_20 = (make_string ", ")
        in let lop_22 = (erlps__imm_arg__0 [])
        in let rop_23 = (make_string " ]")
        in let rop_21 = (BIF.erlang__op_append [lop_22, rop_23])
        in let rop_19 = (BIF.erlang__op_append [lop_20, rop_21])
        in let rop_17 = (BIF.erlang__op_append [lop_18, rop_19])
        in (BIF.erlang__op_append [lop_16, rop_17])
      something_else -> (EXC.case_clause something_else)
erlps__gen_list__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_list_elements__0 :: ErlangFun
erlps__gen_list_elements__0 [] =
  let
    case_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 3))])
  in
    case case_0 of
      (ErlangInt num_2) | ((ErlangInt num_2) ==
                             (ErlangInt (DBI.fromInt 1))) ->
        let    head_3 = (erlps__imm_arg__0 [])
        in let tail_4 = (erlps__gen_list_elements__0 [])
        in (ErlangCons head_3 tail_4)
      (ErlangInt num_5) | ((ErlangInt num_5) ==
                             (ErlangInt (DBI.fromInt 2))) ->
        ErlangEmptyList
      (ErlangInt num_6) | ((ErlangInt num_6) ==
                             (ErlangInt (DBI.fromInt 3))) ->
        let head_7 = (erlps__imm_arg__0 [])
        in (ErlangCons head_7 ErlangEmptyList)
      something_else -> (EXC.case_clause something_else)
erlps__gen_list_elements__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_bits__0 :: ErlangFun
erlps__gen_bits__0 [] =
  let   
    arg_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 3))])
  in let tup_el_3 = (make_string "<>")
  in let tup_el_4 = (make_string "!<>")
  in let tup_el_5 = (make_string "101010")
  in let arg_2 = (ErlangTuple [tup_el_3, tup_el_4, tup_el_5])
  in (BIF.erlang__element__2 [arg_0, arg_2])
erlps__gen_bits__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_tuple__0 :: ErlangFun
erlps__gen_tuple__0 [] =
  let
    case_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 3))])
  in
    case case_0 of
      (ErlangInt num_2) | ((ErlangInt num_2) ==
                             (ErlangInt (DBI.fromInt 1))) ->
        (make_string "()")
      (ErlangInt num_3) | ((ErlangInt num_3) ==
                             (ErlangInt (DBI.fromInt 2))) ->
        (make_string "(42)")
      (ErlangInt num_4) | ((ErlangInt num_4) ==
                             (ErlangInt (DBI.fromInt 3))) ->
        let    lop_5 = (make_string "(")
        in let lop_7 = (erlps__imm_arg__0 [])
        in let rop_8 = (make_string ")")
        in let rop_6 = (BIF.erlang__op_append [lop_7, rop_8])
        in (BIF.erlang__op_append [lop_5, rop_6])
      something_else -> (EXC.case_clause something_else)
erlps__gen_tuple__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_variant__0 :: ErlangFun
erlps__gen_variant__0 [] =
  let
    case_0 =
      (BIF.do_remote_fun_call "Rand" "erlps__uniform__1"
         [(ErlangInt (DBI.fromInt 3))])
  in
    case case_0 of
      (ErlangInt num_2) | ((ErlangInt num_2) ==
                             (ErlangInt (DBI.fromInt 1))) ->
        (make_string "(| 5 | 2 | (1, \"foo\", ()) |)")
      (ErlangInt num_3) | ((ErlangInt num_3) ==
                             (ErlangInt (DBI.fromInt 2))) ->
        let    lop_4 = (make_string "(| 2 | 1 | ( ")
        in let lop_6 = (erlps__imm_arg__0 [])
        in let rop_7 = (make_string " ) |)")
        in let rop_5 = (BIF.erlang__op_append [lop_6, rop_7])
        in (BIF.erlang__op_append [lop_4, rop_5])
      (ErlangInt num_8) | ((ErlangInt num_8) ==
                             (ErlangInt (DBI.fromInt 3))) ->
        let    lop_9 = (make_string "(| 2 | 0 | ( ")
        in let lop_11 = (erlps__imm_arg__0 [])
        in let lop_13 = (make_string ", ")
        in let lop_15 = (erlps__imm_arg__0 [])
        in let rop_16 = (make_string " ) |)")
        in let rop_14 = (BIF.erlang__op_append [lop_15, rop_16])
        in let rop_12 = (BIF.erlang__op_append [lop_13, rop_14])
        in let rop_10 = (BIF.erlang__op_append [lop_11, rop_12])
        in (BIF.erlang__op_append [lop_9, rop_10])
      something_else -> (EXC.case_clause something_else)
erlps__gen_variant__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate_documentation__1 :: ErlangFun
erlps__generate_documentation__1 [filename_0] =
  let
    match_expr_6 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [filename_0, (ErlangCons (ErlangAtom "write") ErlangEmptyList)])
  in
    case match_expr_6 of
      (ErlangTuple [(ErlangAtom "ok"), file_5]) ->
        let    lc_src_8 = (erlps__get_ops__0 [])
        in let
          arg_7 =
            (flmap
               (\ lc_10 ->
                  case lc_10 of
                    op_9 ->
                      let    lop_12 = (erlps__gen_doc__1 [op_9])
                      in let rop_14 = (make_string "\n")
                      in let
                        lc_ret_11 = (BIF.erlang__op_append [lop_12, rop_14])
                      in (ErlangCons lc_ret_11 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               lc_src_8)
        in let
          instructions_15 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_7])
        in let
          arg_17 =
            (make_string
               "### Operations\n\n| OpCode | Name | Args | Description |\n| ---    | ---  | ---  |        ---  |\n~s")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_5, arg_17, (ErlangCons instructions_15 ErlangEmptyList)])
        in let arg_22 = (make_string "\n")
        in let
          _ =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__3"
               [file_5, arg_22, ErlangEmptyList])
        in (BIF.do_remote_fun_call "File" "erlps__close__1" [file_5])
      _ -> (EXC.badmatch match_expr_6)
erlps__generate_documentation__1 [arg_25] =
  (EXC.function_clause unit)
erlps__generate_documentation__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_doc__1 :: ErlangFun
erlps__gen_doc__1 [(ErlangMap map_0)]
  | (DM.Just _constructortype_12) <-
      ((Map.lookup (ErlangAtom "constructor_type") map_0))
  , (DM.Just _constructor_11) <-
      ((Map.lookup (ErlangAtom "constructor") map_0))
  , (DM.Just _type_10) <- ((Map.lookup (ErlangAtom "type") map_0))
  , (DM.Just _gas_9) <- ((Map.lookup (ErlangAtom "gas") map_0))
  , (DM.Just doc_8) <- ((Map.lookup (ErlangAtom "doc") map_0))
  , (DM.Just _typename_7) <-
      ((Map.lookup (ErlangAtom "type_name") map_0))
  , (DM.Just _macro_6) <- ((Map.lookup (ErlangAtom "macro") map_0))
  , (DM.Just fateformat_5) <-
      ((Map.lookup (ErlangAtom "format") map_0))
  , (DM.Just _endbb_4) <-
      ((Map.lookup (ErlangAtom "end_bb") map_0))
  , (DM.Just _arity_3) <- ((Map.lookup (ErlangAtom "arity") map_0))
  , (DM.Just opcode_2) <-
      ((Map.lookup (ErlangAtom "opcode") map_0))
  , (DM.Just name_1) <-
      ((Map.lookup (ErlangAtom "opname") map_0)) =
  let   
    arguments_28 =
      case fateformat_5 of
        (ErlangEmptyList) -> (make_string "")
        _ ->
          let    arg_14 = (make_string " ")
          in let lop_21 = (BIF.erlang__length__1 [fateformat_5])
          in let
            arg_20 =
              (BIF.erlang__op_minus [lop_21, (ErlangInt (DBI.fromInt 1))])
          in let
            arg_18 =
              (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                 [(ErlangInt (DBI.fromInt 0)), arg_20])
          in let
            lc_src_16 =
              (BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                 [fateformat_5, arg_18])
          in let
            arg_15 =
              (flmap
                 (\ lc_25 ->
                    case lc_25 of
                      a_24 ->
                        let lc_ret_26 = (erlps__format_arg_doc__1 [a_24])
                        in (ErlangCons lc_ret_26 ErlangEmptyList)
                      _ -> ErlangEmptyList)
                 lc_src_16)
          in
            (BIF.do_remote_fun_call "Lists" "erlps__join__2"
               [arg_14, arg_15])
        something_else -> (EXC.case_clause something_else)
  in let arg_29 = (make_string "| 0x~.16b | ~w | ~s | ~s |\n")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_29,
        (ErlangCons opcode_2
           (ErlangCons name_1
              (ErlangCons arguments_28 (ErlangCons doc_8 ErlangEmptyList))))])
erlps__gen_doc__1 [arg_39] = (EXC.function_clause unit)
erlps__gen_doc__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_arg_doc__1 :: ErlangFun
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "a"), n_0])]
  =
  let arg_1 = (make_string "Arg~w")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "is"),
                                        _n_0])]
  =
  (make_string "Identifier")
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "ii"),
                                        _n_0])]
  =
  (make_string "Integer")
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "li"),
                                        _n_0])]
  =
  (make_string "[Integers]")
erlps__format_arg_doc__1 [(ErlangTuple [(ErlangAtom "t"), _n_0])]
  =
  (make_string "Type")
erlps__format_arg_doc__1 [arg_1] = (EXC.function_clause unit)
erlps__format_arg_doc__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)