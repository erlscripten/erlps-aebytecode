module Aeb.Fate.Pp(erlps__format_op__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__format_arg__2 :: ErlangFun
erlps__format_arg__2 [(ErlangAtom "li"),
                      (ErlangTuple [(ErlangAtom "immediate"), li_0])]
  =
  BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__format__1" [li_0]
erlps__format_arg__2 [_,
                      (ErlangTuple [(ErlangAtom "immediate"), i_0])]
  =
  BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__format__1" [i_0]
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "arg"), n_0])]
  =
  let arg_1 = toErl "arg~p"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "var"), n_0])]
  | weakLt n_0 (toErl 0) =
  let    arg_1 = toErl "store~p"
  in let head_3 = BIF.erlang__op_neg [n_0]
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons head_3 ErlangEmptyList]
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "var"), n_0])]
  =
  let arg_1 = toErl "var~p"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_1, ErlangCons n_0 ErlangEmptyList]
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "stack"), (ErlangInt num_0)])]
  | (ErlangInt num_0) == (toErl 0) =
  toErl "a"
erlps__format_arg__2 [arg_1, arg_2] = EXC.function_clause unit
erlps__format_arg__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__lookup__2 :: ErlangFun
erlps__lookup__2 [name_0, symbols_1] =
  let    arg_5 = toErl "~p"
  in let
    arg_4 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_5, ErlangCons name_0 ErlangEmptyList]
  in
    BIF.do_remote_fun_call "Maps" "erlps__get__3"
      [name_0, symbols_1, arg_4]
erlps__lookup__2 [arg_9, arg_10] = EXC.function_clause unit
erlps__lookup__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__format_op__2 :: ErlangFun
erlps__format_op__2 [(ErlangAtom "RETURN"), _] =
  let head_0 = toErl "RETURN"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "RETURNR"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "RETURNR "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "CALL "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_R"),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 contract_0]),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4]),
                     symbols_5]
  =
  let    head_6 = toErl "CALL_R "
  in let head_8 = erlps__lookup__2 [contract_0, symbols_5]
  in let head_12 = toErl "."
  in let head_14 = erlps__lookup__2 [function_1, symbols_5]
  in let head_18 = toErl " "
  in let head_20 = erlps__format_arg__2 [ErlangAtom "a", argtype_2]
  in let head_24 = toErl " "
  in let head_26 = erlps__format_arg__2 [ErlangAtom "a", rettype_3]
  in let head_30 = toErl " "
  in let head_32 = erlps__format_arg__2 [ErlangAtom "a", value_4]
  in
    ErlangCons head_6
      (ErlangCons head_8
         (ErlangCons head_12
            (ErlangCons head_14
               (ErlangCons head_18
                  (ErlangCons head_20
                     (ErlangCons head_24
                        (ErlangCons head_26
                           (ErlangCons head_30
                              (ErlangCons head_32 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_R"),
                                   contract_0,
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4]),
                     symbols_5]
  =
  let    head_6 = toErl "CALL_R "
  in let head_8 = erlps__format_arg__2 [ErlangAtom "a", contract_0]
  in let head_12 = toErl "."
  in let head_14 = erlps__lookup__2 [function_1, symbols_5]
  in let head_18 = toErl " "
  in let head_20 = erlps__format_arg__2 [ErlangAtom "a", argtype_2]
  in let head_24 = toErl " "
  in let head_26 = erlps__format_arg__2 [ErlangAtom "a", rettype_3]
  in let head_30 = toErl " "
  in let head_32 = erlps__format_arg__2 [ErlangAtom "a", value_4]
  in
    ErlangCons head_6
      (ErlangCons head_8
         (ErlangCons head_12
            (ErlangCons head_14
               (ErlangCons head_18
                  (ErlangCons head_20
                     (ErlangCons head_24
                        (ErlangCons head_26
                           (ErlangCons head_30
                              (ErlangCons head_32 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_T"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "CALL_T "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_GR"),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 contract_0]),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4, gas_5]),
                     symbols_6]
  =
  let    head_7 = toErl "CALL_GR "
  in let head_9 = erlps__lookup__2 [contract_0, symbols_6]
  in let head_13 = toErl "."
  in let head_15 = erlps__lookup__2 [function_1, symbols_6]
  in let head_19 = toErl " "
  in let head_21 = erlps__format_arg__2 [ErlangAtom "a", argtype_2]
  in let head_25 = toErl " "
  in let head_27 = erlps__format_arg__2 [ErlangAtom "a", rettype_3]
  in let head_31 = toErl " "
  in let head_33 = erlps__format_arg__2 [ErlangAtom "a", value_4]
  in let head_37 = toErl " "
  in let head_39 = erlps__format_arg__2 [ErlangAtom "a", gas_5]
  in
    ErlangCons head_7
      (ErlangCons head_9
         (ErlangCons head_13
            (ErlangCons head_15
               (ErlangCons head_19
                  (ErlangCons head_21
                     (ErlangCons head_25
                        (ErlangCons head_27
                           (ErlangCons head_31
                              (ErlangCons head_33
                                 (ErlangCons head_37
                                    (ErlangCons head_39
                                       ErlangEmptyList)))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_GR"),
                                   contract_0,
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4, gas_5]),
                     symbols_6]
  =
  let    head_7 = toErl "CALL_GR "
  in let head_9 = erlps__format_arg__2 [ErlangAtom "a", contract_0]
  in let head_13 = toErl "."
  in let head_15 = erlps__lookup__2 [function_1, symbols_6]
  in let head_19 = toErl " "
  in let head_21 = erlps__format_arg__2 [ErlangAtom "a", argtype_2]
  in let head_25 = toErl " "
  in let head_27 = erlps__format_arg__2 [ErlangAtom "a", rettype_3]
  in let head_31 = toErl " "
  in let head_33 = erlps__format_arg__2 [ErlangAtom "a", value_4]
  in let head_37 = toErl " "
  in let head_39 = erlps__format_arg__2 [ErlangAtom "a", gas_5]
  in
    ErlangCons head_7
      (ErlangCons head_9
         (ErlangCons head_13
            (ErlangCons head_15
               (ErlangCons head_19
                  (ErlangCons head_21
                     (ErlangCons head_25
                        (ErlangCons head_27
                           (ErlangCons head_31
                              (ErlangCons head_33
                                 (ErlangCons head_37
                                    (ErlangCons head_39
                                       ErlangEmptyList)))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "JUMP"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "JUMP "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "ii", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "JUMPIF"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "JUMPIF "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "ii", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SWITCH_V2"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "SWITCH_V2 "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "ii", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "ii", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SWITCH_V3"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "SWITCH_V3 "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "ii", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "ii", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "ii", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SWITCH_VN"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "SWITCH_VN "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "li", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_VALUE"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "CALL_VALUE "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "PUSH"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "PUSH "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangAtom "DUPA"), _] =
  let head_0 = toErl "DUPA"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "DUP"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "DUP "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "POP"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "POP "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangAtom "INCA"), _] =
  let head_0 = toErl "INCA"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "INC"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "INC "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangAtom "DECA"), _] =
  let head_0 = toErl "DECA"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "DEC"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "DEC "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ADD"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "ADD "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SUB"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "SUB "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MUL"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "MUL "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "DIV"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "DIV "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MOD"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "MOD "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "POW"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "POW "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STORE"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "STORE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SHA3"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "SHA3 "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SHA256"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "SHA256 "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLAKE2B"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLAKE2B "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LT"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "LT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "GT"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "GT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "EQ"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "EQ "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ELT"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "ELT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "EGT"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "EGT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "NEQ"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "NEQ "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AND"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "AND "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "OR"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "OR "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "NOT"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "NOT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "TUPLE"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "TUPLE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "ii", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ELEMENT"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "ELEMENT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SETELEMENT"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "SETELEMENT "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_EMPTY"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "MAP_EMPTY "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_LOOKUP"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "MAP_LOOKUP "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_LOOKUPD"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "MAP_LOOKUPD "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_UPDATE"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "MAP_UPDATE "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_DELETE"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "MAP_DELETE "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_MEMBER"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "MAP_MEMBER "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_FROM_LIST"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "MAP_FROM_LIST "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_SIZE"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "MAP_SIZE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MAP_TO_LIST"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "MAP_TO_LIST "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "IS_NIL"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "IS_NIL "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CONS"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "CONS "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "HD"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "HD "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "TL"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "TL "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LENGTH"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "LENGTH "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "NIL"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "NIL "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "APPEND"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "APPEND "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_JOIN"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "STR_JOIN "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "INT_TO_STR"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "INT_TO_STR "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ADDR_TO_STR"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "ADDR_TO_STR "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_REVERSE"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "STR_REVERSE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_LENGTH"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "STR_LENGTH "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BYTES_TO_INT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BYTES_TO_INT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BYTES_TO_STR"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BYTES_TO_STR "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BYTES_CONCAT"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BYTES_CONCAT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BYTES_SPLIT"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BYTES_SPLIT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "INT_TO_ADDR"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "INT_TO_ADDR "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "VARIANT"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "VARIANT "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "VARIANT_TEST"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "VARIANT_TEST "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "VARIANT_ELEMENT"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "VARIANT_ELEMENT "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangAtom "BITS_NONEA"), _] =
  let head_0 = toErl "BITS_NONEA"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_NONE"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "BITS_NONE "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangAtom "BITS_ALLA"), _] =
  let head_0 = toErl "BITS_ALLA"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_ALL"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "BITS_ALL "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_ALL_N"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BITS_ALL_N "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_SET"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BITS_SET "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_CLEAR"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BITS_CLEAR "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_TEST"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BITS_TEST "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_SUM"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BITS_SUM "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_OR"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BITS_OR "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_AND"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BITS_AND "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BITS_DIFF"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BITS_DIFF "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BALANCE"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "BALANCE "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORIGIN"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "ORIGIN "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALLER"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "CALLER "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLOCKHASH"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLOCKHASH "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BENEFICIARY"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "BENEFICIARY "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "TIMESTAMP"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "TIMESTAMP "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "GENERATION"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "GENERATION "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "MICROBLOCK"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "MICROBLOCK "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "DIFFICULTY"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "DIFFICULTY "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "GASLIMIT"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "GASLIMIT "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "GAS"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "GAS "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ADDRESS"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "ADDRESS "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "GASPRICE"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "GASPRICE "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LOG0"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "LOG0 "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LOG1"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "LOG1 "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LOG2"), arg0_0,
                                   arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "LOG2 "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LOG3"), arg0_0,
                                   arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "LOG3 "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "LOG4"), arg0_0,
                                   arg1_1, arg2_2, arg3_3, arg4_4]),
                     _]
  =
  let    head_5 = toErl "LOG4 "
  in let head_7 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_11 = toErl " "
  in let head_13 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_17 = toErl " "
  in let head_19 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_23 = toErl " "
  in let head_25 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_29 = toErl " "
  in let head_31 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in
    ErlangCons head_5
      (ErlangCons head_7
         (ErlangCons head_11
            (ErlangCons head_13
               (ErlangCons head_17
                  (ErlangCons head_19
                     (ErlangCons head_23
                        (ErlangCons head_25
                           (ErlangCons head_29
                              (ErlangCons head_31 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "SPEND"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = toErl "SPEND "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_REGISTER"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                   arg5_5, arg6_6]),
                     _]
  =
  let    head_7 = toErl "ORACLE_REGISTER "
  in let head_9 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_13 = toErl " "
  in let head_15 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_19 = toErl " "
  in let head_21 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_25 = toErl " "
  in let head_27 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_31 = toErl " "
  in let head_33 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in let head_37 = toErl " "
  in let head_39 = erlps__format_arg__2 [ErlangAtom "a", arg5_5]
  in let head_43 = toErl " "
  in let head_45 = erlps__format_arg__2 [ErlangAtom "a", arg6_6]
  in
    ErlangCons head_7
      (ErlangCons head_9
         (ErlangCons head_13
            (ErlangCons head_15
               (ErlangCons head_19
                  (ErlangCons head_21
                     (ErlangCons head_25
                        (ErlangCons head_27
                           (ErlangCons head_31
                              (ErlangCons head_33
                                 (ErlangCons head_37
                                    (ErlangCons head_39
                                       (ErlangCons head_43
                                          (ErlangCons head_45
                                             ErlangEmptyList)))))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_QUERY"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                   arg5_5, arg6_6, arg7_7]),
                     _]
  =
  let    head_8 = toErl "ORACLE_QUERY "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_14 = toErl " "
  in let head_16 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_20 = toErl " "
  in let head_22 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_26 = toErl " "
  in let head_28 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_32 = toErl " "
  in let head_34 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in let head_38 = toErl " "
  in let head_40 = erlps__format_arg__2 [ErlangAtom "a", arg5_5]
  in let head_44 = toErl " "
  in let head_46 = erlps__format_arg__2 [ErlangAtom "a", arg6_6]
  in let head_50 = toErl " "
  in let head_52 = erlps__format_arg__2 [ErlangAtom "a", arg7_7]
  in
    ErlangCons head_8
      (ErlangCons head_10
         (ErlangCons head_14
            (ErlangCons head_16
               (ErlangCons head_20
                  (ErlangCons head_22
                     (ErlangCons head_26
                        (ErlangCons head_28
                           (ErlangCons head_32
                              (ErlangCons head_34
                                 (ErlangCons head_38
                                    (ErlangCons head_40
                                       (ErlangCons head_44
                                          (ErlangCons head_46
                                             (ErlangCons head_50
                                                (ErlangCons head_52
                                                   ErlangEmptyList)))))))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_RESPOND"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                   arg5_5]),
                     _]
  =
  let    head_6 = toErl "ORACLE_RESPOND "
  in let head_8 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_12 = toErl " "
  in let head_14 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_18 = toErl " "
  in let head_20 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_24 = toErl " "
  in let head_26 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_30 = toErl " "
  in let head_32 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in let head_36 = toErl " "
  in let head_38 = erlps__format_arg__2 [ErlangAtom "a", arg5_5]
  in
    ErlangCons head_6
      (ErlangCons head_8
         (ErlangCons head_12
            (ErlangCons head_14
               (ErlangCons head_18
                  (ErlangCons head_20
                     (ErlangCons head_24
                        (ErlangCons head_26
                           (ErlangCons head_30
                              (ErlangCons head_32
                                 (ErlangCons head_36
                                    (ErlangCons head_38
                                       ErlangEmptyList)))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_EXTEND"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "ORACLE_EXTEND "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_GET_ANSWER"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4]),
                     _]
  =
  let    head_5 = toErl "ORACLE_GET_ANSWER "
  in let head_7 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_11 = toErl " "
  in let head_13 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_17 = toErl " "
  in let head_19 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_23 = toErl " "
  in let head_25 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_29 = toErl " "
  in let head_31 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in
    ErlangCons head_5
      (ErlangCons head_7
         (ErlangCons head_11
            (ErlangCons head_13
               (ErlangCons head_17
                  (ErlangCons head_19
                     (ErlangCons head_23
                        (ErlangCons head_25
                           (ErlangCons head_29
                              (ErlangCons head_31 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_GET_QUESTION"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4]),
                     _]
  =
  let    head_5 = toErl "ORACLE_GET_QUESTION "
  in let head_7 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_11 = toErl " "
  in let head_13 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_17 = toErl " "
  in let head_19 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_23 = toErl " "
  in let head_25 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_29 = toErl " "
  in let head_31 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in
    ErlangCons head_5
      (ErlangCons head_7
         (ErlangCons head_11
            (ErlangCons head_13
               (ErlangCons head_17
                  (ErlangCons head_19
                     (ErlangCons head_23
                        (ErlangCons head_25
                           (ErlangCons head_29
                              (ErlangCons head_31 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_QUERY_FEE"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "ORACLE_QUERY_FEE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_RESOLVE"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "AENS_RESOLVE "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_PRECLAIM"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "AENS_PRECLAIM "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_CLAIM"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4]),
                     _]
  =
  let    head_5 = toErl "AENS_CLAIM "
  in let head_7 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_11 = toErl " "
  in let head_13 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_17 = toErl " "
  in let head_19 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_23 = toErl " "
  in let head_25 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_29 = toErl " "
  in let head_31 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in
    ErlangCons head_5
      (ErlangCons head_7
         (ErlangCons head_11
            (ErlangCons head_13
               (ErlangCons head_17
                  (ErlangCons head_19
                     (ErlangCons head_23
                        (ErlangCons head_25
                           (ErlangCons head_29
                              (ErlangCons head_31 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_UPDATE"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                   arg5_5]),
                     _]
  =
  let    head_6 = toErl "AENS_UPDATE "
  in let head_8 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_12 = toErl " "
  in let head_14 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_18 = toErl " "
  in let head_20 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_24 = toErl " "
  in let head_26 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_30 = toErl " "
  in let head_32 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in let head_36 = toErl " "
  in let head_38 = erlps__format_arg__2 [ErlangAtom "a", arg5_5]
  in
    ErlangCons head_6
      (ErlangCons head_8
         (ErlangCons head_12
            (ErlangCons head_14
               (ErlangCons head_18
                  (ErlangCons head_20
                     (ErlangCons head_24
                        (ErlangCons head_26
                           (ErlangCons head_30
                              (ErlangCons head_32
                                 (ErlangCons head_36
                                    (ErlangCons head_38
                                       ErlangEmptyList)))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_TRANSFER"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "AENS_TRANSFER "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_REVOKE"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "AENS_REVOKE "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BALANCE_OTHER"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BALANCE_OTHER "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "VERIFY_SIG"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "VERIFY_SIG "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "VERIFY_SIG_SECP256K1"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "VERIFY_SIG_SECP256K1 "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CONTRACT_TO_ADDRESS"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "CONTRACT_TO_ADDRESS "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AUTH_TX_HASH"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "AUTH_TX_HASH "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_CHECK"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "ORACLE_CHECK "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_CHECK_QUERY"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4]),
                     _]
  =
  let    head_5 = toErl "ORACLE_CHECK_QUERY "
  in let head_7 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_11 = toErl " "
  in let head_13 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_17 = toErl " "
  in let head_19 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_23 = toErl " "
  in let head_25 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_29 = toErl " "
  in let head_31 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in
    ErlangCons head_5
      (ErlangCons head_7
         (ErlangCons head_11
            (ErlangCons head_13
               (ErlangCons head_17
                  (ErlangCons head_19
                     (ErlangCons head_23
                        (ErlangCons head_25
                           (ErlangCons head_29
                              (ErlangCons head_31 ErlangEmptyList)))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "IS_ORACLE"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "IS_ORACLE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "IS_CONTRACT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "IS_CONTRACT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "IS_PAYABLE"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "IS_PAYABLE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CREATOR"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "CREATOR "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ECVERIFY_SECP256K1"),
                                   arg0_0, arg1_1, arg2_2, arg3_3]),
                     _]
  =
  let    head_4 = toErl "ECVERIFY_SECP256K1 "
  in let head_6 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_10 = toErl " "
  in let head_12 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_16 = toErl " "
  in let head_18 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_22 = toErl " "
  in let head_24 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in
    ErlangCons head_4
      (ErlangCons head_6
         (ErlangCons head_10
            (ErlangCons head_12
               (ErlangCons head_16
                  (ErlangCons head_18
                     (ErlangCons head_22
                        (ErlangCons head_24 ErlangEmptyList)))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ECRECOVER_SECP256K1"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "ECRECOVER_SECP256K1 "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ADDRESS_TO_CONTRACT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "ADDRESS_TO_CONTRACT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_NEG"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G1_NEG "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_NORM"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G1_NORM "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_VALID"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G1_VALID "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_IS_ZERO"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G1_IS_ZERO "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_ADD"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_G1_ADD "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_MUL"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_G1_MUL "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_NEG"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G2_NEG "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_NORM"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G2_NORM "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_VALID"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G2_VALID "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_IS_ZERO"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_G2_IS_ZERO "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_ADD"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_G2_ADD "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_MUL"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_G2_MUL "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_INV"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_GT_INV "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_ADD"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_GT_ADD "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_MUL"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_GT_MUL "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_POW"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_GT_POW "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_IS_ONE"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_GT_IS_ONE "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_PAIRING"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_PAIRING "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_MILLER_LOOP"),
                                   arg0_0, arg1_1, arg2_2]),
                     _]
  =
  let    head_3 = toErl "BLS12_381_MILLER_LOOP "
  in let head_5 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_9 = toErl " "
  in let head_11 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in let head_15 = toErl " "
  in let head_17 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in
    ErlangCons head_3
      (ErlangCons head_5
         (ErlangCons head_9
            (ErlangCons head_11
               (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList)))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_FINAL_EXP"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_FINAL_EXP "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_INT_TO_FR"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_INT_TO_FR "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_INT_TO_FP"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_INT_TO_FP "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_FR_TO_INT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_FR_TO_INT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "BLS12_381_FP_TO_INT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "BLS12_381_FP_TO_INT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AENS_LOOKUP"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "AENS_LOOKUP "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ORACLE_EXPIRY"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "ORACLE_EXPIRY "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "AUTH_TX"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "AUTH_TX "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_TO_LIST"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "STR_TO_LIST "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_FROM_LIST"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "STR_FROM_LIST "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_TO_UPPER"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "STR_TO_UPPER "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "STR_TO_LOWER"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "STR_TO_LOWER "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CHAR_TO_INT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "CHAR_TO_INT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CHAR_FROM_INT"),
                                   arg0_0, arg1_1]),
                     _]
  =
  let    head_2 = toErl "CHAR_FROM_INT "
  in let head_4 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_8 = toErl " "
  in let head_10 = erlps__format_arg__2 [ErlangAtom "a", arg1_1]
  in
    ErlangCons head_2
      (ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_PGR"),
                                   arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                   arg5_5, arg6_6]),
                     _]
  =
  let    head_7 = toErl "CALL_PGR "
  in let head_9 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in let head_13 = toErl " "
  in let head_15 = erlps__format_arg__2 [ErlangAtom "is", arg1_1]
  in let head_19 = toErl " "
  in let head_21 = erlps__format_arg__2 [ErlangAtom "a", arg2_2]
  in let head_25 = toErl " "
  in let head_27 = erlps__format_arg__2 [ErlangAtom "a", arg3_3]
  in let head_31 = toErl " "
  in let head_33 = erlps__format_arg__2 [ErlangAtom "a", arg4_4]
  in let head_37 = toErl " "
  in let head_39 = erlps__format_arg__2 [ErlangAtom "a", arg5_5]
  in let head_43 = toErl " "
  in let head_45 = erlps__format_arg__2 [ErlangAtom "a", arg6_6]
  in
    ErlangCons head_7
      (ErlangCons head_9
         (ErlangCons head_13
            (ErlangCons head_15
               (ErlangCons head_19
                  (ErlangCons head_21
                     (ErlangCons head_25
                        (ErlangCons head_27
                           (ErlangCons head_31
                              (ErlangCons head_33
                                 (ErlangCons head_37
                                    (ErlangCons head_39
                                       (ErlangCons head_43
                                          (ErlangCons head_45
                                             ErlangEmptyList)))))))))))))
erlps__format_op__2 [(ErlangAtom "DEACTIVATE"), _] =
  let head_0 = toErl "DEACTIVATE"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "ABORT"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = toErl "ABORT "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "EXIT"), arg0_0]),
                     _]
  =
  let    head_1 = toErl "EXIT "
  in let head_3 = erlps__format_arg__2 [ErlangAtom "a", arg0_0]
  in ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList)
erlps__format_op__2 [(ErlangAtom "NOP"), _] =
  let head_0 = toErl "NOP"
  in ErlangCons head_0 ErlangEmptyList
erlps__format_op__2 [op_0, _symbols_1] =
  let arg_2 = toErl ";; Bad Op: ~w\n"
  in
    BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
      [arg_2, ErlangCons op_0 ErlangEmptyList]
erlps__format_op__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__format_op__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args