module Aeb.Fate.Pp(erlps__format_op__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__format_arg__2 :: ErlangFun
erlps__format_arg__2 [(ErlangAtom "li"),
                      (ErlangTuple [(ErlangAtom "immediate"), li_0])]
  =
  (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__format__1"
     [li_0])
erlps__format_arg__2 [_,
                      (ErlangTuple [(ErlangAtom "immediate"), i_0])]
  =
  (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__format__1" [i_0])
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "arg"), n_0])]
  =
  let arg_1 = (H.make_string "arg~p")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "var"), n_0])]
  | (weakLt n_0 (ErlangInt (DBI.fromInt 0))) =
  let    arg_1 = (H.make_string "store~p")
  in let head_3 = (BIF.erlang__op_neg [n_0])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons head_3 ErlangEmptyList)])
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "var"), n_0])]
  =
  let arg_1 = (H.make_string "var~p")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons n_0 ErlangEmptyList)])
erlps__format_arg__2 [(ErlangAtom "a"),
                      (ErlangTuple [(ErlangAtom "stack"), (ErlangInt num_0)])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (H.make_string "a")
erlps__format_arg__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__format_arg__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lookup__2 :: ErlangFun
erlps__lookup__2 [name_0, symbols_1] =
  let    arg_5 = (H.make_string "~p")
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_5, (ErlangCons name_0 ErlangEmptyList)])
  in
    (BIF.do_remote_fun_call "Maps" "erlps__get__3"
       [name_0, symbols_1, arg_4])
erlps__lookup__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__lookup__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_op__2 :: ErlangFun
erlps__format_op__2 [(ErlangAtom "RETURN"), _] =
  let head_0 = (H.make_string "RETURN")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "RETURNR"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = (H.make_string "RETURNR ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL"), arg0_0]),
                     _]
  =
  let    head_1 = (H.make_string "CALL ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_R"),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 contract_0]),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4]),
                     symbols_5]
  =
  let    head_6 = (H.make_string "CALL_R ")
  in let head_8 = (erlps__lookup__2 [contract_0, symbols_5])
  in let head_12 = (H.make_string ".")
  in let head_14 = (erlps__lookup__2 [function_1, symbols_5])
  in let head_18 = (H.make_string " ")
  in let
    head_20 = (erlps__format_arg__2 [(ErlangAtom "a"), argtype_2])
  in let head_24 = (H.make_string " ")
  in let
    head_26 = (erlps__format_arg__2 [(ErlangAtom "a"), rettype_3])
  in let head_30 = (H.make_string " ")
  in let
    head_32 = (erlps__format_arg__2 [(ErlangAtom "a"), value_4])
  in
    (ErlangCons head_6
       (ErlangCons head_8
          (ErlangCons head_12
             (ErlangCons head_14
                (ErlangCons head_18
                   (ErlangCons head_20
                      (ErlangCons head_24
                         (ErlangCons head_26
                            (ErlangCons head_30
                               (ErlangCons head_32 ErlangEmptyList))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_R"),
                                   contract_0,
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4]),
                     symbols_5]
  =
  let    head_6 = (H.make_string "CALL_R ")
  in let
    head_8 = (erlps__format_arg__2 [(ErlangAtom "a"), contract_0])
  in let head_12 = (H.make_string ".")
  in let head_14 = (erlps__lookup__2 [function_1, symbols_5])
  in let head_18 = (H.make_string " ")
  in let
    head_20 = (erlps__format_arg__2 [(ErlangAtom "a"), argtype_2])
  in let head_24 = (H.make_string " ")
  in let
    head_26 = (erlps__format_arg__2 [(ErlangAtom "a"), rettype_3])
  in let head_30 = (H.make_string " ")
  in let
    head_32 = (erlps__format_arg__2 [(ErlangAtom "a"), value_4])
  in
    (ErlangCons head_6
       (ErlangCons head_8
          (ErlangCons head_12
             (ErlangCons head_14
                (ErlangCons head_18
                   (ErlangCons head_20
                      (ErlangCons head_24
                         (ErlangCons head_26
                            (ErlangCons head_30
                               (ErlangCons head_32 ErlangEmptyList))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_T"),
                                   arg0_0]),
                     _]
  =
  let    head_1 = (H.make_string "CALL_T ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_GR"),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 contract_0]),
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4, gas_5]),
                     symbols_6]
  =
  let    head_7 = (H.make_string "CALL_GR ")
  in let head_9 = (erlps__lookup__2 [contract_0, symbols_6])
  in let head_13 = (H.make_string ".")
  in let head_15 = (erlps__lookup__2 [function_1, symbols_6])
  in let head_19 = (H.make_string " ")
  in let
    head_21 = (erlps__format_arg__2 [(ErlangAtom "a"), argtype_2])
  in let head_25 = (H.make_string " ")
  in let
    head_27 = (erlps__format_arg__2 [(ErlangAtom "a"), rettype_3])
  in let head_31 = (H.make_string " ")
  in let
    head_33 = (erlps__format_arg__2 [(ErlangAtom "a"), value_4])
  in let head_37 = (H.make_string " ")
  in let head_39 = (erlps__format_arg__2 [(ErlangAtom "a"), gas_5])
  in
    (ErlangCons head_7
       (ErlangCons head_9
          (ErlangCons head_13
             (ErlangCons head_15
                (ErlangCons head_19
                   (ErlangCons head_21
                      (ErlangCons head_25
                         (ErlangCons head_27
                            (ErlangCons head_31
                               (ErlangCons head_33
                                  (ErlangCons head_37
                                     (ErlangCons head_39
                                        ErlangEmptyList))))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "CALL_GR"),
                                   contract_0,
                                   (ErlangTuple [(ErlangAtom "immediate"),
                                                 function_1]),
                                   argtype_2, rettype_3, value_4, gas_5]),
                     symbols_6]
  =
  let    head_7 = (H.make_string "CALL_GR ")
  in let
    head_9 = (erlps__format_arg__2 [(ErlangAtom "a"), contract_0])
  in let head_13 = (H.make_string ".")
  in let head_15 = (erlps__lookup__2 [function_1, symbols_6])
  in let head_19 = (H.make_string " ")
  in let
    head_21 = (erlps__format_arg__2 [(ErlangAtom "a"), argtype_2])
  in let head_25 = (H.make_string " ")
  in let
    head_27 = (erlps__format_arg__2 [(ErlangAtom "a"), rettype_3])
  in let head_31 = (H.make_string " ")
  in let
    head_33 = (erlps__format_arg__2 [(ErlangAtom "a"), value_4])
  in let head_37 = (H.make_string " ")
  in let head_39 = (erlps__format_arg__2 [(ErlangAtom "a"), gas_5])
  in
    (ErlangCons head_7
       (ErlangCons head_9
          (ErlangCons head_13
             (ErlangCons head_15
                (ErlangCons head_19
                   (ErlangCons head_21
                      (ErlangCons head_25
                         (ErlangCons head_27
                            (ErlangCons head_31
                               (ErlangCons head_33
                                  (ErlangCons head_37
                                     (ErlangCons head_39
                                        ErlangEmptyList))))))))))))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "JUMP"), arg0_0]),
                     _]
  =
  let    head_1 = (H.make_string "JUMP ")
  in let
    head_3 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2 [(ErlangTuple [(ErlangAtom "JUMPIF"), arg0_0,
                                   arg1_1]),
                     _]
  =
  let    head_2 = (H.make_string "JUMPIF ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2 args = (erlps__format_op__2__p1 args)

erlps__format_op__2__p1 :: ErlangFun
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "SWITCH_V2"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "SWITCH_V2 ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "SWITCH_V3"),
                                       arg0_0, arg1_1, arg2_2, arg3_3]),
                         _]
  =
  let    head_4 = (H.make_string "SWITCH_V3 ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "SWITCH_VN"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "SWITCH_VN ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "li"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "CALL_VALUE"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "CALL_VALUE ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "PUSH"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "PUSH ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p1 [(ErlangAtom "DUPA"), _] =
  let head_0 = (H.make_string "DUPA")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "DUP"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "DUP ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "POP"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "POP ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p1 [(ErlangAtom "INCA"), _] =
  let head_0 = (H.make_string "INCA")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p1 [(ErlangTuple [(ErlangAtom "INC"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "INC ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p1 args = (erlps__format_op__2__p2 args)

erlps__format_op__2__p2 :: ErlangFun
erlps__format_op__2__p2 [(ErlangAtom "DECA"), _] =
  let head_0 = (H.make_string "DECA")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "DEC"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "DEC ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "ADD"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "ADD ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "SUB"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "SUB ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "MUL"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "MUL ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "DIV"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "DIV ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "MOD"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "MOD ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "POW"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "POW ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "STORE"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "STORE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p2 [(ErlangTuple [(ErlangAtom "SHA3"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "SHA3 ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p2 args = (erlps__format_op__2__p3 args)

erlps__format_op__2__p3 :: ErlangFun
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "SHA256"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "SHA256 ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "BLAKE2B"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "BLAKE2B ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "LT"), arg0_0,
                                       arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "LT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "GT"), arg0_0,
                                       arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "GT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "EQ"), arg0_0,
                                       arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "EQ ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "ELT"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "ELT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "EGT"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "EGT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "NEQ"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "NEQ ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "AND"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "AND ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 [(ErlangTuple [(ErlangAtom "OR"), arg0_0,
                                       arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "OR ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p3 args = (erlps__format_op__2__p4 args)

erlps__format_op__2__p4 :: ErlangFun
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "NOT"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "NOT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "TUPLE"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "TUPLE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "ii"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "ELEMENT"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "ELEMENT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "SETELEMENT"),
                                       arg0_0, arg1_1, arg2_2, arg3_3]),
                         _]
  =
  let    head_4 = (H.make_string "SETELEMENT ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "MAP_EMPTY"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "MAP_EMPTY ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "MAP_LOOKUP"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "MAP_LOOKUP ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "MAP_LOOKUPD"),
                                       arg0_0, arg1_1, arg2_2, arg3_3]),
                         _]
  =
  let    head_4 = (H.make_string "MAP_LOOKUPD ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "MAP_UPDATE"),
                                       arg0_0, arg1_1, arg2_2, arg3_3]),
                         _]
  =
  let    head_4 = (H.make_string "MAP_UPDATE ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "MAP_DELETE"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "MAP_DELETE ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p4 [(ErlangTuple [(ErlangAtom "MAP_MEMBER"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "MAP_MEMBER ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p4 args = (erlps__format_op__2__p5 args)

erlps__format_op__2__p5 :: ErlangFun
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "MAP_FROM_LIST"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "MAP_FROM_LIST ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "MAP_SIZE"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "MAP_SIZE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "MAP_TO_LIST"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "MAP_TO_LIST ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "IS_NIL"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "IS_NIL ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "CONS"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "CONS ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "HD"), arg0_0,
                                       arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "HD ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "TL"), arg0_0,
                                       arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "TL ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "LENGTH"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "LENGTH ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "NIL"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "NIL ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p5 [(ErlangTuple [(ErlangAtom "APPEND"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "APPEND ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p5 args = (erlps__format_op__2__p6 args)

erlps__format_op__2__p6 :: ErlangFun
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "STR_JOIN"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "STR_JOIN ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "INT_TO_STR"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "INT_TO_STR ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "ADDR_TO_STR"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "ADDR_TO_STR ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "STR_REVERSE"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "STR_REVERSE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "STR_LENGTH"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "STR_LENGTH ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "BYTES_TO_INT"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "BYTES_TO_INT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "BYTES_TO_STR"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "BYTES_TO_STR ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "BYTES_CONCAT"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BYTES_CONCAT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "BYTES_SPLIT"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BYTES_SPLIT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p6 [(ErlangTuple [(ErlangAtom "INT_TO_ADDR"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "INT_TO_ADDR ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p6 args = (erlps__format_op__2__p7 args)

erlps__format_op__2__p7 :: ErlangFun
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "VARIANT"),
                                       arg0_0, arg1_1, arg2_2, arg3_3]),
                         _]
  =
  let    head_4 = (H.make_string "VARIANT ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "VARIANT_TEST"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "VARIANT_TEST ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "VARIANT_ELEMENT"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "VARIANT_ELEMENT ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p7 [(ErlangAtom "BITS_NONEA"), _] =
  let head_0 = (H.make_string "BITS_NONEA")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "BITS_NONE"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "BITS_NONE ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p7 [(ErlangAtom "BITS_ALLA"), _] =
  let head_0 = (H.make_string "BITS_ALLA")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "BITS_ALL"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "BITS_ALL ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "BITS_ALL_N"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "BITS_ALL_N ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "BITS_SET"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BITS_SET ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p7 [(ErlangTuple [(ErlangAtom "BITS_CLEAR"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BITS_CLEAR ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p7 args = (erlps__format_op__2__p8 args)

erlps__format_op__2__p8 :: ErlangFun
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BITS_TEST"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BITS_TEST ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BITS_SUM"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "BITS_SUM ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BITS_OR"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BITS_OR ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BITS_AND"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BITS_AND ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BITS_DIFF"),
                                       arg0_0, arg1_1, arg2_2]),
                         _]
  =
  let    head_3 = (H.make_string "BITS_DIFF ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BALANCE"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "BALANCE ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "ORIGIN"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "ORIGIN ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "CALLER"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "CALLER ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BLOCKHASH"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "BLOCKHASH ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p8 [(ErlangTuple [(ErlangAtom "BENEFICIARY"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "BENEFICIARY ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p8 args = (erlps__format_op__2__p9 args)

erlps__format_op__2__p9 :: ErlangFun
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "TIMESTAMP"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "TIMESTAMP ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "GENERATION"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "GENERATION ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "MICROBLOCK"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "MICROBLOCK ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "DIFFICULTY"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "DIFFICULTY ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "GASLIMIT"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "GASLIMIT ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "GAS"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "GAS ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "ADDRESS"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "ADDRESS ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "GASPRICE"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "GASPRICE ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "LOG0"),
                                       arg0_0]),
                         _]
  =
  let    head_1 = (H.make_string "LOG0 ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p9 [(ErlangTuple [(ErlangAtom "LOG1"),
                                       arg0_0, arg1_1]),
                         _]
  =
  let    head_2 = (H.make_string "LOG1 ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p9 args = (erlps__format_op__2__p10 args)

erlps__format_op__2__p10 :: ErlangFun
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "LOG2"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "LOG2 ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "LOG3"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "LOG3 ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "LOG4"),
                                        arg0_0, arg1_1, arg2_2, arg3_3,
                                        arg4_4]),
                          _]
  =
  let    head_5 = (H.make_string "LOG4 ")
  in let head_7 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_11 = (H.make_string " ")
  in let
    head_13 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_17 = (H.make_string " ")
  in let
    head_19 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_23 = (H.make_string " ")
  in let
    head_25 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_29 = (H.make_string " ")
  in let
    head_31 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in
    (ErlangCons head_5
       (ErlangCons head_7
          (ErlangCons head_11
             (ErlangCons head_13
                (ErlangCons head_17
                   (ErlangCons head_19
                      (ErlangCons head_23
                         (ErlangCons head_25
                            (ErlangCons head_29
                               (ErlangCons head_31 ErlangEmptyList))))))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "SPEND"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "SPEND ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "ORACLE_REGISTER"),
                                        arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                        arg5_5, arg6_6]),
                          _]
  =
  let    head_7 = (H.make_string "ORACLE_REGISTER ")
  in let head_9 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_13 = (H.make_string " ")
  in let
    head_15 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_19 = (H.make_string " ")
  in let
    head_21 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_25 = (H.make_string " ")
  in let
    head_27 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_31 = (H.make_string " ")
  in let
    head_33 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in let head_37 = (H.make_string " ")
  in let
    head_39 = (erlps__format_arg__2 [(ErlangAtom "a"), arg5_5])
  in let head_43 = (H.make_string " ")
  in let
    head_45 = (erlps__format_arg__2 [(ErlangAtom "a"), arg6_6])
  in
    (ErlangCons head_7
       (ErlangCons head_9
          (ErlangCons head_13
             (ErlangCons head_15
                (ErlangCons head_19
                   (ErlangCons head_21
                      (ErlangCons head_25
                         (ErlangCons head_27
                            (ErlangCons head_31
                               (ErlangCons head_33
                                  (ErlangCons head_37
                                     (ErlangCons head_39
                                        (ErlangCons head_43
                                           (ErlangCons head_45
                                              ErlangEmptyList))))))))))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "ORACLE_QUERY"),
                                        arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                        arg5_5, arg6_6, arg7_7]),
                          _]
  =
  let    head_8 = (H.make_string "ORACLE_QUERY ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_14 = (H.make_string " ")
  in let
    head_16 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_20 = (H.make_string " ")
  in let
    head_22 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_26 = (H.make_string " ")
  in let
    head_28 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_32 = (H.make_string " ")
  in let
    head_34 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in let head_38 = (H.make_string " ")
  in let
    head_40 = (erlps__format_arg__2 [(ErlangAtom "a"), arg5_5])
  in let head_44 = (H.make_string " ")
  in let
    head_46 = (erlps__format_arg__2 [(ErlangAtom "a"), arg6_6])
  in let head_50 = (H.make_string " ")
  in let
    head_52 = (erlps__format_arg__2 [(ErlangAtom "a"), arg7_7])
  in
    (ErlangCons head_8
       (ErlangCons head_10
          (ErlangCons head_14
             (ErlangCons head_16
                (ErlangCons head_20
                   (ErlangCons head_22
                      (ErlangCons head_26
                         (ErlangCons head_28
                            (ErlangCons head_32
                               (ErlangCons head_34
                                  (ErlangCons head_38
                                     (ErlangCons head_40
                                        (ErlangCons head_44
                                           (ErlangCons head_46
                                              (ErlangCons head_50
                                                 (ErlangCons head_52
                                                    ErlangEmptyList))))))))))))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "ORACLE_RESPOND"),
                                        arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                        arg5_5]),
                          _]
  =
  let    head_6 = (H.make_string "ORACLE_RESPOND ")
  in let head_8 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_12 = (H.make_string " ")
  in let
    head_14 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_18 = (H.make_string " ")
  in let
    head_20 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_24 = (H.make_string " ")
  in let
    head_26 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_30 = (H.make_string " ")
  in let
    head_32 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in let head_36 = (H.make_string " ")
  in let
    head_38 = (erlps__format_arg__2 [(ErlangAtom "a"), arg5_5])
  in
    (ErlangCons head_6
       (ErlangCons head_8
          (ErlangCons head_12
             (ErlangCons head_14
                (ErlangCons head_18
                   (ErlangCons head_20
                      (ErlangCons head_24
                         (ErlangCons head_26
                            (ErlangCons head_30
                               (ErlangCons head_32
                                  (ErlangCons head_36
                                     (ErlangCons head_38
                                        ErlangEmptyList))))))))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "ORACLE_EXTEND"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "ORACLE_EXTEND ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "ORACLE_GET_ANSWER"),
                                        arg0_0, arg1_1, arg2_2, arg3_3,
                                        arg4_4]),
                          _]
  =
  let    head_5 = (H.make_string "ORACLE_GET_ANSWER ")
  in let head_7 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_11 = (H.make_string " ")
  in let
    head_13 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_17 = (H.make_string " ")
  in let
    head_19 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_23 = (H.make_string " ")
  in let
    head_25 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_29 = (H.make_string " ")
  in let
    head_31 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in
    (ErlangCons head_5
       (ErlangCons head_7
          (ErlangCons head_11
             (ErlangCons head_13
                (ErlangCons head_17
                   (ErlangCons head_19
                      (ErlangCons head_23
                         (ErlangCons head_25
                            (ErlangCons head_29
                               (ErlangCons head_31 ErlangEmptyList))))))))))
erlps__format_op__2__p10 [(ErlangTuple [(ErlangAtom "ORACLE_GET_QUESTION"),
                                        arg0_0, arg1_1, arg2_2, arg3_3,
                                        arg4_4]),
                          _]
  =
  let    head_5 = (H.make_string "ORACLE_GET_QUESTION ")
  in let head_7 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_11 = (H.make_string " ")
  in let
    head_13 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_17 = (H.make_string " ")
  in let
    head_19 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_23 = (H.make_string " ")
  in let
    head_25 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_29 = (H.make_string " ")
  in let
    head_31 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in
    (ErlangCons head_5
       (ErlangCons head_7
          (ErlangCons head_11
             (ErlangCons head_13
                (ErlangCons head_17
                   (ErlangCons head_19
                      (ErlangCons head_23
                         (ErlangCons head_25
                            (ErlangCons head_29
                               (ErlangCons head_31 ErlangEmptyList))))))))))
erlps__format_op__2__p10 args = (erlps__format_op__2__p11 args)

erlps__format_op__2__p11 :: ErlangFun
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "ORACLE_QUERY_FEE"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "ORACLE_QUERY_FEE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "AENS_RESOLVE"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "AENS_RESOLVE ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "AENS_PRECLAIM"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "AENS_PRECLAIM ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "AENS_CLAIM"),
                                        arg0_0, arg1_1, arg2_2, arg3_3,
                                        arg4_4]),
                          _]
  =
  let    head_5 = (H.make_string "AENS_CLAIM ")
  in let head_7 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_11 = (H.make_string " ")
  in let
    head_13 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_17 = (H.make_string " ")
  in let
    head_19 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_23 = (H.make_string " ")
  in let
    head_25 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_29 = (H.make_string " ")
  in let
    head_31 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in
    (ErlangCons head_5
       (ErlangCons head_7
          (ErlangCons head_11
             (ErlangCons head_13
                (ErlangCons head_17
                   (ErlangCons head_19
                      (ErlangCons head_23
                         (ErlangCons head_25
                            (ErlangCons head_29
                               (ErlangCons head_31 ErlangEmptyList))))))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "AENS_UPDATE"),
                                        arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                        arg5_5]),
                          _]
  =
  let    head_6 = (H.make_string "AENS_UPDATE ")
  in let head_8 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_12 = (H.make_string " ")
  in let
    head_14 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_18 = (H.make_string " ")
  in let
    head_20 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_24 = (H.make_string " ")
  in let
    head_26 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_30 = (H.make_string " ")
  in let
    head_32 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in let head_36 = (H.make_string " ")
  in let
    head_38 = (erlps__format_arg__2 [(ErlangAtom "a"), arg5_5])
  in
    (ErlangCons head_6
       (ErlangCons head_8
          (ErlangCons head_12
             (ErlangCons head_14
                (ErlangCons head_18
                   (ErlangCons head_20
                      (ErlangCons head_24
                         (ErlangCons head_26
                            (ErlangCons head_30
                               (ErlangCons head_32
                                  (ErlangCons head_36
                                     (ErlangCons head_38
                                        ErlangEmptyList))))))))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "AENS_TRANSFER"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "AENS_TRANSFER ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "AENS_REVOKE"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "AENS_REVOKE ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "BALANCE_OTHER"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BALANCE_OTHER ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "VERIFY_SIG"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "VERIFY_SIG ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p11 [(ErlangTuple [(ErlangAtom "VERIFY_SIG_SECP256K1"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "VERIFY_SIG_SECP256K1 ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p11 args = (erlps__format_op__2__p12 args)

erlps__format_op__2__p12 :: ErlangFun
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "CONTRACT_TO_ADDRESS"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "CONTRACT_TO_ADDRESS ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "AUTH_TX_HASH"),
                                        arg0_0]),
                          _]
  =
  let    head_1 = (H.make_string "AUTH_TX_HASH ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "ORACLE_CHECK"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "ORACLE_CHECK ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "ORACLE_CHECK_QUERY"),
                                        arg0_0, arg1_1, arg2_2, arg3_3,
                                        arg4_4]),
                          _]
  =
  let    head_5 = (H.make_string "ORACLE_CHECK_QUERY ")
  in let head_7 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_11 = (H.make_string " ")
  in let
    head_13 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_17 = (H.make_string " ")
  in let
    head_19 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_23 = (H.make_string " ")
  in let
    head_25 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_29 = (H.make_string " ")
  in let
    head_31 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in
    (ErlangCons head_5
       (ErlangCons head_7
          (ErlangCons head_11
             (ErlangCons head_13
                (ErlangCons head_17
                   (ErlangCons head_19
                      (ErlangCons head_23
                         (ErlangCons head_25
                            (ErlangCons head_29
                               (ErlangCons head_31 ErlangEmptyList))))))))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "IS_ORACLE"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "IS_ORACLE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "IS_CONTRACT"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "IS_CONTRACT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "IS_PAYABLE"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "IS_PAYABLE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "CREATOR"),
                                        arg0_0]),
                          _]
  =
  let    head_1 = (H.make_string "CREATOR ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "ECVERIFY_SECP256K1"),
                                        arg0_0, arg1_1, arg2_2, arg3_3]),
                          _]
  =
  let    head_4 = (H.make_string "ECVERIFY_SECP256K1 ")
  in let head_6 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_10 = (H.make_string " ")
  in let
    head_12 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_16 = (H.make_string " ")
  in let
    head_18 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_22 = (H.make_string " ")
  in let
    head_24 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in
    (ErlangCons head_4
       (ErlangCons head_6
          (ErlangCons head_10
             (ErlangCons head_12
                (ErlangCons head_16
                   (ErlangCons head_18
                      (ErlangCons head_22
                         (ErlangCons head_24 ErlangEmptyList))))))))
erlps__format_op__2__p12 [(ErlangTuple [(ErlangAtom "ECRECOVER_SECP256K1"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "ECRECOVER_SECP256K1 ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p12 args = (erlps__format_op__2__p13 args)

erlps__format_op__2__p13 :: ErlangFun
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "ADDRESS_TO_CONTRACT"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "ADDRESS_TO_CONTRACT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_NEG"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G1_NEG ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_NORM"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G1_NORM ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_VALID"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G1_VALID ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_IS_ZERO"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G1_IS_ZERO ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_ADD"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_G1_ADD ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G1_MUL"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_G1_MUL ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_NEG"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G2_NEG ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_NORM"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G2_NORM ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_VALID"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G2_VALID ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p13 args = (erlps__format_op__2__p14 args)

erlps__format_op__2__p14 :: ErlangFun
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_IS_ZERO"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_G2_IS_ZERO ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_ADD"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_G2_ADD ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_G2_MUL"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_G2_MUL ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_INV"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_GT_INV ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_ADD"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_GT_ADD ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_MUL"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_GT_MUL ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_POW"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_GT_POW ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_GT_IS_ONE"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_GT_IS_ONE ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_PAIRING"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_PAIRING ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 [(ErlangTuple [(ErlangAtom "BLS12_381_MILLER_LOOP"),
                                        arg0_0, arg1_1, arg2_2]),
                          _]
  =
  let    head_3 = (H.make_string "BLS12_381_MILLER_LOOP ")
  in let head_5 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_9 = (H.make_string " ")
  in let
    head_11 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in let head_15 = (H.make_string " ")
  in let
    head_17 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9
             (ErlangCons head_11
                (ErlangCons head_15 (ErlangCons head_17 ErlangEmptyList))))))
erlps__format_op__2__p14 args = (erlps__format_op__2__p15 args)

erlps__format_op__2__p15 :: ErlangFun
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "BLS12_381_FINAL_EXP"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_FINAL_EXP ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "BLS12_381_INT_TO_FR"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_INT_TO_FR ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "BLS12_381_INT_TO_FP"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_INT_TO_FP ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "BLS12_381_FR_TO_INT"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_FR_TO_INT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "BLS12_381_FP_TO_INT"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "BLS12_381_FP_TO_INT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "AENS_LOOKUP"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "AENS_LOOKUP ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "ORACLE_EXPIRY"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "ORACLE_EXPIRY ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "AUTH_TX"),
                                        arg0_0]),
                          _]
  =
  let    head_1 = (H.make_string "AUTH_TX ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "STR_TO_LIST"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "STR_TO_LIST ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 [(ErlangTuple [(ErlangAtom "STR_FROM_LIST"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "STR_FROM_LIST ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p15 args = (erlps__format_op__2__p16 args)

erlps__format_op__2__p16 :: ErlangFun
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "STR_TO_UPPER"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "STR_TO_UPPER ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "STR_TO_LOWER"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "STR_TO_LOWER ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "CHAR_TO_INT"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "CHAR_TO_INT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "CHAR_FROM_INT"),
                                        arg0_0, arg1_1]),
                          _]
  =
  let    head_2 = (H.make_string "CHAR_FROM_INT ")
  in let head_4 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_8 = (H.make_string " ")
  in let
    head_10 = (erlps__format_arg__2 [(ErlangAtom "a"), arg1_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList))))
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "CALL_PGR"),
                                        arg0_0, arg1_1, arg2_2, arg3_3, arg4_4,
                                        arg5_5, arg6_6]),
                          _]
  =
  let    head_7 = (H.make_string "CALL_PGR ")
  in let head_9 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in let head_13 = (H.make_string " ")
  in let
    head_15 = (erlps__format_arg__2 [(ErlangAtom "is"), arg1_1])
  in let head_19 = (H.make_string " ")
  in let
    head_21 = (erlps__format_arg__2 [(ErlangAtom "a"), arg2_2])
  in let head_25 = (H.make_string " ")
  in let
    head_27 = (erlps__format_arg__2 [(ErlangAtom "a"), arg3_3])
  in let head_31 = (H.make_string " ")
  in let
    head_33 = (erlps__format_arg__2 [(ErlangAtom "a"), arg4_4])
  in let head_37 = (H.make_string " ")
  in let
    head_39 = (erlps__format_arg__2 [(ErlangAtom "a"), arg5_5])
  in let head_43 = (H.make_string " ")
  in let
    head_45 = (erlps__format_arg__2 [(ErlangAtom "a"), arg6_6])
  in
    (ErlangCons head_7
       (ErlangCons head_9
          (ErlangCons head_13
             (ErlangCons head_15
                (ErlangCons head_19
                   (ErlangCons head_21
                      (ErlangCons head_25
                         (ErlangCons head_27
                            (ErlangCons head_31
                               (ErlangCons head_33
                                  (ErlangCons head_37
                                     (ErlangCons head_39
                                        (ErlangCons head_43
                                           (ErlangCons head_45
                                              ErlangEmptyList))))))))))))))
erlps__format_op__2__p16 [(ErlangAtom "DEACTIVATE"), _] =
  let head_0 = (H.make_string "DEACTIVATE")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "ABORT"),
                                        arg0_0]),
                          _]
  =
  let    head_1 = (H.make_string "ABORT ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p16 [(ErlangTuple [(ErlangAtom "EXIT"),
                                        arg0_0]),
                          _]
  =
  let    head_1 = (H.make_string "EXIT ")
  in let head_3 = (erlps__format_arg__2 [(ErlangAtom "a"), arg0_0])
  in (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
erlps__format_op__2__p16 [(ErlangAtom "NOP"), _] =
  let head_0 = (H.make_string "NOP")
  in (ErlangCons head_0 ErlangEmptyList)
erlps__format_op__2__p16 [op_0, _symbols_1] =
  let arg_2 = (H.make_string ";; Bad Op: ~w\n")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons op_0 ErlangEmptyList)])
erlps__format_op__2__p16 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__format_op__2__p16 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)