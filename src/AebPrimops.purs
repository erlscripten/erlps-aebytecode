module Aeb.Primops(erlps__is_local_primop_op__1,
                   erlps__op_needs_type_check__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__is_local_primop_op__1 :: ErlangFun
erlps__is_local_primop_op__1 [op_0]
  | ((weakGt op_0 (ErlangInt (DBI.fromInt 299))) &&
       (weakLt op_0 (ErlangInt (DBI.fromInt 400)))) =
  (ErlangAtom "true")
erlps__is_local_primop_op__1 [op_0]
  | ((weakGt op_0 (ErlangInt (DBI.fromInt 399))) &&
       (weakLt op_0 (ErlangInt (DBI.fromInt 500)))) =
  (ErlangAtom "true")
erlps__is_local_primop_op__1 [op_0] | (isEInt op_0) =
  (ErlangAtom "false")
erlps__is_local_primop_op__1 [arg_1] = (EXC.function_clause unit)
erlps__is_local_primop_op__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__op_needs_type_check__1 :: ErlangFun
erlps__op_needs_type_check__1 [op_0] =
  let    op_arg_2 = (erlps__is_local_primop_op__1 [op_0])
  in let lop_1 = (BIF.erlang__not__1 [op_arg_2])
  in
    case lop_1 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__op_has_dynamic_type__1 [op_0])
      _ -> (EXC.badarg1 lop_1)
erlps__op_needs_type_check__1 [arg_5] =
  (EXC.function_clause unit)
erlps__op_needs_type_check__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__op_has_dynamic_type__1 :: ErlangFun
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 102))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 105))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 104))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 301))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 302))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 305))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 200))) =
  (ErlangAtom "true")
erlps__op_has_dynamic_type__1 [_] = (ErlangAtom "false")
erlps__op_has_dynamic_type__1 [arg_0] =
  (EXC.function_clause unit)
erlps__op_has_dynamic_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)