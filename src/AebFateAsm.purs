module Aeb.Fate.Asm(erlps__assemble_file__3,
                    erlps__asm_to_bytecode__2, erlps__function_call__1,
                    erlps__pp__1, erlps__read_file__1, erlps__strip__1,
                    erlps__to_asm__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__assemble_file__3 :: ErlangFun
erlps__assemble_file__3 [infile_0, outfile_1, options_2] =
  let    asm_4 = (erlps__read_file__1 [infile_0])
  in let
    match_expr_9 = (erlps__asm_to_bytecode__2 [asm_4, options_2])
  in
    case match_expr_9 of
      (ErlangTuple [_env_7, bc_8]) ->
        let
          match_final_10_13 =
            (BIF.do_remote_fun_call "File" "erlps__write_file__2"
               [outfile_1, bc_8])
        in
          case match_final_10_13 of
            (ErlangAtom "ok") -> match_final_10_13
            _ -> (EXC.badmatch match_final_10_13)
      _ -> (EXC.badmatch match_expr_9)
erlps__assemble_file__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__assemble_file__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function_call__1 :: ErlangFun
erlps__function_call__1 [string_0] =
  let
    match_expr_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Asm.Scan" "erlps__scan__1"
         [string_0])
  in
    case match_expr_3 of
      (ErlangTuple [(ErlangAtom "ok"), tokens_2, _]) ->
        (erlps__parse_function_call__1 [tokens_2])
      _ -> (EXC.badmatch match_expr_3)
erlps__function_call__1 [arg_5] = (EXC.function_clause unit)
erlps__function_call__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_function_call__1 :: ErlangFun
erlps__parse_function_call__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                         _,
                                                         name_0]) (ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                            _]) rest_1))]
  =
  let match_expr_4 = (erlps__to_args__1 [rest_1])
  in
    case match_expr_4 of
      (ErlangTuple [args_3, (ErlangEmptyList)]) ->
        let    tup_el_8 = (erlps__mk_hash__1 [name_0])
        in let tup_el_12 = (BIF.erlang__list_to_tuple__1 [args_3])
        in let
          tup_el_10 = (ErlangTuple [(ErlangAtom "tuple"), tup_el_12])
        in let tup_el_7 = (ErlangTuple [tup_el_8, tup_el_10])
        in let arg_5 = (ErlangTuple [(ErlangAtom "tuple"), tup_el_7])
        in
          (BIF.do_remote_fun_call "Aeb.Fate.Encoding" "erlps__serialize__1"
             [arg_5])
      _ -> (EXC.badmatch match_expr_4)
erlps__parse_function_call__1 [arg_14] =
  (EXC.function_clause unit)
erlps__parse_function_call__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_args__1 :: ErlangFun
erlps__to_args__1 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                             _]) (ErlangEmptyList))]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
erlps__to_args__1 [tokens_0] =
  let case_1 = (erlps__parse_value__1 [tokens_0])
  in
    case case_1 of
      (ErlangTuple [arg_3,
                    (ErlangCons (ErlangTuple [(ErlangAtom ","), _]) rest_4)]) ->
        let match_expr_8 = (erlps__to_args__1 [rest_4])
        in
          case match_expr_8 of
            (ErlangTuple [more_6, rest2_7]) ->
              (ErlangTuple [(ErlangCons arg_3 more_6), rest2_7])
            _ -> (EXC.badmatch match_expr_8)
      (ErlangTuple [arg_13,
                    (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                              _]) rest_14)]) ->
        (ErlangTuple [(ErlangCons arg_13 ErlangEmptyList), rest_14])
      something_else -> (EXC.case_clause something_else)
erlps__to_args__1 [arg_19] = (EXC.function_clause unit)
erlps__to_args__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp__1 :: ErlangFun
erlps__pp__1 [fatecode_0] =
  let    listing_2 = (erlps__to_asm__1 [fatecode_0])
  in let arg_3 = (H.make_string "~ts~n")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_3, (ErlangCons listing_2 ErlangEmptyList)])
erlps__pp__1 [arg_7] = (EXC.function_clause unit)
erlps__pp__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_asm__1 :: ErlangFun
erlps__to_asm__1 [fatecode_0] =
  let   
    functions_2 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__functions__1"
         [fatecode_0])
  in let
    symbols_4 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__symbols__1"
         [fatecode_0])
  in let
    annotations_6 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__annotations__1"
         [fatecode_0])
  in let arg_7 = (erlps__get_comments__1 [annotations_6])
  in let arg_12 = (H.make_string "~s")
  in let
    head_14 = (erlps__format_functions__2 [functions_2, symbols_4])
  in let
    arg_11 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_12, (ErlangCons head_14 ErlangEmptyList)])
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_11])
  in
    (erlps__insert_comments__3
       [arg_7, (ErlangInt (DBI.fromInt 1)), arg_10])
erlps__to_asm__1 [arg_18] = (EXC.function_clause unit)
erlps__to_asm__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_comments__3 :: ErlangFun
erlps__insert_comments__3 [(ErlangCons (ErlangTuple [l_0,
                                                     c_1]) comments_2),
                           l_3, string_4]
  | (l_3 == l_0) =
  let    lop_5 = (H.make_string ";; ")
  in let lop_9 = (H.make_string "\n")
  in let
    arg_12 = (BIF.erlang__op_plus [l_0, (ErlangInt (DBI.fromInt 1))])
  in let
    rop_10 =
      (erlps__insert_comments__3 [comments_2, arg_12, string_4])
  in let rop_8 = (BIF.erlang__op_append [lop_9, rop_10])
  in let rop_6 = (BIF.erlang__op_append [c_1, rop_8])
  in (BIF.erlang__op_append [lop_5, rop_6])
erlps__insert_comments__3 [comments_0, l_1,
                           (ErlangCons (ErlangInt num_2) string_3)]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 10))) =
  let    lop_4 = (H.make_string "\n")
  in let
    arg_7 = (BIF.erlang__op_plus [l_1, (ErlangInt (DBI.fromInt 1))])
  in let
    rop_5 = (erlps__insert_comments__3 [comments_0, arg_7, string_3])
  in (BIF.erlang__op_append [lop_4, rop_5])
erlps__insert_comments__3 [comments_0, l_1,
                           (ErlangCons c_2 rest_3)]
  =
  let
    tail_5 = (erlps__insert_comments__3 [comments_0, l_1, rest_3])
  in (ErlangCons c_2 tail_5)
erlps__insert_comments__3 [(ErlangEmptyList), _,
                           (ErlangEmptyList)]
  =
  ErlangEmptyList
erlps__insert_comments__3 [(ErlangCons (ErlangTuple [l_0,
                                                     c_1]) rest_2),
                           _, (ErlangEmptyList)]
  =
  let    lop_3 = (H.make_string ";; ")
  in let lop_7 = (H.make_string "\n")
  in let
    arg_10 = (BIF.erlang__op_plus [l_0, (ErlangInt (DBI.fromInt 1))])
  in let
    rop_8 =
      (erlps__insert_comments__3 [rest_2, arg_10, ErlangEmptyList])
  in let rop_6 = (BIF.erlang__op_append [lop_7, rop_8])
  in let rop_4 = (BIF.erlang__op_append [c_1, rop_6])
  in (BIF.erlang__op_append [lop_3, rop_4])
erlps__insert_comments__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__insert_comments__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_functions__2 :: ErlangFun
erlps__format_functions__2 [functions_0, symbols_1] =
  let lc_src_2 = (BIF.maps__to_list__1 [functions_0])
  in
    (H.flmap
       (\ lc_8 ->
          case lc_8 of
            (ErlangTuple [name_4,
                          (ErlangTuple [_attrs_5, sig_6, codemap_7])]) ->
              let    arg_10 = (erlps__lookup__2 [name_4, symbols_1])
              in let arg_15 = (BIF.maps__to_list__1 [codemap_7])
              in let
                arg_14 =
                  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_15])
              in let
                lc_ret_9 = (erlps__format__4 [arg_10, sig_6, arg_14, symbols_1])
              in (ErlangCons lc_ret_9 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_2)
erlps__format_functions__2 [arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__format_functions__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format__4 :: ErlangFun
erlps__format__4 [name_0, sig_1, bbs_2, symbols_3] =
  let    head_4 = (H.make_string "FUNCTION ")
  in let head_8 = (erlps__format_sig__1 [sig_1])
  in let head_11 = (H.make_string "\n")
  in let head_13 = (erlps__format_bbs__2 [bbs_2, symbols_3])
  in
    (ErlangCons head_4
       (ErlangCons name_0
          (ErlangCons head_8
             (ErlangCons head_11 (ErlangCons head_13 ErlangEmptyList)))))
erlps__format__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__format__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_sig__1 :: ErlangFun
erlps__format_sig__1 [(ErlangTuple [args_0, rettype_1])] =
  let    head_2 = (H.make_string "( ")
  in let head_4 = (erlps__format_arg_types__1 [args_0])
  in let head_7 = (H.make_string ") : ")
  in let head_9 = (erlps__format_type__1 [rettype_1])
  in
    (ErlangCons head_2
       (ErlangCons head_4
          (ErlangCons head_7 (ErlangCons head_9 ErlangEmptyList))))
erlps__format_sig__1 [arg_12] = (EXC.function_clause unit)
erlps__format_sig__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_arg_types__1 :: ErlangFun
erlps__format_arg_types__1 [(ErlangEmptyList)] =
  (H.make_string "")
erlps__format_arg_types__1 [(ErlangCons t_0 (ErlangEmptyList))] =
  (erlps__format_type__1 [t_0])
erlps__format_arg_types__1 [(ErlangCons t_0 ts_1)] =
  let    head_2 = (erlps__format_type__1 [t_0])
  in let head_5 = (H.make_string ", ")
  in let head_7 = (erlps__format_arg_types__1 [ts_1])
  in
    (ErlangCons head_2
       (ErlangCons head_5 (ErlangCons head_7 ErlangEmptyList)))
erlps__format_arg_types__1 [arg_10] = (EXC.function_clause unit)
erlps__format_arg_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_type__1 :: ErlangFun
erlps__format_type__1 [t_0] =
  let arg_1 = (H.make_string "~p")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons t_0 ErlangEmptyList)])
erlps__format_type__1 [arg_5] = (EXC.function_clause unit)
erlps__format_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_bbs__2 :: ErlangFun
erlps__format_bbs__2 [(ErlangEmptyList), _] = ErlangEmptyList
erlps__format_bbs__2 [(ErlangCons (ErlangTuple [bb_0,
                                                code_1]) rest_2),
                      symbols_3]
  =
  let    arg_5 = (H.make_string "  ;; BB : ~p~n")
  in let
    head_4 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_5, (ErlangCons bb_0 ErlangEmptyList)])
  in let head_10 = (erlps__format_code__2 [code_1, symbols_3])
  in let tail_13 = (erlps__format_bbs__2 [rest_2, symbols_3])
  in (ErlangCons head_4 (ErlangCons head_10 tail_13))
erlps__format_bbs__2 [arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__format_bbs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_code__2 :: ErlangFun
erlps__format_code__2 [(ErlangEmptyList), _] = (H.make_string "")
erlps__format_code__2 [(ErlangCons op_0 rest_1), symbols_2] =
  let    head_3 = (H.make_string "          ")
  in let
    head_5 =
      (BIF.do_remote_fun_call "Aeb.Fate.Pp" "erlps__format_op__2"
         [op_0, symbols_2])
  in let head_9 = (H.make_string "\n")
  in let head_11 = (erlps__format_code__2 [rest_1, symbols_2])
  in
    (ErlangCons head_3
       (ErlangCons head_5
          (ErlangCons head_9 (ErlangCons head_11 ErlangEmptyList))))
erlps__format_code__2 [arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__format_code__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_file__1 :: ErlangFun
erlps__read_file__1 [filename_0] =
  let
    match_expr_3 =
      (BIF.do_remote_fun_call "File" "erlps__read_file__1"
         [filename_0])
  in
    case match_expr_3 of
      (ErlangTuple [(ErlangAtom "ok"), file_2]) ->
        (BIF.erlang__binary_to_list__1 [file_2])
      _ -> (EXC.badmatch match_expr_3)
erlps__read_file__1 [arg_5] = (EXC.function_clause unit)
erlps__read_file__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__asm_to_bytecode__2 :: ErlangFun
erlps__asm_to_bytecode__2 [assemblercode_0, options_1] =
  let
    match_expr_4 =
      (BIF.do_remote_fun_call "Aeb.Fate.Asm.Scan" "erlps__scan__1"
         [assemblercode_0])
  in
    case match_expr_4 of
      (ErlangTuple [(ErlangAtom "ok"), tokens_3, _]) ->
        let   
          case_5 =
            (BIF.do_remote_fun_call "Proplists" "erlps__lookup__2"
               [(ErlangAtom "pp_tokens"), options_1])
        in let
          _ =
            case case_5 of
              (ErlangTuple [(ErlangAtom "pp_tokens"), (ErlangAtom "true")]) ->
                let arg_8 = (H.make_string "Tokens ~p~n")
                in
                  (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                     [arg_8, (ErlangCons tokens_3 ErlangEmptyList)])
              (ErlangAtom "none") -> (ErlangAtom "ok")
              something_else -> (EXC.case_clause something_else)
        in let
          val_14 =
            (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__new__0" [])
        in let val_15 = (ErlangMap Map.empty)
        in let
          env_16 =
            (ErlangMap
               (Map.fromFoldable
                  [(Tup.Tuple (ErlangAtom "fate_code") val_14),
                   (Tup.Tuple (ErlangAtom "functions") val_15)]))
        in let
          env1_22 =
            (erlps__to_bytecode__5
               [tokens_3, (ErlangAtom "none"), env_16, ErlangEmptyList,
                options_1])
        in let
          fatecode_25 =
            (BIF.maps__get__2 [(ErlangAtom "fate_code"), env1_22])
        in let
          functionsmap_28 =
            (BIF.maps__get__2 [(ErlangAtom "functions"), env1_22])
        in let arg_30 = (BIF.maps__to_list__1 [functionsmap_28])
        in let
          lc_src_29 =
            (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_30])
        in let
          functions_35 =
            (H.flmap
               (\ lc_33 ->
                  case lc_33 of
                    (ErlangTuple [_, x_32]) -> (ErlangCons x_32 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               lc_src_29)
        in let
          functionsbin_37 =
            (BIF.erlang__iolist_to_binary__1 [functions_35])
        in let
          bytecode_41 =
            (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__serialize__3"
               [fatecode_25, functionsbin_37, options_1])
        in (ErlangTuple [env_16, bytecode_41])
      _ -> (EXC.badmatch match_expr_4)
erlps__asm_to_bytecode__2 [arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__asm_to_bytecode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip__1 :: ErlangFun
erlps__strip__1 [bytecode_0] =
  let
    match_expr_4 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode_one__1"
         [bytecode_0])
  in
    case match_expr_4 of
      (ErlangTuple [code_2, _rest_3]) -> code_2
      _ -> (EXC.badmatch match_expr_4)
erlps__strip__1 [arg_5] = (EXC.function_clause unit)
erlps__strip__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_bytecode__5 :: ErlangFun
erlps__to_bytecode__5 [(ErlangCons (ErlangTuple [(ErlangAtom "function"),
                                                 _line_0,
                                                 (ErlangAtom "FUNCTION")]) rest_1),
                       address_2, env_3, code_4, opts_5]
  =
  let    env2_9 = (erlps__insert_fun__3 [address_2, code_4, env_3])
  in let match_expr_13 = (erlps__to_fun_def__1 [rest_1])
  in
    case match_expr_13 of
      (ErlangTuple [fun_11, rest2_12]) ->
        (erlps__to_bytecode__5
           [rest2_12, fun_11, env2_9, ErlangEmptyList, opts_5])
      _ -> (EXC.badmatch match_expr_13)
erlps__to_bytecode__5 [(ErlangCons (ErlangTuple [(ErlangAtom "mnemonic"),
                                                 _line_0, op_1]) rest_2),
                       address_3, env_4, code_5, opts_6]
  =
  let
    opcode_8 =
      (BIF.do_remote_fun_call "Aeb.Fate.Opcodes" "erlps__m_to_op__1"
         [op_1])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons opcode_8 code_5), opts_6])
erlps__to_bytecode__5 [(ErlangCons (ErlangTuple [(ErlangAtom "arg"),
                                                 _line_0, n_1]) rest_2),
                       address_3, env_4, code_5, opts_6]
  =
  let head_11 = (ErlangTuple [(ErlangAtom "arg"), n_1])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5 [(ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                 _line_0, n_1]) rest_2),
                       address_3, env_4, code_5, opts_6]
  =
  let head_11 = (ErlangTuple [(ErlangAtom "var"), n_1])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5 [(ErlangCons (ErlangTuple [(ErlangAtom "stack"),
                                                 _line_0]) rest_1),
                       address_2, env_3, code_4, opts_5]
  =
  let
    head_10 =
      (ErlangTuple [(ErlangAtom "stack"), (ErlangInt (DBI.fromInt 0))])
  in
    (erlps__to_bytecode__5
       [rest_1, address_2, env_3, (ErlangCons head_10 code_4), opts_5])
erlps__to_bytecode__5 args = (erlps__to_bytecode__5__p1 args)

erlps__to_bytecode__5__p1 :: ErlangFun
erlps__to_bytecode__5__p1 [(ErlangCons (ErlangTuple [(ErlangAtom "int"),
                                                     _line_0, int_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let head_11 = (ErlangTuple [(ErlangAtom "immediate"), int_1])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p1 [(ErlangCons (ErlangTuple [(ErlangAtom "boolean"),
                                                     _line_0, bool_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let head_11 = (ErlangTuple [(ErlangAtom "immediate"), bool_1])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p1 [(ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                     _line_0,
                                                     string_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_string__1"
         [string_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                     _line_0,
                                                     (ErlangTuple [(ErlangAtom "address"),
                                                                   value_1])]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_address__1"
         [value_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                     _line_0,
                                                     (ErlangTuple [(ErlangAtom "contract"),
                                                                   value_1])]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_contract__1"
         [value_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p1 args =
  (erlps__to_bytecode__5__p2 args)

erlps__to_bytecode__5__p2 :: ErlangFun
erlps__to_bytecode__5__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                     _line_0,
                                                     (ErlangTuple [(ErlangAtom "oracle"),
                                                                   value_1])]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_oracle__1"
         [value_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                     _line_0,
                                                     (ErlangTuple [(ErlangAtom "oracle_query"),
                                                                   value_1])]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data"
         "erlps__make_oracle_query__1" [value_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                     _line_0,
                                                     (ErlangTuple [(ErlangAtom "channel"),
                                                                   value_1])]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_contract__1"
         [value_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "bytes"),
                                                     _line_0, value_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_bytes__1"
         [value_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                     _line_0, id_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let    arg_7 = (BIF.erlang__list_to_binary__1 [id_1])
  in let match_expr_12 = (erlps__insert_symbol__2 [arg_7, env_4])
  in
    case match_expr_12 of
      (ErlangTuple [env2_10, id_11]) ->
        let head_17 = (ErlangTuple [(ErlangAtom "immediate"), id_11])
        in
          (erlps__to_bytecode__5
             [rest_2, address_3, env2_10, (ErlangCons head_17 code_5),
              opts_6])
      _ -> (EXC.badmatch match_expr_12)
erlps__to_bytecode__5__p2 args =
  (erlps__to_bytecode__5__p3 args)

erlps__to_bytecode__5__p3 :: ErlangFun
erlps__to_bytecode__5__p3 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                                     _line_0]) rest_1),
                           address_2, env_3, code_4, opts_5]
  =
  let match_expr_9 = (erlps__parse_map__1 [rest_1])
  in
    case match_expr_9 of
      (ErlangTuple [map_7, rest2_8]) ->
        let head_14 = (ErlangTuple [(ErlangAtom "immediate"), map_7])
        in
          (erlps__to_bytecode__5
             [rest2_8, address_2, env_3, (ErlangCons head_14 code_4), opts_5])
      _ -> (EXC.badmatch match_expr_9)
erlps__to_bytecode__5__p3 [(ErlangCons (ErlangTuple [(ErlangAtom "["),
                                                     _line_0]) rest_1),
                           address_2, env_3, code_4, opts_5]
  =
  let match_expr_9 = (erlps__parse_list__1 [rest_1])
  in
    case match_expr_9 of
      (ErlangTuple [list_7, rest2_8]) ->
        let head_14 = (ErlangTuple [(ErlangAtom "immediate"), list_7])
        in
          (erlps__to_bytecode__5
             [rest2_8, address_2, env_3, (ErlangCons head_14 code_4), opts_5])
      _ -> (EXC.badmatch match_expr_9)
erlps__to_bytecode__5__p3 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                     _line_0]) rest_1),
                           address_2, env_3, code_4, opts_5]
  =
  let match_expr_9 = (erlps__parse_tuple__1 [rest_1])
  in
    case match_expr_9 of
      (ErlangTuple [elements_7, rest2_8]) ->
        let    arg_10 = (BIF.erlang__list_to_tuple__1 [elements_7])
        in let
          tuple_12 =
            (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_tuple__1"
               [arg_10])
        in let
          head_17 = (ErlangTuple [(ErlangAtom "immediate"), tuple_12])
        in
          (erlps__to_bytecode__5
             [rest2_8, address_2, env_3, (ErlangCons head_17 code_4), opts_5])
      _ -> (EXC.badmatch match_expr_9)
erlps__to_bytecode__5__p3 [tokens_1@(ErlangCons (ErlangTuple [(ErlangAtom "start_variant"),
                                                              _line_0]) _),
                           address_2, env_3, code_4, opts_5]
  =
  let match_expr_11 = (erlps__parse_variant__1 [tokens_1])
  in
    case match_expr_11 of
      (ErlangTuple [arities_7, tag_8, values_9, rest_10]) ->
        let   
          variant_15 =
            (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_variant__3"
               [arities_7, tag_8, values_9])
        in let
          head_20 = (ErlangTuple [(ErlangAtom "immediate"), variant_15])
        in
          (erlps__to_bytecode__5
             [rest_10, address_2, env_3, (ErlangCons head_20 code_4), opts_5])
      _ -> (EXC.badmatch match_expr_11)
erlps__to_bytecode__5__p3 [(ErlangCons (ErlangTuple [(ErlangAtom "typerep"),
                                                     _line_0]) rest_1),
                           address_2, env_3, code_4, opts_5]
  =
  let match_expr_9 = (erlps__to_type__1 [rest_1])
  in
    case match_expr_9 of
      (ErlangTuple [type_7, rest1_8]) ->
        let   
          typerep_11 =
            (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_typerep__1"
               [type_7])
        in let
          head_16 = (ErlangTuple [(ErlangAtom "immediate"), typerep_11])
        in
          (erlps__to_bytecode__5
             [rest1_8, address_2, env_3, (ErlangCons head_16 code_4), opts_5])
      _ -> (EXC.badmatch match_expr_9)
erlps__to_bytecode__5__p3 args =
  (erlps__to_bytecode__5__p4 args)

erlps__to_bytecode__5__p4 :: ErlangFun
erlps__to_bytecode__5__p4 [(ErlangCons (ErlangTuple [(ErlangAtom "bits"),
                                                     _line_0, bits_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let   
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_bits__1"
         [bits_1])
  in let
    head_11 = (ErlangTuple [(ErlangAtom "immediate"), tup_el_13])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env_4, (ErlangCons head_11 code_5), opts_6])
erlps__to_bytecode__5__p4 [(ErlangCons (ErlangTuple [(ErlangAtom "comment"),
                                                     line_0,
                                                     comment_1]) rest_2),
                           address_3, env_4, code_5, opts_6]
  =
  let
    env2_11 =
      (erlps__insert_annotation__4
         [(ErlangAtom "comment"), line_0, comment_1, env_4])
  in
    (erlps__to_bytecode__5
       [rest_2, address_3, env2_11, code_5, opts_6])
erlps__to_bytecode__5__p4 [(ErlangEmptyList), address_0, env_1,
                           code_2, _opts_3]
  =
  (erlps__insert_fun__3 [address_0, code_2, env_1])
erlps__to_bytecode__5__p4 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__to_bytecode__5__p4 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_map__1 :: ErlangFun
erlps__parse_map__1 [(ErlangCons (ErlangTuple [(ErlangAtom "}"),
                                               _line_0]) rest_1)]
  =
  let tup_el_2 = (ErlangMap Map.empty)
  in (ErlangTuple [tup_el_2, rest_1])
erlps__parse_map__1 [tokens_0] =
  let match_expr_4 = (erlps__parse_value__1 [tokens_0])
  in
    case match_expr_4 of
      (ErlangTuple [key_2,
                    (ErlangCons (ErlangTuple [(ErlangAtom "arrow"),
                                              _]) rest_3)]) ->
        let match_expr_8 = (erlps__parse_value__1 [rest_3])
        in
          case match_expr_8 of
            (ErlangTuple [value_6, rest2_7]) ->
              case rest2_7 of
                (ErlangCons (ErlangTuple [(ErlangAtom ","), _]) rest3_10) ->
                  let match_expr_14 = (erlps__parse_map__1 [rest3_10])
                  in
                    case match_expr_14 of
                      (ErlangTuple [map_12, rest4_13]) ->
                        let   
                          map_ext_19 = (ErlangMap (Map.singleton key_2 value_6))
                        in let
                          tup_el_15 = (BIF.maps__merge__2 [map_12, map_ext_19])
                        in (ErlangTuple [tup_el_15, rest4_13])
                      _ -> (EXC.badmatch match_expr_14)
                (ErlangCons (ErlangTuple [(ErlangAtom "}"), _]) rest3_22) ->
                  let tup_el_23 = (ErlangMap (Map.singleton key_2 value_6))
                  in (ErlangTuple [tup_el_23, rest3_22])
                something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_8)
      _ -> (EXC.badmatch match_expr_4)
erlps__parse_map__1 [arg_27] = (EXC.function_clause unit)
erlps__parse_map__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_list__1 :: ErlangFun
erlps__parse_list__1 [(ErlangCons (ErlangTuple [(ErlangAtom "]"),
                                                _line_0]) rest_1)]
  =
  (ErlangTuple [ErlangEmptyList, rest_1])
erlps__parse_list__1 [tokens_0] =
  let match_expr_4 = (erlps__parse_value__1 [tokens_0])
  in
    case match_expr_4 of
      (ErlangTuple [head_2, rest_3]) ->
        case rest_3 of
          (ErlangCons (ErlangTuple [(ErlangAtom ","), _]) rest2_6) ->
            let match_expr_10 = (erlps__parse_list__1 [rest2_6])
            in
              case match_expr_10 of
                (ErlangTuple [tail_8, rest3_9]) ->
                  (ErlangTuple [(ErlangCons head_2 tail_8), rest3_9])
                _ -> (EXC.badmatch match_expr_10)
          (ErlangCons (ErlangTuple [(ErlangAtom "]"), _]) rest3_15) ->
            (ErlangTuple [(ErlangCons head_2 ErlangEmptyList), rest3_15])
          something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_4)
erlps__parse_list__1 [arg_20] = (EXC.function_clause unit)
erlps__parse_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_tuple__1 :: ErlangFun
erlps__parse_tuple__1 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                 _line_0]) rest_1)]
  =
  (ErlangTuple [ErlangEmptyList, rest_1])
erlps__parse_tuple__1 [tokens_0] =
  let match_expr_4 = (erlps__parse_value__1 [tokens_0])
  in
    case match_expr_4 of
      (ErlangTuple [head_2, rest_3]) ->
        case rest_3 of
          (ErlangCons (ErlangTuple [(ErlangAtom ","), _]) rest2_6) ->
            let match_expr_10 = (erlps__parse_tuple__1 [rest2_6])
            in
              case match_expr_10 of
                (ErlangTuple [tail_8, rest3_9]) ->
                  (ErlangTuple [(ErlangCons head_2 tail_8), rest3_9])
                _ -> (EXC.badmatch match_expr_10)
          (ErlangCons (ErlangTuple [(ErlangAtom ")"), _]) rest3_15) ->
            (ErlangTuple [(ErlangCons head_2 ErlangEmptyList), rest3_15])
          something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_4)
erlps__parse_tuple__1 [arg_20] = (EXC.function_clause unit)
erlps__parse_tuple__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_variant__1 :: ErlangFun
erlps__parse_variant__1 [(ErlangCons (ErlangTuple [(ErlangAtom "start_variant"),
                                                   _line_0]) (ErlangCons (ErlangTuple [(ErlangAtom "["),
                                                                                       _line_1]) rest_2))]
  | (_line_1 == _line_0) =
  let match_expr_6 = (erlps__parse_list__1 [rest_2])
  in
    case match_expr_6 of
      (ErlangTuple [arities_4, rest2_5]) ->
        let
          match_expr_17 =
            (H.flmap
               (\ lc_9 ->
                  let cond_10 = (BIF.erlang__is_integer__1 [lc_9])
                  in
                    case cond_10 of
                      (ErlangAtom "true") ->
                        let
                          cond_12 =
                            (BIF.erlang__op_lesser
                               [lc_9, (ErlangInt (DBI.fromInt 256))])
                        in
                          case cond_12 of
                            (ErlangAtom "true") ->
                              (ErlangCons lc_9 ErlangEmptyList)
                            _ -> ErlangEmptyList
                      _ -> ErlangEmptyList)
               arities_4)
        in
          case match_expr_17 of
            arities_16 | (arities_16 == arities_4) ->
              case rest2_5 of
                (ErlangCons (ErlangTuple [(ErlangAtom "|"),
                                          _]) (ErlangCons (ErlangTuple [(ErlangAtom "int"),
                                                                        _line_18,
                                                                        tag_19]) (ErlangCons (ErlangTuple [(ErlangAtom "|"),
                                                                                                           _]) (ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                                                                         _]) rest3_20)))) | (_line_18 ==
                                                                                                                                                               _line_0) ->
                  let match_expr_25 = (erlps__parse_tuple__1 [rest3_20])
                  in
                    case match_expr_25 of
                      (ErlangTuple [elements_23,
                                    (ErlangCons (ErlangTuple [(ErlangAtom "end_variant"),
                                                              _]) rest4_24)]) ->
                        let size_27 = (BIF.erlang__length__1 [arities_4])
                        in
                          case (ErlangAtom "true") of
                            _ | ((weakLeq (ErlangInt (DBI.fromInt 0)) tag_19) &&
                                   (weakLt tag_19 size_27)) ->
                              let   
                                arg_28 =
                                  (BIF.erlang__op_plus
                                     [tag_19, (ErlangInt (DBI.fromInt 1))])
                              in let
                                arity_32 =
                                  (BIF.do_remote_fun_call "Lists"
                                     "erlps__nth__2" [arg_28, arities_4])
                              in
                                case (ErlangAtom "true") of
                                  _ | ((ErlangAtom "true") ==
                                         (H.falsifyErrors
                                            (\ _ ->
                                               let
                                                 lop_33 =
                                                   (BIF.erlang__length__1
                                                      [elements_23])
                                               in
                                                 (BIF.erlang__op_exactEq
                                                    [lop_33, arity_32])))) ->
                                    let
                                      tup_el_38 =
                                        (BIF.erlang__list_to_tuple__1
                                           [elements_23])
                                    in
                                      (ErlangTuple
                                         [arities_4, tag_19, tup_el_38,
                                          rest4_24])
                                  _ -> (EXC.if_clause unit)
                            _ -> (EXC.if_clause unit)
                      _ -> (EXC.badmatch match_expr_25)
                _ -> (EXC.badmatch rest2_5)
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_6)
erlps__parse_variant__1 [arg_41] = (EXC.function_clause unit)
erlps__parse_variant__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_value__1 :: ErlangFun
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "int"),
                                                 _line_0, int_1]) rest_2)]
  =
  (ErlangTuple [int_1, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "boolean"),
                                                 _line_0, bool_1]) rest_2)]
  =
  (ErlangTuple [bool_1, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                                 _line_0]) rest_1)]
  =
  (erlps__parse_map__1 [rest_1])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "["),
                                                 _line_0]) rest_1)]
  =
  (erlps__parse_list__1 [rest_1])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                 _line_0]) rest_1)]
  =
  let match_expr_5 = (erlps__parse_tuple__1 [rest_1])
  in
    case match_expr_5 of
      (ErlangTuple [t_3, rest2_4]) ->
        let    arg_7 = (BIF.erlang__list_to_tuple__1 [t_3])
        in let
          tup_el_6 =
            (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_tuple__1"
               [arg_7])
        in (ErlangTuple [tup_el_6, rest2_4])
      _ -> (EXC.badmatch match_expr_5)
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "bits"),
                                                 _line_0, bits_1]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_bits__1"
         [bits_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [tokens_1@(ErlangCons (ErlangTuple [(ErlangAtom "start_variant"),
                                                          _line_0]) _)]
  =
  let match_expr_7 = (erlps__parse_variant__1 [tokens_1])
  in
    case match_expr_7 of
      (ErlangTuple [arities_3, tag_4, values_5, rest_6]) ->
        let
          variant_11 =
            (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_variant__3"
               [arities_3, tag_4, values_5])
        in (ErlangTuple [variant_11, rest_6])
      _ -> (EXC.badmatch match_expr_7)
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                 _line_0, string_1]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_string__1"
         [string_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                 _line_0,
                                                 (ErlangTuple [(ErlangAtom "address"),
                                                               address_1])]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_address__1"
         [address_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                 _line_0,
                                                 (ErlangTuple [(ErlangAtom "contract"),
                                                               address_1])]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_contract__1"
         [address_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                 _line_0,
                                                 (ErlangTuple [(ErlangAtom "oracle"),
                                                               address_1])]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_oracle__1"
         [address_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                 _line_0,
                                                 (ErlangTuple [(ErlangAtom "oracle_query"),
                                                               address_1])]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data"
         "erlps__make_oracle_query__1" [address_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "object"),
                                                 _line_0,
                                                 (ErlangTuple [(ErlangAtom "channel"),
                                                               address_1])]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_channel__1"
         [address_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "hash"),
                                                 _line_0, hash_1]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data" "erlps__make_hash__1"
         [hash_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "signature"),
                                                 _line_0, hash_1]) rest_2)]
  =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Data"
         "erlps__make_signature__1" [hash_1])
  in (ErlangTuple [tup_el_3, rest_2])
erlps__parse_value__1 [(ErlangCons (ErlangTuple [(ErlangAtom "typerep"),
                                                 _line_0]) rest_1)]
  =
  (erlps__to_type__1 [rest_1])
erlps__parse_value__1 [arg_3] = (EXC.function_clause unit)
erlps__parse_value__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_fun_def__1 :: ErlangFun
erlps__to_fun_def__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                _,
                                                name_0]) (ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                   _]) rest_1))]
  =
  let match_expr_5 = (erlps__to_arg_types__1 [rest_1])
  in
    case match_expr_5 of
      (ErlangTuple [argstype_3,
                    (ErlangCons (ErlangTuple [(ErlangAtom "to"),
                                              _]) rest2_4)]) ->
        let match_expr_9 = (erlps__to_type__1 [rest2_4])
        in
          case match_expr_9 of
            (ErlangTuple [rettype_7, rest3_8]) ->
              let tup_el_10 = (ErlangTuple [name_0, argstype_3, rettype_7])
              in (ErlangTuple [tup_el_10, rest3_8])
            _ -> (EXC.badmatch match_expr_9)
      _ -> (EXC.badmatch match_expr_5)
erlps__to_fun_def__1 [arg_15] = (EXC.function_clause unit)
erlps__to_fun_def__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_arg_types__1 :: ErlangFun
erlps__to_arg_types__1 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                  _]) rest_0)]
  =
  (ErlangTuple [ErlangEmptyList, rest_0])
erlps__to_arg_types__1 [tokens_0] =
  let case_1 = (erlps__to_type__1 [tokens_0])
  in
    case case_1 of
      (ErlangTuple [type_3,
                    (ErlangCons (ErlangTuple [(ErlangAtom ","), _]) rest_4)]) ->
        let match_expr_8 = (erlps__to_arg_types__1 [rest_4])
        in
          case match_expr_8 of
            (ErlangTuple [moretypes_6, rest2_7]) ->
              (ErlangTuple [(ErlangCons type_3 moretypes_6), rest2_7])
            _ -> (EXC.badmatch match_expr_8)
      (ErlangTuple [type_13,
                    (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                              _]) rest_14)]) ->
        (ErlangTuple [(ErlangCons type_13 ErlangEmptyList), rest_14])
      something_else -> (EXC.case_clause something_else)
erlps__to_arg_types__1 [arg_19] = (EXC.function_clause unit)
erlps__to_arg_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_type__1 :: ErlangFun
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]) rest_7)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 103)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 114))) =
  (ErlangTuple [(ErlangAtom "integer"), rest_7])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]) rest_7)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 110))) =
  (ErlangTuple [(ErlangAtom "boolean"), rest_7])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList)))))))]) rest_6)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 103))) =
  (ErlangTuple [(ErlangAtom "string"), rest_6])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]) rest_7)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 100)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 100)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 115)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 115))) =
  (ErlangTuple [(ErlangAtom "address"), rest_7])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList)))))))))]) rest_8)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_7) == (ErlangInt (DBI.fromInt 116))) =
  (ErlangTuple [(ErlangAtom "contract"), rest_8])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList)))))))]) rest_6)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangTuple [(ErlangAtom "oracle"), rest_6])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))))))))))]) rest_12)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 95)))
  , ((ErlangInt num_7) == (ErlangInt (DBI.fromInt 113)))
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 117)))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_10) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_11) == (ErlangInt (DBI.fromInt 121))) =
  (ErlangTuple [(ErlangAtom "oracle_query"), rest_12])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))))]) rest_4)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 109)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangTuple [(ErlangAtom "name"), rest_4])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]) rest_7)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 104)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 108))) =
  (ErlangTuple [(ErlangAtom "channel"), rest_7])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))))]) rest_4)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 104)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 115)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 104))) =
  (ErlangTuple [(ErlangAtom "hash"), rest_4])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))))))]) rest_9)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 103)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 117)))
  , ((ErlangInt num_7) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangTuple [(ErlangAtom "signature"), rest_9])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                             _,
                                             (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))))]) rest_4)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 115))) =
  (ErlangTuple [(ErlangAtom "bits"), rest_4])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                             _]) (ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))))]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                                                                                                                                                                                     _]) rest_4)))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 115)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116))) =
  let match_expr_8 = (erlps__to_type__1 [rest_4])
  in
    case match_expr_8 of
      (ErlangTuple [listtype_6,
                    (ErlangCons (ErlangTuple [(ErlangAtom "}"),
                                              _]) rest2_7)]) ->
        let tup_el_9 = (ErlangTuple [(ErlangAtom "list"), listtype_6])
        in (ErlangTuple [tup_el_9, rest2_7])
      _ -> (EXC.badmatch match_expr_8)
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                             _]) (ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList))))))]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                                                                                                                                                                                                                    _]) (ErlangCons (ErlangTuple [(ErlangAtom "["),
                                                                                                                                                                                                                                                                                                                  _]) rest_5))))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 117)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 112)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 101))) =
  let match_expr_9 = (erlps__to_list_of_types__1 [rest_5])
  in
    case match_expr_9 of
      (ErlangTuple [elementtypes_7,
                    (ErlangCons (ErlangTuple [(ErlangAtom "}"),
                                              _]) rest2_8)]) ->
        let
          tup_el_10 = (ErlangTuple [(ErlangAtom "tuple"), elementtypes_7])
        in (ErlangTuple [tup_el_10, rest2_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                             _]) (ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList))))]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                                                                                                                                                      _]) rest_3)))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 109)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 112))) =
  let match_expr_7 = (erlps__to_type__1 [rest_3])
  in
    case match_expr_7 of
      (ErlangTuple [keytype_5,
                    (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                              _]) rest2_6)]) ->
        let match_expr_11 = (erlps__to_type__1 [rest2_6])
        in
          case match_expr_11 of
            (ErlangTuple [valuetype_9,
                          (ErlangCons (ErlangTuple [(ErlangAtom "}"),
                                                    _]) rest3_10)]) ->
              let
                tup_el_12 =
                  (ErlangTuple [(ErlangAtom "map"), keytype_5, valuetype_9])
              in (ErlangTuple [tup_el_12, rest3_10])
            _ -> (EXC.badmatch match_expr_11)
      _ -> (EXC.badmatch match_expr_7)
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                             _]) (ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList))))))]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                                                                                                                                                                                                                    _]) (ErlangCons (ErlangTuple [(ErlangAtom "int"),
                                                                                                                                                                                                                                                                                                                  _,
                                                                                                                                                                                                                                                                                                                  size_5]) (ErlangCons (ErlangTuple [(ErlangAtom "}"),
                                                                                                                                                                                                                                                                                                                                                     _]) rest_6)))))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 121)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 115))) =
  let tup_el_7 = (ErlangTuple [(ErlangAtom "bytes"), size_5])
  in (ErlangTuple [tup_el_7, rest_6])
erlps__to_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                             _]) (ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                                                                                                                                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "["),
                                                                                                                                                                                                                                                                                                                                                                                _]) rest_7))))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 118)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 116))) =
  let match_expr_11 = (erlps__to_list_of_types__1 [rest_7])
  in
    case match_expr_11 of
      (ErlangTuple [elementtypes_9,
                    (ErlangCons (ErlangTuple [(ErlangAtom "}"),
                                              _]) rest2_10)]) ->
        let
          tup_el_12 =
            (ErlangTuple [(ErlangAtom "variant"), elementtypes_9])
        in (ErlangTuple [tup_el_12, rest2_10])
      _ -> (EXC.badmatch match_expr_11)
erlps__to_type__1 [arg_16] = (EXC.function_clause unit)
erlps__to_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_list_of_types__1 :: ErlangFun
erlps__to_list_of_types__1 [(ErlangCons (ErlangTuple [(ErlangAtom "]"),
                                                      _]) rest_0)]
  =
  (ErlangTuple [ErlangEmptyList, rest_0])
erlps__to_list_of_types__1 [tokens_0] =
  let case_1 = (erlps__to_type__1 [tokens_0])
  in
    case case_1 of
      (ErlangTuple [type_3,
                    (ErlangCons (ErlangTuple [(ErlangAtom ","), _]) rest_4)]) ->
        let match_expr_8 = (erlps__to_list_of_types__1 [rest_4])
        in
          case match_expr_8 of
            (ErlangTuple [moretypes_6, rest2_7]) ->
              (ErlangTuple [(ErlangCons type_3 moretypes_6), rest2_7])
            _ -> (EXC.badmatch match_expr_8)
      (ErlangTuple [type_13,
                    (ErlangCons (ErlangTuple [(ErlangAtom "]"),
                                              _]) rest_14)]) ->
        (ErlangTuple [(ErlangCons type_13 ErlangEmptyList), rest_14])
      something_else -> (EXC.case_clause something_else)
erlps__to_list_of_types__1 [arg_19] = (EXC.function_clause unit)
erlps__to_list_of_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_fun__3 :: ErlangFun
erlps__insert_fun__3 [(ErlangAtom "none"), (ErlangEmptyList),
                      env_0]
  =
  env_0
erlps__insert_fun__3 [(ErlangTuple [namestring_0, argtype_1,
                                    rettype_2]),
                      code_3, env_7@(ErlangMap map_4)]
  | (DM.Just funs_6) <-
      ((Map.lookup (ErlangAtom "functions") map_4))
  , (DM.Just fatecode_5) <-
      ((Map.lookup (ErlangAtom "fate_code") map_4)) =
  let    name_9 = (BIF.erlang__list_to_binary__1 [namestring_0])
  in let
    match_expr_14 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__insert_symbol__2"
         [name_9, fatecode_5])
  in
    case match_expr_14 of
      (ErlangTuple [fatecode1_12, id_13]) ->
        let   
          arg_15 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [code_3])
        in let
          bodybytecode_17 =
            (BIF.do_remote_fun_call "Aeb.Fate.Code"
               "erlps__serialize_code__1" [arg_15])
        in let arg_18 = (ErlangTuple [argtype_1, rettype_2])
        in let
          sigbytecode_21 =
            (BIF.do_remote_fun_call "Aeb.Fate.Code"
               "erlps__serialize_signature__1" [arg_18])
        in let
          head_26 =
            (BIF.do_remote_fun_call "Aeb.Fate.Encoding" "erlps__serialize__1"
               [(ErlangInt (DBI.fromInt 0))])
        in let
          map_ext_41 =
            (ErlangMap
               (Map.singleton id_13
                  (ErlangCons (ErlangInt (DBI.fromInt 254))
                     (ErlangCons id_13
                        (ErlangCons head_26
                           (ErlangCons sigbytecode_21
                              (ErlangCons bodybytecode_17 ErlangEmptyList)))))))
        in let val_37 = (BIF.maps__merge__2 [funs_6, map_ext_41])
        in let
          map_ext_44 =
            (ErlangMap
               (Map.fromFoldable
                  [(Tup.Tuple (ErlangAtom "functions") val_37),
                   (Tup.Tuple (ErlangAtom "fate_code") fatecode1_12)]))
        in (BIF.maps__merge__2 [env_7, map_ext_44])
      _ -> (EXC.badmatch match_expr_14)
erlps__insert_fun__3 [arg_46, arg_47, arg_48] =
  (EXC.function_clause unit)
erlps__insert_fun__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_symbol__2 :: ErlangFun
erlps__insert_symbol__2 [name_0, env_3@(ErlangMap map_1)]
  | (DM.Just fatecode_2) <-
      ((Map.lookup (ErlangAtom "fate_code") map_1)) =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__insert_symbol__2"
         [name_0, fatecode_2])
  in
    case match_expr_8 of
      (ErlangTuple [fatecode1_6, id_7]) ->
        let   
          map_ext_13 =
            (ErlangMap (Map.singleton (ErlangAtom "fate_code") fatecode1_6))
        in let tup_el_9 = (BIF.maps__merge__2 [env_3, map_ext_13])
        in (ErlangTuple [tup_el_9, id_7])
      _ -> (EXC.badmatch match_expr_8)
erlps__insert_symbol__2 [arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__insert_symbol__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_annotation__4 :: ErlangFun
erlps__insert_annotation__4 [(ErlangAtom "comment"), line_0,
                             comment_1, env_4@(ErlangMap map_2)]
  | (DM.Just fatecode_3) <-
      ((Map.lookup (ErlangAtom "fate_code") map_2)) =
  let   
    fatecode1_9 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code"
         "erlps__insert_annotation__4"
         [(ErlangAtom "comment"), line_0, comment_1, fatecode_3])
  in let
    map_ext_13 =
      (ErlangMap (Map.singleton (ErlangAtom "fate_code") fatecode1_9))
  in (BIF.maps__merge__2 [env_4, map_ext_13])
erlps__insert_annotation__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__insert_annotation__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mk_hash__1 :: ErlangFun
erlps__mk_hash__1 [id_0] =
  let    arg_2 = (BIF.erlang__list_to_binary__1 [id_0])
  in let
    match_expr_17 =
      (BIF.do_remote_fun_call "Eblake2" "erlps__blake2b__2"
         [(ErlangInt (DBI.fromInt 32)), arg_2])
  in
    case match_expr_17 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangBinary bin_c_4)]) | size_5 <- ((DBI.fromInt 8))
                                             , (BIN.Ok a_7 bin_6) <-
                                                 ((BIN.chop_int bin_c_4 size_5 1
                                                     BIN.Big BIN.Unsigned))
                                             , size_8 <- ((DBI.fromInt 8))
                                             , (BIN.Ok b_10 bin_9) <-
                                                 ((BIN.chop_int bin_6 size_8 1
                                                     BIN.Big BIN.Unsigned))
                                             , size_11 <- ((DBI.fromInt 8))
                                             , (BIN.Ok c_13 bin_12) <-
                                                 ((BIN.chop_int bin_9 size_11 1
                                                     BIN.Big BIN.Unsigned))
                                             , size_14 <- ((DBI.fromInt 8))
                                             , (BIN.Ok d_16 bin_15) <-
                                                 ((BIN.chop_int bin_12 size_14 1
                                                     BIN.Big BIN.Unsigned)) ->
        (ErlangBinary
           (BIN.concat
              [(BIN.from_int a_7 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.from_int b_10 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.from_int c_13 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.from_int d_16 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
      _ -> (EXC.badmatch match_expr_17)
erlps__mk_hash__1 [arg_22] = (EXC.function_clause unit)
erlps__mk_hash__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_comments__1 :: ErlangFun
erlps__get_comments__1 [annotations_0] =
  let lc_src_1 = (BIF.maps__to_list__1 [annotations_0])
  in
    (H.flmap
       (\ lc_12 ->
          case lc_12 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                        (ErlangTuple [(ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))))),
                                                      line_10])]),
                          comment_11]) | ((ErlangInt num_3) ==
                                            (ErlangInt (DBI.fromInt 99)))
                                       , ((ErlangInt num_4) ==
                                            (ErlangInt (DBI.fromInt 111)))
                                       , ((ErlangInt num_5) ==
                                            (ErlangInt (DBI.fromInt 109)))
                                       , ((ErlangInt num_6) ==
                                            (ErlangInt (DBI.fromInt 109)))
                                       , ((ErlangInt num_7) ==
                                            (ErlangInt (DBI.fromInt 101)))
                                       , ((ErlangInt num_8) ==
                                            (ErlangInt (DBI.fromInt 110)))
                                       , ((ErlangInt num_9) ==
                                            (ErlangInt (DBI.fromInt 116))) ->
              let lc_ret_13 = (ErlangTuple [line_10, comment_11])
              in (ErlangCons lc_ret_13 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_1)
erlps__get_comments__1 [arg_16] = (EXC.function_clause unit)
erlps__get_comments__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lookup__2 :: ErlangFun
erlps__lookup__2 [name_0, symbols_1] =
  (BIF.do_remote_fun_call "Maps" "erlps__get__3"
     [name_0, symbols_1, name_0])
erlps__lookup__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__lookup__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)